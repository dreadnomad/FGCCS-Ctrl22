
atmevse_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00802800  00001424  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  000052b0  000012b0  00001364  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000ff  00802810  00802810  000014e8  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000036ce  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026af  00000000  00000000  00004d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a8e  00000000  00000000  000073d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000294  00000000  00000000  00007e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000014a8  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cb1  00000000  00000000  000095a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000128  00000000  00000000  0000a255  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_17>
      48:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_18>
      4c:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_19>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	18 e2       	ldi	r17, 0x28	; 40
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b8 e2       	ldi	r27, 0x28	; 40
      a2:	e4 e2       	ldi	r30, 0x24	; 36
      a4:	f4 e1       	ldi	r31, 0x14	; 20
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 31       	cpi	r26, 0x10	; 16
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	29 e2       	ldi	r18, 0x29	; 41
      b4:	a0 e1       	ldi	r26, 0x10	; 16
      b6:	b8 e2       	ldi	r27, 0x28	; 40
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 30       	cpi	r26, 0x0F	; 15
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
      c6:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <led_toggle>:
        cmd_init();     
    #endif
}

int8_t led_toggle() {
    PORTA.OUTTGL |= PIN6_bm;
      ce:	e0 e0       	ldi	r30, 0x00	; 0
      d0:	f4 e0       	ldi	r31, 0x04	; 4
      d2:	87 81       	ldd	r24, Z+7	; 0x07
      d4:	80 64       	ori	r24, 0x40	; 64
      d6:	87 83       	std	Z+7, r24	; 0x07
    return 0;
}
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	08 95       	ret

000000dc <led_on>:

int8_t led_on() {
    PORTA.OUT &= ~PIN6_bm;
      dc:	e0 e0       	ldi	r30, 0x00	; 0
      de:	f4 e0       	ldi	r31, 0x04	; 4
      e0:	84 81       	ldd	r24, Z+4	; 0x04
      e2:	8f 7b       	andi	r24, 0xBF	; 191
      e4:	84 83       	std	Z+4, r24	; 0x04
    return 0;
}
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	08 95       	ret

000000ea <led_off>:

int8_t led_off() {
    PORTA.OUT |= PIN6_bm;
      ea:	e0 e0       	ldi	r30, 0x00	; 0
      ec:	f4 e0       	ldi	r31, 0x04	; 4
      ee:	84 81       	ldd	r24, Z+4	; 0x04
      f0:	80 64       	ori	r24, 0x40	; 64
      f2:	84 83       	std	Z+4, r24	; 0x04
    return 0;
}
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	08 95       	ret

000000f8 <main>:

/*
    Application
    *************************************************/
int main(void) {
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	27 97       	sbiw	r28, 0x07	; 7
     102:	cd bf       	out	0x3d, r28	; 61
     104:	de bf       	out	0x3e, r29	; 62
static void init() {
    /* System init */
    
    
    /* control LED init */
    PORTA.DIRSET |= PIN6_bm;
     106:	e0 e0       	ldi	r30, 0x00	; 0
     108:	f4 e0       	ldi	r31, 0x04	; 4
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	80 64       	ori	r24, 0x40	; 64
     10e:	81 83       	std	Z+1, r24	; 0x01
    
    /* uart init */
    #ifdef ATMEVSE_UART
        uart_init();
     110:	0e 94 45 04 	call	0x88a	; 0x88a <uart_init>
    #endif
    
    /* cmd init */
    #ifdef ATMEVSE_CMD
        cmd_init();     
     114:	0e 94 32 02 	call	0x464	; 0x464 <cmd_init>
/*
    Application
    *************************************************/
int main(void) {
    init();
    uint8_t test8 = 16;
     118:	80 e1       	ldi	r24, 0x10	; 16
     11a:	89 83       	std	Y+1, r24	; 0x01
    uint16_t test16 = 4096;
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e1       	ldi	r25, 0x10	; 16
     120:	8a 83       	std	Y+2, r24	; 0x02
     122:	9b 83       	std	Y+3, r25	; 0x03
    uint32_t test32 = 100512;
     124:	80 ea       	ldi	r24, 0xA0	; 160
     126:	98 e8       	ldi	r25, 0x88	; 136
     128:	a1 e0       	ldi	r26, 0x01	; 1
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	8c 83       	std	Y+4, r24	; 0x04
     12e:	9d 83       	std	Y+5, r25	; 0x05
     130:	ae 83       	std	Y+6, r26	; 0x06
     132:	bf 83       	std	Y+7, r27	; 0x07
    cmd_add("led_on", *led_on);
     134:	6e e6       	ldi	r22, 0x6E	; 110
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	82 eb       	ldi	r24, 0xB2	; 178
     13a:	92 e5       	ldi	r25, 0x52	; 82
     13c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <cmd_add>
    cmd_add("led_off", *led_off);
     140:	65 e7       	ldi	r22, 0x75	; 117
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	89 eb       	ldi	r24, 0xB9	; 185
     146:	92 e5       	ldi	r25, 0x52	; 82
     148:	0e 94 7e 02 	call	0x4fc	; 0x4fc <cmd_add>
    cmd_add("led_toggle", *led_toggle);
     14c:	67 e6       	ldi	r22, 0x67	; 103
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	81 ec       	ldi	r24, 0xC1	; 193
     152:	92 e5       	ldi	r25, 0x52	; 82
     154:	0e 94 7e 02 	call	0x4fc	; 0x4fc <cmd_add>
    param_add("test8", &test8, 8);
     158:	48 e0       	ldi	r20, 0x08	; 8
     15a:	be 01       	movw	r22, r28
     15c:	6f 5f       	subi	r22, 0xFF	; 255
     15e:	7f 4f       	sbci	r23, 0xFF	; 255
     160:	8c ec       	ldi	r24, 0xCC	; 204
     162:	92 e5       	ldi	r25, 0x52	; 82
     164:	0e 94 01 04 	call	0x802	; 0x802 <param_add>
    param_add("test16", &test16, 16);
     168:	40 e1       	ldi	r20, 0x10	; 16
     16a:	be 01       	movw	r22, r28
     16c:	6e 5f       	subi	r22, 0xFE	; 254
     16e:	7f 4f       	sbci	r23, 0xFF	; 255
     170:	82 ed       	ldi	r24, 0xD2	; 210
     172:	92 e5       	ldi	r25, 0x52	; 82
     174:	0e 94 01 04 	call	0x802	; 0x802 <param_add>
    param_add("test32", &test32, 32);
     178:	40 e2       	ldi	r20, 0x20	; 32
     17a:	be 01       	movw	r22, r28
     17c:	6c 5f       	subi	r22, 0xFC	; 252
     17e:	7f 4f       	sbci	r23, 0xFF	; 255
     180:	89 ed       	ldi	r24, 0xD9	; 217
     182:	92 e5       	ldi	r25, 0x52	; 82
     184:	0e 94 01 04 	call	0x802	; 0x802 <param_add>
    sys_status();
     188:	0e 94 ca 01 	call	0x394	; 0x394 <sys_status>
    led_off();
     18c:	0e 94 75 00 	call	0xea	; 0xea <led_off>
    while (1) {
        char* input = uart0_readLine();
     190:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uart0_readLine>
        cmd_parse(input);
     194:	0e 94 96 02 	call	0x52c	; 0x52c <cmd_parse>
     198:	fb cf       	rjmp	.-10     	; 0x190 <main+0x98>

0000019a <param_set>:
        }
    }
    return retval;
}

static int8_t param_set(char *param_string, void *param_new_val_ptr, uint8_t param_size) {
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	5c 01       	movw	r10, r24
     1ae:	7b 01       	movw	r14, r22
     1b0:	14 2f       	mov	r17, r20
     1b2:	c1 2c       	mov	r12, r1
     1b4:	d1 2c       	mov	r13, r1
    int8_t retval = -2;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        if (strcmp(param_string, param_table[i].param) == 0) {
     1b6:	e6 01       	movw	r28, r12
     1b8:	f6 01       	movw	r30, r12
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	ec 0d       	add	r30, r12
     1c4:	fd 1d       	adc	r31, r13
     1c6:	e9 5e       	subi	r30, 0xE9	; 233
     1c8:	f7 4d       	sbci	r31, 0xD7	; 215
     1ca:	60 81       	ld	r22, Z
     1cc:	71 81       	ldd	r23, Z+1	; 0x01
     1ce:	c5 01       	movw	r24, r10
     1d0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strcmp>
     1d4:	89 2b       	or	r24, r25
     1d6:	09 f0       	breq	.+2      	; 0x1da <param_set+0x40>
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <param_set+0xc4>
            cli();
     1da:	f8 94       	cli
            switch (param_size) {                                           // cast pointer to the correct data type according to param table size info
     1dc:	10 31       	cpi	r17, 0x10	; 16
     1de:	a1 f0       	breq	.+40     	; 0x208 <param_set+0x6e>
     1e0:	10 32       	cpi	r17, 0x20	; 32
     1e2:	21 f1       	breq	.+72     	; 0x22c <param_set+0x92>
     1e4:	18 30       	cpi	r17, 0x08	; 8
     1e6:	c1 f5       	brne	.+112    	; 0x258 <param_set+0xbe>
            case 8:
                *(uint8_t *)param_table[i].value = *(uint8_t *)param_new_val_ptr;
     1e8:	c6 01       	movw	r24, r12
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	c8 0f       	add	r28, r24
     1f4:	d9 1f       	adc	r29, r25
     1f6:	c9 5e       	subi	r28, 0xE9	; 233
     1f8:	d7 4d       	sbci	r29, 0xD7	; 215
     1fa:	ea 81       	ldd	r30, Y+2	; 0x02
     1fc:	fb 81       	ldd	r31, Y+3	; 0x03
     1fe:	d7 01       	movw	r26, r14
     200:	8c 91       	ld	r24, X
     202:	80 83       	st	Z, r24
                retval = 0;
     204:	80 e0       	ldi	r24, 0x00	; 0
            	break;
     206:	29 c0       	rjmp	.+82     	; 0x25a <param_set+0xc0>
            case 16:
                *(uint16_t *)param_table[i].value = *(uint16_t *)param_new_val_ptr;
     208:	c6 01       	movw	r24, r12
     20a:	88 0f       	add	r24, r24
     20c:	99 1f       	adc	r25, r25
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	c8 0f       	add	r28, r24
     214:	d9 1f       	adc	r29, r25
     216:	c9 5e       	subi	r28, 0xE9	; 233
     218:	d7 4d       	sbci	r29, 0xD7	; 215
     21a:	ea 81       	ldd	r30, Y+2	; 0x02
     21c:	fb 81       	ldd	r31, Y+3	; 0x03
     21e:	e7 01       	movw	r28, r14
     220:	88 81       	ld	r24, Y
     222:	99 81       	ldd	r25, Y+1	; 0x01
     224:	80 83       	st	Z, r24
     226:	91 83       	std	Z+1, r25	; 0x01
                retval = 0;
     228:	80 e0       	ldi	r24, 0x00	; 0
                break;
     22a:	17 c0       	rjmp	.+46     	; 0x25a <param_set+0xc0>
            case 32:
                *(uint32_t *)param_table[i].value = *(uint32_t *)param_new_val_ptr;
     22c:	c6 01       	movw	r24, r12
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	c8 0f       	add	r28, r24
     238:	d9 1f       	adc	r29, r25
     23a:	c9 5e       	subi	r28, 0xE9	; 233
     23c:	d7 4d       	sbci	r29, 0xD7	; 215
     23e:	ea 81       	ldd	r30, Y+2	; 0x02
     240:	fb 81       	ldd	r31, Y+3	; 0x03
     242:	e7 01       	movw	r28, r14
     244:	88 81       	ld	r24, Y
     246:	99 81       	ldd	r25, Y+1	; 0x01
     248:	aa 81       	ldd	r26, Y+2	; 0x02
     24a:	bb 81       	ldd	r27, Y+3	; 0x03
     24c:	80 83       	st	Z, r24
     24e:	91 83       	std	Z+1, r25	; 0x01
     250:	a2 83       	std	Z+2, r26	; 0x02
     252:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
     254:	80 e0       	ldi	r24, 0x00	; 0
                break; 
     256:	01 c0       	rjmp	.+2      	; 0x25a <param_set+0xc0>
            default:
                retval = -3;                                                // default return value -3 -> invalid value size               
     258:	8d ef       	ldi	r24, 0xFD	; 253
            }
            sei();
     25a:	78 94       	sei
     25c:	09 c0       	rjmp	.+18     	; 0x270 <param_set+0xd6>
     25e:	df ef       	ldi	r29, 0xFF	; 255
     260:	cd 1a       	sub	r12, r29
     262:	dd 0a       	sbc	r13, r29
    return retval;
}

static int8_t param_set(char *param_string, void *param_new_val_ptr, uint8_t param_size) {
    int8_t retval = -2;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     264:	84 e1       	ldi	r24, 0x14	; 20
     266:	c8 16       	cp	r12, r24
     268:	d1 04       	cpc	r13, r1
     26a:	09 f0       	breq	.+2      	; 0x26e <param_set+0xd4>
     26c:	a4 cf       	rjmp	.-184    	; 0x1b6 <param_set+0x1c>
     26e:	8e ef       	ldi	r24, 0xFE	; 254
            sei();
            i = MAX_PARAM_NO;                                               // exit loop
        }
    }
    return retval;
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	bf 90       	pop	r11
     280:	af 90       	pop	r10
     282:	08 95       	ret

00000284 <param_get>:
    }
    
    return retval;
}

static int8_t param_get(char *param_string, uint32_t *param_value) {
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	8c 01       	movw	r16, r24
     296:	7b 01       	movw	r14, r22
     298:	c1 2c       	mov	r12, r1
     29a:	d1 2c       	mov	r13, r1
    int8_t retval = -2;                                         // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        if (strcmp(param_string, param_table[i].param) == 0) {
     29c:	e6 01       	movw	r28, r12
     29e:	f6 01       	movw	r30, r12
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	ee 0f       	add	r30, r30
     2a6:	ff 1f       	adc	r31, r31
     2a8:	ec 0d       	add	r30, r12
     2aa:	fd 1d       	adc	r31, r13
     2ac:	e9 5e       	subi	r30, 0xE9	; 233
     2ae:	f7 4d       	sbci	r31, 0xD7	; 215
     2b0:	60 81       	ld	r22, Z
     2b2:	71 81       	ldd	r23, Z+1	; 0x01
     2b4:	c8 01       	movw	r24, r16
     2b6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strcmp>
     2ba:	89 2b       	or	r24, r25
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <param_get+0x3c>
     2be:	4a c0       	rjmp	.+148    	; 0x354 <param_get+0xd0>
            cli();
     2c0:	f8 94       	cli
            switch (param_table[i].size) {                      // cast pointer to the correct data type according to param table size info
     2c2:	f6 01       	movw	r30, r12
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	ec 0d       	add	r30, r12
     2ce:	fd 1d       	adc	r31, r13
     2d0:	e9 5e       	subi	r30, 0xE9	; 233
     2d2:	f7 4d       	sbci	r31, 0xD7	; 215
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
     2d6:	80 31       	cpi	r24, 0x10	; 16
     2d8:	89 f0       	breq	.+34     	; 0x2fc <param_get+0x78>
     2da:	80 32       	cpi	r24, 0x20	; 32
     2dc:	21 f1       	breq	.+72     	; 0x326 <param_get+0xa2>
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	b1 f5       	brne	.+108    	; 0x34e <param_get+0xca>
            case 8:
                *param_value = *(uint8_t *)param_table[i].value;
     2e2:	02 80       	ldd	r0, Z+2	; 0x02
     2e4:	f3 81       	ldd	r31, Z+3	; 0x03
     2e6:	e0 2d       	mov	r30, r0
     2e8:	80 81       	ld	r24, Z
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	f7 01       	movw	r30, r14
     2f2:	80 83       	st	Z, r24
     2f4:	91 83       	std	Z+1, r25	; 0x01
     2f6:	a2 83       	std	Z+2, r26	; 0x02
     2f8:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
            	break;
     2fa:	29 c0       	rjmp	.+82     	; 0x34e <param_get+0xca>
            case 16:
                *param_value = *(uint16_t *)param_table[i].value;
     2fc:	c6 01       	movw	r24, r12
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	c8 0f       	add	r28, r24
     308:	d9 1f       	adc	r29, r25
     30a:	c9 5e       	subi	r28, 0xE9	; 233
     30c:	d7 4d       	sbci	r29, 0xD7	; 215
     30e:	ea 81       	ldd	r30, Y+2	; 0x02
     310:	fb 81       	ldd	r31, Y+3	; 0x03
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	a0 e0       	ldi	r26, 0x00	; 0
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	f7 01       	movw	r30, r14
     31c:	80 83       	st	Z, r24
     31e:	91 83       	std	Z+1, r25	; 0x01
     320:	a2 83       	std	Z+2, r26	; 0x02
     322:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
                break;
     324:	14 c0       	rjmp	.+40     	; 0x34e <param_get+0xca>
            case 32:
                *param_value = *(uint32_t *)param_table[i].value;
     326:	c6 01       	movw	r24, r12
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	c8 0f       	add	r28, r24
     332:	d9 1f       	adc	r29, r25
     334:	c9 5e       	subi	r28, 0xE9	; 233
     336:	d7 4d       	sbci	r29, 0xD7	; 215
     338:	ea 81       	ldd	r30, Y+2	; 0x02
     33a:	fb 81       	ldd	r31, Y+3	; 0x03
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	a2 81       	ldd	r26, Z+2	; 0x02
     342:	b3 81       	ldd	r27, Z+3	; 0x03
     344:	f7 01       	movw	r30, r14
     346:	80 83       	st	Z, r24
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	a2 83       	std	Z+2, r26	; 0x02
     34c:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
                break;               
            }
            sei();
     34e:	78 94       	sei
            i = MAX_PARAM_NO;                                   // exit loop
            retval = 0;
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	09 c0       	rjmp	.+18     	; 0x366 <param_get+0xe2>
     354:	ff ef       	ldi	r31, 0xFF	; 255
     356:	cf 1a       	sub	r12, r31
     358:	df 0a       	sbc	r13, r31
    return retval;
}

static int8_t param_get(char *param_string, uint32_t *param_value) {
    int8_t retval = -2;                                         // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     35a:	84 e1       	ldi	r24, 0x14	; 20
     35c:	c8 16       	cp	r12, r24
     35e:	d1 04       	cpc	r13, r1
     360:	09 f0       	breq	.+2      	; 0x364 <param_get+0xe0>
     362:	9c cf       	rjmp	.-200    	; 0x29c <param_get+0x18>
     364:	8e ef       	ldi	r24, 0xFE	; 254
            i = MAX_PARAM_NO;                                   // exit loop
            retval = 0;
        }
    }
    return retval;
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	08 95       	ret

00000378 <sys_echo>:
    }
    return retval;
}

static int8_t sys_echo(char *string) {
    printf("%s", string);
     378:	9f 93       	push	r25
     37a:	8f 93       	push	r24
     37c:	80 ee       	ldi	r24, 0xE0	; 224
     37e:	92 e5       	ldi	r25, 0x52	; 82
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
    return 0;
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
}
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret

00000394 <sys_status>:

int8_t sys_status() {
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
    printf("Available commands:\r\n");                      // print all defined commands in cmd table
     3a0:	83 ee       	ldi	r24, 0xE3	; 227
     3a2:	92 e5       	ldi	r25, 0x52	; 82
     3a4:	0e 94 e5 05 	call	0xbca	; 0xbca <puts>
     3a8:	c0 e0       	ldi	r28, 0x00	; 0
     3aa:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("%s\r\n", cmd);
     3ac:	08 ef       	ldi	r16, 0xF8	; 248
     3ae:	12 e5       	ldi	r17, 0x52	; 82
}

int8_t sys_status() {
    printf("Available commands:\r\n");                      // print all defined commands in cmd table
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
     3b0:	fe 01       	movw	r30, r28
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	e5 58       	subi	r30, 0x85	; 133
     3bc:	f7 4d       	sbci	r31, 0xD7	; 215
     3be:	01 90       	ld	r0, Z+
     3c0:	f0 81       	ld	r31, Z
     3c2:	e0 2d       	mov	r30, r0
        if (strcmp(cmd, "\0") != 0) {
     3c4:	80 81       	ld	r24, Z
     3c6:	88 23       	and	r24, r24
     3c8:	51 f0       	breq	.+20     	; 0x3de <sys_status+0x4a>
            printf("%s\r\n", cmd);
     3ca:	ff 93       	push	r31
     3cc:	ef 93       	push	r30
     3ce:	1f 93       	push	r17
     3d0:	0f 93       	push	r16
     3d2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	21 96       	adiw	r28, 0x01	; 1
    return 0;
}

int8_t sys_status() {
    printf("Available commands:\r\n");                      // print all defined commands in cmd table
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
     3e0:	c4 31       	cpi	r28, 0x14	; 20
     3e2:	d1 05       	cpc	r29, r1
     3e4:	29 f7       	brne	.-54     	; 0x3b0 <sys_status+0x1c>
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("%s\r\n", cmd);
        }
    }
    printf("Defined parameters:\r\n");                      // print all defined parameters in param table
     3e6:	8d ef       	ldi	r24, 0xFD	; 253
     3e8:	92 e5       	ldi	r25, 0x52	; 82
     3ea:	0e 94 e5 05 	call	0xbca	; 0xbca <puts>
     3ee:	c0 e0       	ldi	r28, 0x00	; 0
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        static uint32_t param_val = 0;
        const char* param = (const char*)param_table[i].param;
        if (strcmp(param, "\0") != 0) {
            param_get((char *)param, &param_val);
            printf("%s = %+"PRIu32"\r\n", param, param_val);
     3f2:	02 e1       	ldi	r16, 0x12	; 18
     3f4:	13 e5       	ldi	r17, 0x53	; 83
        }
    }
    printf("Defined parameters:\r\n");                      // print all defined parameters in param table
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        static uint32_t param_val = 0;
        const char* param = (const char*)param_table[i].param;
     3f6:	fe 01       	movw	r30, r28
     3f8:	ee 0f       	add	r30, r30
     3fa:	ff 1f       	adc	r31, r31
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	ec 0f       	add	r30, r28
     402:	fd 1f       	adc	r31, r29
     404:	e9 5e       	subi	r30, 0xE9	; 233
     406:	f7 4d       	sbci	r31, 0xD7	; 215
     408:	e0 80       	ld	r14, Z
     40a:	f1 80       	ldd	r15, Z+1	; 0x01
        if (strcmp(param, "\0") != 0) {
     40c:	f7 01       	movw	r30, r14
     40e:	80 81       	ld	r24, Z
     410:	88 23       	and	r24, r24
     412:	e1 f0       	breq	.+56     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
            param_get((char *)param, &param_val);
     414:	62 e1       	ldi	r22, 0x12	; 18
     416:	78 e2       	ldi	r23, 0x28	; 40
     418:	c7 01       	movw	r24, r14
     41a:	0e 94 42 01 	call	0x284	; 0x284 <param_get>
            printf("%s = %+"PRIu32"\r\n", param, param_val);
     41e:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <param_val.3831+0x3>
     422:	8f 93       	push	r24
     424:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <param_val.3831+0x2>
     428:	8f 93       	push	r24
     42a:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <param_val.3831+0x1>
     42e:	8f 93       	push	r24
     430:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <param_val.3831>
     434:	8f 93       	push	r24
     436:	ff 92       	push	r15
     438:	ef 92       	push	r14
     43a:	1f 93       	push	r17
     43c:	0f 93       	push	r16
     43e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
     442:	8d b7       	in	r24, 0x3d	; 61
     444:	9e b7       	in	r25, 0x3e	; 62
     446:	08 96       	adiw	r24, 0x08	; 8
     448:	8d bf       	out	0x3d, r24	; 61
     44a:	9e bf       	out	0x3e, r25	; 62
     44c:	21 96       	adiw	r28, 0x01	; 1
        if (strcmp(cmd, "\0") != 0) {
            printf("%s\r\n", cmd);
        }
    }
    printf("Defined parameters:\r\n");                      // print all defined parameters in param table
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     44e:	c4 31       	cpi	r28, 0x14	; 20
     450:	d1 05       	cpc	r29, r1
     452:	89 f6       	brne	.-94     	; 0x3f6 <sys_status+0x62>
            param_get((char *)param, &param_val);
            printf("%s = %+"PRIu32"\r\n", param, param_val);
        }
    }
    return 0;
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	08 95       	ret

00000464 <cmd_init>:
/*
    Function definitions
    *************************************************/
void cmd_init() {                                       // Init command and parameter table
    /* initialize system commands */
    cmd_table[0].cmd = "echo";
     464:	eb e7       	ldi	r30, 0x7B	; 123
     466:	f8 e2       	ldi	r31, 0x28	; 40
     468:	8e e1       	ldi	r24, 0x1E	; 30
     46a:	93 e5       	ldi	r25, 0x53	; 83
     46c:	80 83       	st	Z, r24
     46e:	91 83       	std	Z+1, r25	; 0x01
    cmd_table[0].cmd_func_ptr = *sys_echo;
     470:	8c eb       	ldi	r24, 0xBC	; 188
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	82 83       	std	Z+2, r24	; 0x02
     476:	93 83       	std	Z+3, r25	; 0x03
    cmd_table[1].cmd = "status";
     478:	83 e2       	ldi	r24, 0x23	; 35
     47a:	93 e5       	ldi	r25, 0x53	; 83
     47c:	84 83       	std	Z+4, r24	; 0x04
     47e:	95 83       	std	Z+5, r25	; 0x05
    cmd_table[1].cmd_func_ptr = *sys_status;
     480:	8a ec       	ldi	r24, 0xCA	; 202
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	86 83       	std	Z+6, r24	; 0x06
     486:	97 83       	std	Z+7, r25	; 0x07
    cmd_table[2].cmd = "param_get";
     488:	8a e2       	ldi	r24, 0x2A	; 42
     48a:	93 e5       	ldi	r25, 0x53	; 83
     48c:	80 87       	std	Z+8, r24	; 0x08
     48e:	91 87       	std	Z+9, r25	; 0x09
    cmd_table[2].cmd_func_ptr = *param_get;
     490:	82 e4       	ldi	r24, 0x42	; 66
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	82 87       	std	Z+10, r24	; 0x0a
     496:	93 87       	std	Z+11, r25	; 0x0b
    cmd_table[3].cmd = "param_set";
     498:	84 e3       	ldi	r24, 0x34	; 52
     49a:	93 e5       	ldi	r25, 0x53	; 83
     49c:	84 87       	std	Z+12, r24	; 0x0c
     49e:	95 87       	std	Z+13, r25	; 0x0d
    cmd_table[3].cmd_func_ptr = *param_set;
     4a0:	8d ec       	ldi	r24, 0xCD	; 205
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	86 87       	std	Z+14, r24	; 0x0e
     4a6:	97 87       	std	Z+15, r25	; 0x0f
     4a8:	84 e0       	ldi	r24, 0x04	; 4
     4aa:	90 e0       	ldi	r25, 0x00	; 0
    
    for (uint8_t cnt = NO_SYS_CMD; cnt < MAX_CMD_NO; cnt++) {   // fill up cmd table with empty placeholders
        cmd_table[cnt].cmd = "\0";
     4ac:	20 eb       	ldi	r18, 0xB0	; 176
     4ae:	32 e5       	ldi	r19, 0x52	; 82
     4b0:	fc 01       	movw	r30, r24
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e5 58       	subi	r30, 0x85	; 133
     4bc:	f7 4d       	sbci	r31, 0xD7	; 215
     4be:	20 83       	st	Z, r18
     4c0:	31 83       	std	Z+1, r19	; 0x01
        cmd_table[cnt].cmd_func_ptr = NULL;
     4c2:	12 82       	std	Z+2, r1	; 0x02
     4c4:	13 82       	std	Z+3, r1	; 0x03
     4c6:	01 96       	adiw	r24, 0x01	; 1
    cmd_table[2].cmd = "param_get";
    cmd_table[2].cmd_func_ptr = *param_get;
    cmd_table[3].cmd = "param_set";
    cmd_table[3].cmd_func_ptr = *param_set;
    
    for (uint8_t cnt = NO_SYS_CMD; cnt < MAX_CMD_NO; cnt++) {   // fill up cmd table with empty placeholders
     4c8:	84 31       	cpi	r24, 0x14	; 20
     4ca:	91 05       	cpc	r25, r1
     4cc:	89 f7       	brne	.-30     	; 0x4b0 <cmd_init+0x4c>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
        cmd_table[cnt].cmd = "\0";
        cmd_table[cnt].cmd_func_ptr = NULL;
    }
    for (uint8_t cnt = 0; cnt < MAX_PARAM_NO; cnt++) {
        param_table[cnt].param = "\0";
     4d2:	20 eb       	ldi	r18, 0xB0	; 176
     4d4:	32 e5       	ldi	r19, 0x52	; 82
     4d6:	fc 01       	movw	r30, r24
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	e8 0f       	add	r30, r24
     4e2:	f9 1f       	adc	r31, r25
     4e4:	e9 5e       	subi	r30, 0xE9	; 233
     4e6:	f7 4d       	sbci	r31, 0xD7	; 215
     4e8:	20 83       	st	Z, r18
     4ea:	31 83       	std	Z+1, r19	; 0x01
        param_table[cnt].value = NULL;
     4ec:	12 82       	std	Z+2, r1	; 0x02
     4ee:	13 82       	std	Z+3, r1	; 0x03
        param_table[cnt].size = 0;
     4f0:	14 82       	std	Z+4, r1	; 0x04
     4f2:	01 96       	adiw	r24, 0x01	; 1
    
    for (uint8_t cnt = NO_SYS_CMD; cnt < MAX_CMD_NO; cnt++) {   // fill up cmd table with empty placeholders
        cmd_table[cnt].cmd = "\0";
        cmd_table[cnt].cmd_func_ptr = NULL;
    }
    for (uint8_t cnt = 0; cnt < MAX_PARAM_NO; cnt++) {
     4f4:	84 31       	cpi	r24, 0x14	; 20
     4f6:	91 05       	cpc	r25, r1
     4f8:	71 f7       	brne	.-36     	; 0x4d6 <cmd_init+0x72>
        param_table[cnt].param = "\0";
        param_table[cnt].value = NULL;
        param_table[cnt].size = 0;
    }
}
     4fa:	08 95       	ret

000004fc <cmd_add>:

int8_t cmd_add(char *cmd_string, int8_t (*cmd_func_ptr)()) {
     4fc:	9c 01       	movw	r18, r24
    static uint8_t cmd_cnt = NO_SYS_CMD;                // Keep track of registered commands
    int8_t retval = -1;                                 // ERROR: Return value == -1 -> cmd_table is full
    if (cmd_cnt < MAX_CMD_NO) {
     4fe:	90 91 00 28 	lds	r25, 0x2800	; 0x802800 <__data_start>
     502:	94 31       	cpi	r25, 0x14	; 20
     504:	88 f4       	brcc	.+34     	; 0x528 <cmd_add+0x2c>
        cmd_table[cmd_cnt].cmd = cmd_string;            // add command to table
     506:	e9 2f       	mov	r30, r25
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	ee 0f       	add	r30, r30
     50c:	ff 1f       	adc	r31, r31
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e5 58       	subi	r30, 0x85	; 133
     514:	f7 4d       	sbci	r31, 0xD7	; 215
     516:	20 83       	st	Z, r18
     518:	31 83       	std	Z+1, r19	; 0x01
        cmd_table[cmd_cnt].cmd_func_ptr = cmd_func_ptr;
     51a:	62 83       	std	Z+2, r22	; 0x02
     51c:	73 83       	std	Z+3, r23	; 0x03
        cmd_cnt++;                                      // increment command counter
     51e:	9f 5f       	subi	r25, 0xFF	; 255
     520:	90 93 00 28 	sts	0x2800, r25	; 0x802800 <__data_start>
        retval = 0;                                     // set retval to 0 -> success
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	08 95       	ret
    }
}

int8_t cmd_add(char *cmd_string, int8_t (*cmd_func_ptr)()) {
    static uint8_t cmd_cnt = NO_SYS_CMD;                // Keep track of registered commands
    int8_t retval = -1;                                 // ERROR: Return value == -1 -> cmd_table is full
     528:	8f ef       	ldi	r24, 0xFF	; 255
        cmd_cnt++;                                      // increment command counter
        retval = 0;                                     // set retval to 0 -> success
    }
    
    return retval;    
}
     52a:	08 95       	ret

0000052c <cmd_parse>:
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}

int8_t cmd_parse(char *string) {
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	00 d0       	rcall	.+0      	; 0x542 <cmd_parse+0x16>
     542:	00 d0       	rcall	.+0      	; 0x544 <cmd_parse+0x18>
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	6c 01       	movw	r12, r24
    int8_t retval = -1;                                 // set inital return value to -1 -> no valid command
    char *command = string;
    char *set_ptr = strchr(string, 0x3d);
     54a:	6d e3       	ldi	r22, 0x3D	; 61
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	0e 94 94 05 	call	0xb28	; 0xb28 <strchr>
     552:	8c 01       	movw	r16, r24
    char *get_ptr = strchr(string, 0x3f);
     554:	6f e3       	ldi	r22, 0x3F	; 63
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	c6 01       	movw	r24, r12
     55a:	0e 94 94 05 	call	0xb28	; 0xb28 <strchr>
    uint8_t is_param_op = 0;
    
    if (get_ptr != NULL) {
     55e:	89 2b       	or	r24, r25
     560:	09 f4       	brne	.+2      	; 0x564 <cmd_parse+0x38>
     562:	4e c0       	rjmp	.+156    	; 0x600 <cmd_parse+0xd4>
        if (strcmp(string, "??") == 0) {                // "??" is alias for "status"
     564:	6e e3       	ldi	r22, 0x3E	; 62
     566:	73 e5       	ldi	r23, 0x53	; 83
     568:	c6 01       	movw	r24, r12
     56a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strcmp>
     56e:	89 2b       	or	r24, r25
     570:	09 f4       	brne	.+2      	; 0x574 <cmd_parse+0x48>
     572:	2f c1       	rjmp	.+606    	; 0x7d2 <cmd_parse+0x2a6>
            command = "status";
        }
        else {                                          
            command = "param_get";                      
            char *param = strtok(string, "?");          // get param name
     574:	6f e3       	ldi	r22, 0x3F	; 63
     576:	73 e5       	ldi	r23, 0x53	; 83
     578:	c6 01       	movw	r24, r12
     57a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <strtok>
     57e:	f8 2e       	mov	r15, r24
     580:	e9 2e       	mov	r14, r25
            is_param_op = 1;                            // skip standard cmd parse
            uint32_t param_val = 0;
     582:	19 82       	std	Y+1, r1	; 0x01
     584:	1a 82       	std	Y+2, r1	; 0x02
     586:	1b 82       	std	Y+3, r1	; 0x03
     588:	1c 82       	std	Y+4, r1	; 0x04
     58a:	00 e0       	ldi	r16, 0x00	; 0
     58c:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
                if (strcmp(param, param_table[i].param) == 0) {
     58e:	f8 01       	movw	r30, r16
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	e0 0f       	add	r30, r16
     59a:	f1 1f       	adc	r31, r17
     59c:	e9 5e       	subi	r30, 0xE9	; 233
     59e:	f7 4d       	sbci	r31, 0xD7	; 215
     5a0:	60 81       	ld	r22, Z
     5a2:	71 81       	ldd	r23, Z+1	; 0x01
     5a4:	8f 2d       	mov	r24, r15
     5a6:	9e 2d       	mov	r25, r14
     5a8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strcmp>
     5ac:	89 2b       	or	r24, r25
     5ae:	d9 f4       	brne	.+54     	; 0x5e6 <cmd_parse+0xba>
                    param_get((char *)param, &param_val);               // get param value
     5b0:	be 01       	movw	r22, r28
     5b2:	6f 5f       	subi	r22, 0xFF	; 255
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	8f 2d       	mov	r24, r15
     5b8:	9e 2d       	mov	r25, r14
     5ba:	0e 94 42 01 	call	0x284	; 0x284 <param_get>
                    printf("%s = %+"PRIu32"\r\n", param, param_val);    // return value to serial
     5be:	8c 81       	ldd	r24, Y+4	; 0x04
     5c0:	8f 93       	push	r24
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	8f 93       	push	r24
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	8f 93       	push	r24
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	8f 93       	push	r24
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	82 e1       	ldi	r24, 0x12	; 18
     5d4:	93 e5       	ldi	r25, 0x53	; 83
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	de bf       	out	0x3e, r29	; 62
                    i = MAX_PARAM_NO;                                   // exit loop
                    retval = 0;
     5e2:	10 e0       	ldi	r17, 0x00	; 0
     5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <cmd_parse+0xc6>
     5e6:	0f 5f       	subi	r16, 0xFF	; 255
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
        else {                                          
            command = "param_get";                      
            char *param = strtok(string, "?");          // get param name
            is_param_op = 1;                            // skip standard cmd parse
            uint32_t param_val = 0;
            for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     5ea:	04 31       	cpi	r16, 0x14	; 20
     5ec:	11 05       	cpc	r17, r1
     5ee:	79 f6       	brne	.-98     	; 0x58e <cmd_parse+0x62>
     5f0:	1f ef       	ldi	r17, 0xFF	; 255
    if (get_ptr != NULL) {
        if (strcmp(string, "??") == 0) {                // "??" is alias for "status"
            command = "status";
        }
        else {                                          
            command = "param_get";                      
     5f2:	0f 2e       	mov	r0, r31
     5f4:	fa e2       	ldi	r31, 0x2A	; 42
     5f6:	cf 2e       	mov	r12, r31
     5f8:	f3 e5       	ldi	r31, 0x53	; 83
     5fa:	df 2e       	mov	r13, r31
     5fc:	f0 2d       	mov	r31, r0
     5fe:	a9 c0       	rjmp	.+338    	; 0x752 <cmd_parse+0x226>
                    retval = 0;
                }
	        }
        }        
    } 
    else if (set_ptr != NULL) {
     600:	01 2b       	or	r16, r17
     602:	09 f4       	brne	.+2      	; 0x606 <cmd_parse+0xda>
     604:	ec c0       	rjmp	.+472    	; 0x7de <cmd_parse+0x2b2>
        command = "param_set";
        is_param_op = 1;
        char *param = strtok(string, "=");
     606:	61 e4       	ldi	r22, 0x41	; 65
     608:	73 e5       	ldi	r23, 0x53	; 83
     60a:	c6 01       	movw	r24, r12
     60c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <strtok>
     610:	6c 01       	movw	r12, r24
        char *str_value = strtok(NULL, "=");
     612:	61 e4       	ldi	r22, 0x41	; 65
     614:	73 e5       	ldi	r23, 0x53	; 83
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <strtok>
     61e:	5c 01       	movw	r10, r24
     620:	00 e0       	ldi	r16, 0x00	; 0
     622:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
            if (strcmp(param, param_table[i].param) == 0) {
     624:	f8 01       	movw	r30, r16
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e0 0f       	add	r30, r16
     630:	f1 1f       	adc	r31, r17
     632:	e9 5e       	subi	r30, 0xE9	; 233
     634:	f7 4d       	sbci	r31, 0xD7	; 215
     636:	60 81       	ld	r22, Z
     638:	71 81       	ldd	r23, Z+1	; 0x01
     63a:	c6 01       	movw	r24, r12
     63c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strcmp>
     640:	89 2b       	or	r24, r25
     642:	09 f0       	breq	.+2      	; 0x646 <cmd_parse+0x11a>
     644:	4b c0       	rjmp	.+150    	; 0x6dc <cmd_parse+0x1b0>
                uint8_t size = param_table[i].size;                         // get param size
     646:	f8 01       	movw	r30, r16
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	e0 0f       	add	r30, r16
     652:	f1 1f       	adc	r31, r17
     654:	e9 5e       	subi	r30, 0xE9	; 233
     656:	f7 4d       	sbci	r31, 0xD7	; 215
     658:	84 81       	ldd	r24, Z+4	; 0x04
                uint8_t value8;
                uint16_t value16;
                uint32_t value32;
                switch (size) {                                             // cast value to the correct data type according to param table size info
     65a:	80 31       	cpi	r24, 0x10	; 16
     65c:	a1 f0       	breq	.+40     	; 0x686 <cmd_parse+0x15a>
     65e:	80 32       	cpi	r24, 0x20	; 32
     660:	19 f1       	breq	.+70     	; 0x6a8 <cmd_parse+0x17c>
     662:	88 30       	cpi	r24, 0x08	; 8
     664:	99 f5       	brne	.+102    	; 0x6cc <cmd_parse+0x1a0>
                case 8:
                    value8 = (uint8_t)strtoul(str_value, NULL, 0);
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	c5 01       	movw	r24, r10
     670:	0e 94 91 04 	call	0x922	; 0x922 <strtoul>
     674:	69 83       	std	Y+1, r22	; 0x01
                    param_set(param, &value8, 8);
     676:	48 e0       	ldi	r20, 0x08	; 8
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	c6 01       	movw	r24, r12
     680:	0e 94 cd 00 	call	0x19a	; 0x19a <param_set>
                    retval = 0;
            	    break;
     684:	23 c0       	rjmp	.+70     	; 0x6cc <cmd_parse+0x1a0>
                case 16:
                    value16 = (uint16_t)strtoul(str_value, NULL, 0);
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	c5 01       	movw	r24, r10
     690:	0e 94 91 04 	call	0x922	; 0x922 <strtoul>
     694:	69 83       	std	Y+1, r22	; 0x01
     696:	7a 83       	std	Y+2, r23	; 0x02
                    param_set(param, &value16, 16);
     698:	40 e1       	ldi	r20, 0x10	; 16
     69a:	be 01       	movw	r22, r28
     69c:	6f 5f       	subi	r22, 0xFF	; 255
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	c6 01       	movw	r24, r12
     6a2:	0e 94 cd 00 	call	0x19a	; 0x19a <param_set>
                    retval = 0;
                    break;
     6a6:	12 c0       	rjmp	.+36     	; 0x6cc <cmd_parse+0x1a0>
                case 32:
                    value32 = (uint32_t)strtoul(str_value, NULL, 0);
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	c5 01       	movw	r24, r10
     6b2:	0e 94 91 04 	call	0x922	; 0x922 <strtoul>
     6b6:	69 83       	std	Y+1, r22	; 0x01
     6b8:	7a 83       	std	Y+2, r23	; 0x02
     6ba:	8b 83       	std	Y+3, r24	; 0x03
     6bc:	9c 83       	std	Y+4, r25	; 0x04
                    param_set(param, &value32, 32);
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	c6 01       	movw	r24, r12
     6c8:	0e 94 cd 00 	call	0x19a	; 0x19a <param_set>
                }
	        }
        }        
    } 
    else if (set_ptr != NULL) {
        command = "param_set";
     6cc:	0f 2e       	mov	r0, r31
     6ce:	f4 e3       	ldi	r31, 0x34	; 52
     6d0:	cf 2e       	mov	r12, r31
     6d2:	f3 e5       	ldi	r31, 0x53	; 83
     6d4:	df 2e       	mov	r13, r31
     6d6:	f0 2d       	mov	r31, r0
                    param_set(param, &value32, 32);
                    retval = 0;
                    break;
                }                    
                i = MAX_PARAM_NO;                                   // exit loop
                retval = 0;
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	6e c0       	rjmp	.+220    	; 0x7b8 <cmd_parse+0x28c>
     6dc:	0f 5f       	subi	r16, 0xFF	; 255
     6de:	1f 4f       	sbci	r17, 0xFF	; 255
    else if (set_ptr != NULL) {
        command = "param_set";
        is_param_op = 1;
        char *param = strtok(string, "=");
        char *str_value = strtok(NULL, "=");
        for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     6e0:	04 31       	cpi	r16, 0x14	; 20
     6e2:	11 05       	cpc	r17, r1
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <cmd_parse+0x1bc>
     6e6:	9e cf       	rjmp	.-196    	; 0x624 <cmd_parse+0xf8>
                }
	        }
        }        
    } 
    else if (set_ptr != NULL) {
        command = "param_set";
     6e8:	0f 2e       	mov	r0, r31
     6ea:	f4 e3       	ldi	r31, 0x34	; 52
     6ec:	cf 2e       	mov	r12, r31
     6ee:	f3 e5       	ldi	r31, 0x53	; 83
     6f0:	df 2e       	mov	r13, r31
     6f2:	f0 2d       	mov	r31, r0
     6f4:	1f ef       	ldi	r17, 0xFF	; 255
     6f6:	38 c0       	rjmp	.+112    	; 0x768 <cmd_parse+0x23c>
            }
	    }
    }
    if (is_param_op == 0) {
	    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
            if (strcmp(command, cmd_table[i].cmd) == 0) {
     6f8:	f8 01       	movw	r30, r16
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	e5 58       	subi	r30, 0x85	; 133
     704:	f7 4d       	sbci	r31, 0xD7	; 215
     706:	60 81       	ld	r22, Z
     708:	71 81       	ldd	r23, Z+1	; 0x01
     70a:	c6 01       	movw	r24, r12
     70c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strcmp>
     710:	89 2b       	or	r24, r25
     712:	c1 f4       	brne	.+48     	; 0x744 <cmd_parse+0x218>
    return retval;    
}

static int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
    if (cmd_table[index].cmd_func_ptr != NULL) {
     714:	f8 01       	movw	r30, r16
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e5 58       	subi	r30, 0x85	; 133
     720:	f7 4d       	sbci	r31, 0xD7	; 215
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	89 2b       	or	r24, r25
     728:	61 f1       	breq	.+88     	; 0x782 <cmd_parse+0x256>
        retval = cmd_table[index].cmd_func_ptr();
     72a:	f8 01       	movw	r30, r16
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	e5 58       	subi	r30, 0x85	; 133
     736:	f7 4d       	sbci	r31, 0xD7	; 215
     738:	02 80       	ldd	r0, Z+2	; 0x02
     73a:	f3 81       	ldd	r31, Z+3	; 0x03
     73c:	e0 2d       	mov	r30, r0
     73e:	09 95       	icall
     740:	18 2f       	mov	r17, r24
     742:	07 c0       	rjmp	.+14     	; 0x752 <cmd_parse+0x226>
     744:	0f 5f       	subi	r16, 0xFF	; 255
     746:	1f 4f       	sbci	r17, 0xFF	; 255
                retval = 0;
            }
	    }
    }
    if (is_param_op == 0) {
	    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
     748:	04 31       	cpi	r16, 0x14	; 20
     74a:	11 05       	cpc	r17, r1
     74c:	a9 f6       	brne	.-86     	; 0x6f8 <cmd_parse+0x1cc>
     74e:	1f ef       	ldi	r17, 0xFF	; 255
     750:	0b c0       	rjmp	.+22     	; 0x768 <cmd_parse+0x23c>
                i = MAX_CMD_NO;                             // exit loop
            }
	    } 
    }
    
    switch (retval) {                                   // select appropriate feedback to return
     752:	1e 3f       	cpi	r17, 0xFE	; 254
     754:	b9 f0       	breq	.+46     	; 0x784 <cmd_parse+0x258>
     756:	1c f4       	brge	.+6      	; 0x75e <cmd_parse+0x232>
     758:	1d 3f       	cpi	r17, 0xFD	; 253
     75a:	09 f1       	breq	.+66     	; 0x79e <cmd_parse+0x272>
     75c:	43 c0       	rjmp	.+134    	; 0x7e4 <cmd_parse+0x2b8>
     75e:	1f 3f       	cpi	r17, 0xFF	; 255
     760:	19 f0       	breq	.+6      	; 0x768 <cmd_parse+0x23c>
     762:	11 11       	cpse	r17, r1
     764:	3f c0       	rjmp	.+126    	; 0x7e4 <cmd_parse+0x2b8>
     766:	28 c0       	rjmp	.+80     	; 0x7b8 <cmd_parse+0x28c>
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", command);
     768:	df 92       	push	r13
     76a:	cf 92       	push	r12
     76c:	83 e4       	ldi	r24, 0x43	; 67
     76e:	93 e5       	ldi	r25, 0x53	; 83
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
    	return retval;
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	31 c0       	rjmp	.+98     	; 0x7e4 <cmd_parse+0x2b8>
    
    return retval;    
}

static int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
     782:	1e ef       	ldi	r17, 0xFE	; 254
    switch (retval) {                                   // select appropriate feedback to return
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", command);
    	return retval;
    case -2:
        printf("FAIL. Failed to execute command %s!\r\n", command);
     784:	df 92       	push	r13
     786:	cf 92       	push	r12
     788:	82 e7       	ldi	r24, 0x72	; 114
     78a:	93 e5       	ldi	r25, 0x53	; 83
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
        return retval;
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	23 c0       	rjmp	.+70     	; 0x7e4 <cmd_parse+0x2b8>
    case -3:
        printf("FAIL. Invalid options/parameters for command %s!\r\n", command);
     79e:	df 92       	push	r13
     7a0:	cf 92       	push	r12
     7a2:	88 e9       	ldi	r24, 0x98	; 152
     7a4:	93 e5       	ldi	r25, 0x53	; 83
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
        return retval;
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <cmd_parse+0x2b8>
    case 0:
        printf("OK. Command %s executed successfully!\r\n", command);
     7b8:	df 92       	push	r13
     7ba:	cf 92       	push	r12
     7bc:	8b ec       	ldi	r24, 0xCB	; 203
     7be:	93 e5       	ldi	r25, 0x53	; 83
     7c0:	9f 93       	push	r25
     7c2:	8f 93       	push	r24
     7c4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <printf>
        return retval;
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <cmd_parse+0x2b8>
    char *get_ptr = strchr(string, 0x3f);
    uint8_t is_param_op = 0;
    
    if (get_ptr != NULL) {
        if (strcmp(string, "??") == 0) {                // "??" is alias for "status"
            command = "status";
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f3 e2       	ldi	r31, 0x23	; 35
     7d6:	cf 2e       	mov	r12, r31
     7d8:	f3 e5       	ldi	r31, 0x53	; 83
     7da:	df 2e       	mov	r13, r31
     7dc:	f0 2d       	mov	r31, r0
    } 
    else if (set_ptr != NULL) {
        command = "param_set";
        is_param_op = 1;
        char *param = strtok(string, "=");
        char *str_value = strtok(NULL, "=");
     7de:	00 e0       	ldi	r16, 0x00	; 0
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	8a cf       	rjmp	.-236    	; 0x6f8 <cmd_parse+0x1cc>
    case 0:
        printf("OK. Command %s executed successfully!\r\n", command);
        return retval;
    }
    return retval;
}
     7e4:	81 2f       	mov	r24, r17
     7e6:	24 96       	adiw	r28, 0x04	; 4
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	08 95       	ret

00000802 <param_add>:

int8_t param_add(char *param_string, void *param_value_ptr, uint8_t size) {
     802:	9c 01       	movw	r18, r24
    static uint8_t param_cnt = 0;
    int8_t retval = -1;                                     // ERROR: Return value == -1 -> cmd_table is full
    if (param_cnt < MAX_CMD_NO) {
     804:	90 91 16 28 	lds	r25, 0x2816	; 0x802816 <param_cnt.3790>
     808:	94 31       	cpi	r25, 0x14	; 20
     80a:	a8 f4       	brcc	.+42     	; 0x836 <param_add+0x34>
        param_table[param_cnt].param = param_string;        // add parameter to table
     80c:	e9 2f       	mov	r30, r25
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	df 01       	movw	r26, r30
     812:	aa 0f       	add	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	aa 0f       	add	r26, r26
     818:	bb 1f       	adc	r27, r27
     81a:	ea 0f       	add	r30, r26
     81c:	fb 1f       	adc	r31, r27
     81e:	e9 5e       	subi	r30, 0xE9	; 233
     820:	f7 4d       	sbci	r31, 0xD7	; 215
     822:	20 83       	st	Z, r18
     824:	31 83       	std	Z+1, r19	; 0x01
        param_table[param_cnt].value = param_value_ptr;
     826:	62 83       	std	Z+2, r22	; 0x02
     828:	73 83       	std	Z+3, r23	; 0x03
        param_table[param_cnt].size = size;
     82a:	44 83       	std	Z+4, r20	; 0x04
        param_cnt++;                                        // increment parameter counter
     82c:	9f 5f       	subi	r25, 0xFF	; 255
     82e:	90 93 16 28 	sts	0x2816, r25	; 0x802816 <param_cnt.3790>
        retval = 0;                                         // set retval to 0 -> success
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret
    return retval;
}

int8_t param_add(char *param_string, void *param_value_ptr, uint8_t size) {
    static uint8_t param_cnt = 0;
    int8_t retval = -1;                                     // ERROR: Return value == -1 -> cmd_table is full
     836:	8f ef       	ldi	r24, 0xFF	; 255
        param_cnt++;                                        // increment parameter counter
        retval = 0;                                         // set retval to 0 -> success
    }
    
    return retval;
}
     838:	08 95       	ret

0000083a <uart0_printChar>:
    stdout = &uart0_stream;
}

static void uart0_sendChar(char c) {
    /* Send char c to TX0 pin */
    while (!(USART0.STATUS & USART_DREIF_bm)) {     // Check for completed transmission
     83a:	e0 e0       	ldi	r30, 0x00	; 0
     83c:	f8 e0       	ldi	r31, 0x08	; 8
     83e:	94 81       	ldd	r25, Z+4	; 0x04
     840:	95 ff       	sbrs	r25, 5
     842:	fd cf       	rjmp	.-6      	; 0x83e <uart0_printChar+0x4>
        ;
    }
    USART0.TXDATAL = c;
     844:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
}

int uart0_printChar(char c, FILE *stream) {         // Wrapper for uart0_sendChar() using printf()
    uart0_sendChar(c);
    return 0;
}
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	08 95       	ret

0000084e <__vector_17>:
static ringbuffer_t rxbuffer;

/*
    ISR definitions
    *************************************************/
ISR(USART0_RXC_vect) {
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
    return;
}
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <__vector_19>:

ISR(USART0_TXC_vect) {
     862:	1f 92       	push	r1
     864:	0f 92       	push	r0
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
    return;
}
     86c:	0f 90       	pop	r0
     86e:	0f be       	out	0x3f, r0	; 63
     870:	0f 90       	pop	r0
     872:	1f 90       	pop	r1
     874:	18 95       	reti

00000876 <__vector_18>:

ISR(USART0_DRE_vect) {
     876:	1f 92       	push	r1
     878:	0f 92       	push	r0
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	0f 92       	push	r0
     87e:	11 24       	eor	r1, r1
    return;
}
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <uart_init>:
/*
    Function definitions
    *************************************************/
void uart_init() {
    /* USART0 Config */
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200);                       // set uart0 baud rate
     88a:	e0 e0       	ldi	r30, 0x00	; 0
     88c:	f8 e0       	ldi	r31, 0x08	; 8
     88e:	84 e7       	ldi	r24, 0x74	; 116
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	80 87       	std	Z+8, r24	; 0x08
     894:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm);     // enable RXC, TXC, DRE interrupts
     896:	85 81       	ldd	r24, Z+5	; 0x05
     898:	80 6e       	ori	r24, 0xE0	; 224
     89a:	85 83       	std	Z+5, r24	; 0x05
    USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);                        // enable uart0 TX & RX
     89c:	86 81       	ldd	r24, Z+6	; 0x06
     89e:	80 6c       	ori	r24, 0xC0	; 192
     8a0:	86 83       	std	Z+6, r24	; 0x06
    PORTA.DIRSET |= PIN0_bm;                                                // set uart0 TX (PA0) to output
     8a2:	e0 e0       	ldi	r30, 0x00	; 0
     8a4:	f4 e0       	ldi	r31, 0x04	; 4
     8a6:	81 81       	ldd	r24, Z+1	; 0x01
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRSET &= ~PIN1_bm;                                               // set uart0 RX (PA1) to input
     8ac:	81 81       	ldd	r24, Z+1	; 0x01
     8ae:	8d 7f       	andi	r24, 0xFD	; 253
     8b0:	81 83       	std	Z+1, r24	; 0x01
    stdout = &uart0_stream;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	98 e2       	ldi	r25, 0x28	; 40
     8b6:	80 93 09 29 	sts	0x2909, r24	; 0x802909 <__iob+0x2>
     8ba:	90 93 0a 29 	sts	0x290A, r25	; 0x80290a <__iob+0x3>
     8be:	08 95       	ret

000008c0 <uart0_readLine>:
    }
    return USART0.RXDATAL;
}

char * uart0_readLine() {                             // Read a single line from uart0 rx
    uint8_t index = 0;
     8c0:	a0 e0       	ldi	r26, 0x00	; 0
    uart0_sendChar(c);
    return 0;
}

static uint8_t uart0_readChar() {
    while (!(USART0.STATUS & USART_RXCIF_bm)) {
     8c2:	e0 e0       	ldi	r30, 0x00	; 0
     8c4:	f8 e0       	ldi	r31, 0x08	; 8
     8c6:	84 81       	ldd	r24, Z+4	; 0x04
     8c8:	88 23       	and	r24, r24
     8ca:	ec f7       	brge	.-6      	; 0x8c6 <uart0_readLine+0x6>
        ;
    }
    return USART0.RXDATAL;
     8cc:	80 81       	ld	r24, Z
    uint8_t index = 0;
    char c;
      
    while (1) {
        c = uart0_readChar();
        if ((c != '\n') && (c != '\r')) {
     8ce:	8a 30       	cpi	r24, 0x0A	; 10
     8d0:	09 f1       	breq	.+66     	; 0x914 <uart0_readLine+0x54>
     8d2:	8d 30       	cpi	r24, 0x0D	; 13
     8d4:	c1 f3       	breq	.-16     	; 0x8c6 <uart0_readLine+0x6>
            buffer[index++] = c;
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	9a 0f       	add	r25, r26
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	a5 53       	subi	r26, 0x35	; 53
     8de:	b7 4d       	sbci	r27, 0xD7	; 215
     8e0:	8c 93       	st	X, r24
            if (index > MAX_LINE_LEN) {
     8e2:	9d 33       	cpi	r25, 0x3D	; 61
     8e4:	a8 f0       	brcs	.+42     	; 0x910 <uart0_readLine+0x50>
                snprintf(buffer, sizeof(buffer), "Input too long, maximum no. of chars allowed: %d", MAX_LINE_LEN);
     8e6:	1f 92       	push	r1
     8e8:	8c e3       	ldi	r24, 0x3C	; 60
     8ea:	8f 93       	push	r24
     8ec:	23 ef       	ldi	r18, 0xF3	; 243
     8ee:	33 e5       	ldi	r19, 0x53	; 83
     8f0:	3f 93       	push	r19
     8f2:	2f 93       	push	r18
     8f4:	1f 92       	push	r1
     8f6:	8f 93       	push	r24
     8f8:	8b ec       	ldi	r24, 0xCB	; 203
     8fa:	98 e2       	ldi	r25, 0x28	; 40
     8fc:	9f 93       	push	r25
     8fe:	8f 93       	push	r24
     900:	0e 94 15 06 	call	0xc2a	; 0xc2a <snprintf>
                return buffer;
     904:	8d b7       	in	r24, 0x3d	; 61
     906:	9e b7       	in	r25, 0x3e	; 62
     908:	08 96       	adiw	r24, 0x08	; 8
     90a:	8d bf       	out	0x3d, r24	; 61
     90c:	9e bf       	out	0x3e, r25	; 62
     90e:	06 c0       	rjmp	.+12     	; 0x91c <uart0_readLine+0x5c>
    char c;
      
    while (1) {
        c = uart0_readChar();
        if ((c != '\n') && (c != '\r')) {
            buffer[index++] = c;
     910:	a9 2f       	mov	r26, r25
     912:	d9 cf       	rjmp	.-78     	; 0x8c6 <uart0_readLine+0x6>
                snprintf(buffer, sizeof(buffer), "Input too long, maximum no. of chars allowed: %d", MAX_LINE_LEN);
                return buffer;
            }
        }        
        if (c == '\n') {
            buffer[index] = '\0';
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	a5 53       	subi	r26, 0x35	; 53
     918:	b7 4d       	sbci	r27, 0xD7	; 215
     91a:	1c 92       	st	X, r1
            index = 0;
            return buffer;
        }
    }
}     
     91c:	8b ec       	ldi	r24, 0xCB	; 203
     91e:	98 e2       	ldi	r25, 0x28	; 40
     920:	08 95       	ret

00000922 <strtoul>:
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e7 e9       	ldi	r30, 0x97	; 151
     928:	f4 e0       	ldi	r31, 0x04	; 4
     92a:	0c 94 17 09 	jmp	0x122e	; 0x122e <__prologue_saves__+0x2>
     92e:	5c 01       	movw	r10, r24
     930:	6b 01       	movw	r12, r22
     932:	7a 01       	movw	r14, r20
     934:	61 15       	cp	r22, r1
     936:	71 05       	cpc	r23, r1
     938:	19 f0       	breq	.+6      	; 0x940 <strtoul+0x1e>
     93a:	fb 01       	movw	r30, r22
     93c:	80 83       	st	Z, r24
     93e:	91 83       	std	Z+1, r25	; 0x01
     940:	e1 14       	cp	r14, r1
     942:	f1 04       	cpc	r15, r1
     944:	29 f0       	breq	.+10     	; 0x950 <strtoul+0x2e>
     946:	c7 01       	movw	r24, r14
     948:	02 97       	sbiw	r24, 0x02	; 2
     94a:	83 97       	sbiw	r24, 0x23	; 35
     94c:	08 f0       	brcs	.+2      	; 0x950 <strtoul+0x2e>
     94e:	c9 c0       	rjmp	.+402    	; 0xae2 <strtoul+0x1c0>
     950:	e5 01       	movw	r28, r10
     952:	21 96       	adiw	r28, 0x01	; 1
     954:	f5 01       	movw	r30, r10
     956:	10 81       	ld	r17, Z
     958:	81 2f       	mov	r24, r17
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 86 05 	call	0xb0c	; 0xb0c <isspace>
     960:	89 2b       	or	r24, r25
     962:	11 f0       	breq	.+4      	; 0x968 <strtoul+0x46>
     964:	5e 01       	movw	r10, r28
     966:	f4 cf       	rjmp	.-24     	; 0x950 <strtoul+0x2e>
     968:	1d 32       	cpi	r17, 0x2D	; 45
     96a:	29 f4       	brne	.+10     	; 0x976 <strtoul+0x54>
     96c:	21 96       	adiw	r28, 0x01	; 1
     96e:	f5 01       	movw	r30, r10
     970:	11 81       	ldd	r17, Z+1	; 0x01
     972:	01 e0       	ldi	r16, 0x01	; 1
     974:	07 c0       	rjmp	.+14     	; 0x984 <strtoul+0x62>
     976:	1b 32       	cpi	r17, 0x2B	; 43
     978:	21 f4       	brne	.+8      	; 0x982 <strtoul+0x60>
     97a:	e5 01       	movw	r28, r10
     97c:	22 96       	adiw	r28, 0x02	; 2
     97e:	f5 01       	movw	r30, r10
     980:	11 81       	ldd	r17, Z+1	; 0x01
     982:	00 e0       	ldi	r16, 0x00	; 0
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	b1 f0       	breq	.+44     	; 0x9b6 <strtoul+0x94>
     98a:	f0 e1       	ldi	r31, 0x10	; 16
     98c:	ef 16       	cp	r14, r31
     98e:	f1 04       	cpc	r15, r1
     990:	29 f4       	brne	.+10     	; 0x99c <strtoul+0x7a>
     992:	b0 c0       	rjmp	.+352    	; 0xaf4 <strtoul+0x1d2>
     994:	10 e3       	ldi	r17, 0x30	; 48
     996:	e1 14       	cp	r14, r1
     998:	f1 04       	cpc	r15, r1
     99a:	01 f1       	breq	.+64     	; 0x9dc <strtoul+0xba>
     99c:	2a e0       	ldi	r18, 0x0A	; 10
     99e:	e2 16       	cp	r14, r18
     9a0:	f1 04       	cpc	r15, r1
     9a2:	b1 f1       	breq	.+108    	; 0xa10 <strtoul+0xee>
     9a4:	80 e1       	ldi	r24, 0x10	; 16
     9a6:	e8 16       	cp	r14, r24
     9a8:	f1 04       	cpc	r15, r1
     9aa:	71 f0       	breq	.+28     	; 0x9c8 <strtoul+0xa6>
     9ac:	e8 e0       	ldi	r30, 0x08	; 8
     9ae:	ee 16       	cp	r14, r30
     9b0:	f1 04       	cpc	r15, r1
     9b2:	f1 f4       	brne	.+60     	; 0x9f0 <strtoul+0xce>
     9b4:	13 c0       	rjmp	.+38     	; 0x9dc <strtoul+0xba>
     9b6:	10 33       	cpi	r17, 0x30	; 48
     9b8:	41 f5       	brne	.+80     	; 0xa0a <strtoul+0xe8>
     9ba:	88 81       	ld	r24, Y
     9bc:	8f 7d       	andi	r24, 0xDF	; 223
     9be:	88 35       	cpi	r24, 0x58	; 88
     9c0:	49 f7       	brne	.-46     	; 0x994 <strtoul+0x72>
     9c2:	19 81       	ldd	r17, Y+1	; 0x01
     9c4:	22 96       	adiw	r28, 0x02	; 2
     9c6:	02 60       	ori	r16, 0x02	; 2
     9c8:	f0 e1       	ldi	r31, 0x10	; 16
     9ca:	ef 2e       	mov	r14, r31
     9cc:	f1 2c       	mov	r15, r1
     9ce:	88 24       	eor	r8, r8
     9d0:	8a 94       	dec	r8
     9d2:	98 2c       	mov	r9, r8
     9d4:	a8 2c       	mov	r10, r8
     9d6:	af e0       	ldi	r26, 0x0F	; 15
     9d8:	ba 2e       	mov	r11, r26
     9da:	20 c0       	rjmp	.+64     	; 0xa1c <strtoul+0xfa>
     9dc:	78 e0       	ldi	r23, 0x08	; 8
     9de:	e7 2e       	mov	r14, r23
     9e0:	f1 2c       	mov	r15, r1
     9e2:	88 24       	eor	r8, r8
     9e4:	8a 94       	dec	r8
     9e6:	98 2c       	mov	r9, r8
     9e8:	a8 2c       	mov	r10, r8
     9ea:	ef e1       	ldi	r30, 0x1F	; 31
     9ec:	be 2e       	mov	r11, r30
     9ee:	16 c0       	rjmp	.+44     	; 0xa1c <strtoul+0xfa>
     9f0:	6f ef       	ldi	r22, 0xFF	; 255
     9f2:	7f ef       	ldi	r23, 0xFF	; 255
     9f4:	cb 01       	movw	r24, r22
     9f6:	97 01       	movw	r18, r14
     9f8:	0f 2c       	mov	r0, r15
     9fa:	00 0c       	add	r0, r0
     9fc:	44 0b       	sbc	r20, r20
     9fe:	55 0b       	sbc	r21, r21
     a00:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodsi4>
     a04:	49 01       	movw	r8, r18
     a06:	5a 01       	movw	r10, r20
     a08:	09 c0       	rjmp	.+18     	; 0xa1c <strtoul+0xfa>
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	e8 2e       	mov	r14, r24
     a0e:	f1 2c       	mov	r15, r1
     a10:	69 e9       	ldi	r22, 0x99	; 153
     a12:	86 2e       	mov	r8, r22
     a14:	98 2c       	mov	r9, r8
     a16:	a8 2c       	mov	r10, r8
     a18:	69 e1       	ldi	r22, 0x19	; 25
     a1a:	b6 2e       	mov	r11, r22
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	cb 01       	movw	r24, r22
     a24:	27 01       	movw	r4, r14
     a26:	0f 2c       	mov	r0, r15
     a28:	00 0c       	add	r0, r0
     a2a:	66 08       	sbc	r6, r6
     a2c:	77 08       	sbc	r7, r7
     a2e:	fe 01       	movw	r30, r28
     a30:	50 ed       	ldi	r21, 0xD0	; 208
     a32:	35 2e       	mov	r3, r21
     a34:	31 0e       	add	r3, r17
     a36:	29 e0       	ldi	r18, 0x09	; 9
     a38:	23 15       	cp	r18, r3
     a3a:	70 f4       	brcc	.+28     	; 0xa58 <strtoul+0x136>
     a3c:	2f eb       	ldi	r18, 0xBF	; 191
     a3e:	21 0f       	add	r18, r17
     a40:	2a 31       	cpi	r18, 0x1A	; 26
     a42:	18 f4       	brcc	.+6      	; 0xa4a <strtoul+0x128>
     a44:	39 ec       	ldi	r19, 0xC9	; 201
     a46:	33 2e       	mov	r3, r19
     a48:	06 c0       	rjmp	.+12     	; 0xa56 <strtoul+0x134>
     a4a:	2f e9       	ldi	r18, 0x9F	; 159
     a4c:	21 0f       	add	r18, r17
     a4e:	2a 31       	cpi	r18, 0x1A	; 26
     a50:	30 f5       	brcc	.+76     	; 0xa9e <strtoul+0x17c>
     a52:	29 ea       	ldi	r18, 0xA9	; 169
     a54:	32 2e       	mov	r3, r18
     a56:	31 0e       	add	r3, r17
     a58:	23 2d       	mov	r18, r3
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	2e 15       	cp	r18, r14
     a5e:	3f 05       	cpc	r19, r15
     a60:	f4 f4       	brge	.+60     	; 0xa9e <strtoul+0x17c>
     a62:	4f 3f       	cpi	r20, 0xFF	; 255
     a64:	c9 f0       	breq	.+50     	; 0xa98 <strtoul+0x176>
     a66:	86 16       	cp	r8, r22
     a68:	97 06       	cpc	r9, r23
     a6a:	a8 06       	cpc	r10, r24
     a6c:	b9 06       	cpc	r11, r25
     a6e:	88 f0       	brcs	.+34     	; 0xa92 <strtoul+0x170>
     a70:	a3 01       	movw	r20, r6
     a72:	92 01       	movw	r18, r4
     a74:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__mulsi3>
     a78:	23 2d       	mov	r18, r3
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	62 0f       	add	r22, r18
     a82:	73 1f       	adc	r23, r19
     a84:	84 1f       	adc	r24, r20
     a86:	95 1f       	adc	r25, r21
     a88:	62 17       	cp	r22, r18
     a8a:	73 07       	cpc	r23, r19
     a8c:	84 07       	cpc	r24, r20
     a8e:	95 07       	cpc	r25, r21
     a90:	10 f4       	brcc	.+4      	; 0xa96 <strtoul+0x174>
     a92:	4f ef       	ldi	r20, 0xFF	; 255
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <strtoul+0x176>
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	21 96       	adiw	r28, 0x01	; 1
     a9a:	10 81       	ld	r17, Z
     a9c:	c8 cf       	rjmp	.-112    	; 0xa2e <strtoul+0x10c>
     a9e:	c1 14       	cp	r12, r1
     aa0:	d1 04       	cpc	r13, r1
     aa2:	51 f0       	breq	.+20     	; 0xab8 <strtoul+0x196>
     aa4:	44 23       	and	r20, r20
     aa6:	11 f0       	breq	.+4      	; 0xaac <strtoul+0x18a>
     aa8:	21 97       	sbiw	r28, 0x01	; 1
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <strtoul+0x190>
     aac:	01 ff       	sbrs	r16, 1
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <strtoul+0x196>
     ab0:	22 97       	sbiw	r28, 0x02	; 2
     ab2:	f6 01       	movw	r30, r12
     ab4:	c0 83       	st	Z, r28
     ab6:	d1 83       	std	Z+1, r29	; 0x01
     ab8:	00 ff       	sbrs	r16, 0
     aba:	07 c0       	rjmp	.+14     	; 0xaca <strtoul+0x1a8>
     abc:	90 95       	com	r25
     abe:	80 95       	com	r24
     ac0:	70 95       	com	r23
     ac2:	61 95       	neg	r22
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	8f 4f       	sbci	r24, 0xFF	; 255
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	4f 3f       	cpi	r20, 0xFF	; 255
     acc:	79 f4       	brne	.+30     	; 0xaec <strtoul+0x1ca>
     ace:	82 e2       	ldi	r24, 0x22	; 34
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	80 93 0d 29 	sts	0x290D, r24	; 0x80290d <errno>
     ad6:	90 93 0e 29 	sts	0x290E, r25	; 0x80290e <errno+0x1>
     ada:	3f ef       	ldi	r19, 0xFF	; 255
     adc:	2f ef       	ldi	r18, 0xFF	; 255
     ade:	9f ef       	ldi	r25, 0xFF	; 255
     ae0:	0d c0       	rjmp	.+26     	; 0xafc <strtoul+0x1da>
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	08 c0       	rjmp	.+16     	; 0xafc <strtoul+0x1da>
     aec:	46 2f       	mov	r20, r22
     aee:	37 2f       	mov	r19, r23
     af0:	28 2f       	mov	r18, r24
     af2:	04 c0       	rjmp	.+8      	; 0xafc <strtoul+0x1da>
     af4:	10 33       	cpi	r17, 0x30	; 48
     af6:	09 f0       	breq	.+2      	; 0xafa <strtoul+0x1d8>
     af8:	67 cf       	rjmp	.-306    	; 0x9c8 <strtoul+0xa6>
     afa:	5f cf       	rjmp	.-322    	; 0x9ba <strtoul+0x98>
     afc:	64 2f       	mov	r22, r20
     afe:	73 2f       	mov	r23, r19
     b00:	82 2f       	mov	r24, r18
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	e1 e1       	ldi	r30, 0x11	; 17
     b08:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__epilogue_restores__+0x2>

00000b0c <isspace>:
     b0c:	91 11       	cpse	r25, r1
     b0e:	0c 94 26 08 	jmp	0x104c	; 0x104c <__ctype_isfalse>
     b12:	80 32       	cpi	r24, 0x20	; 32
     b14:	19 f0       	breq	.+6      	; 0xb1c <isspace+0x10>
     b16:	89 50       	subi	r24, 0x09	; 9
     b18:	85 50       	subi	r24, 0x05	; 5
     b1a:	c8 f7       	brcc	.-14     	; 0xb0e <isspace+0x2>
     b1c:	08 95       	ret

00000b1e <strtok>:
     b1e:	40 e1       	ldi	r20, 0x10	; 16
     b20:	58 e2       	ldi	r21, 0x28	; 40
     b22:	0e 94 a8 05 	call	0xb50	; 0xb50 <strtok_r>
     b26:	08 95       	ret

00000b28 <strchr>:
     b28:	fc 01       	movw	r30, r24
     b2a:	81 91       	ld	r24, Z+
     b2c:	86 17       	cp	r24, r22
     b2e:	21 f0       	breq	.+8      	; 0xb38 <strchr+0x10>
     b30:	88 23       	and	r24, r24
     b32:	d9 f7       	brne	.-10     	; 0xb2a <strchr+0x2>
     b34:	99 27       	eor	r25, r25
     b36:	08 95       	ret
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	cf 01       	movw	r24, r30
     b3c:	08 95       	ret

00000b3e <strcmp>:
     b3e:	fb 01       	movw	r30, r22
     b40:	dc 01       	movw	r26, r24
     b42:	8d 91       	ld	r24, X+
     b44:	01 90       	ld	r0, Z+
     b46:	80 19       	sub	r24, r0
     b48:	01 10       	cpse	r0, r1
     b4a:	d9 f3       	breq	.-10     	; 0xb42 <strcmp+0x4>
     b4c:	99 0b       	sbc	r25, r25
     b4e:	08 95       	ret

00000b50 <strtok_r>:
     b50:	fa 01       	movw	r30, r20
     b52:	a1 91       	ld	r26, Z+
     b54:	b0 81       	ld	r27, Z
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	19 f4       	brne	.+6      	; 0xb60 <strtok_r+0x10>
     b5a:	10 97       	sbiw	r26, 0x00	; 0
     b5c:	e1 f0       	breq	.+56     	; 0xb96 <strtok_r+0x46>
     b5e:	cd 01       	movw	r24, r26
     b60:	dc 01       	movw	r26, r24
     b62:	cd 01       	movw	r24, r26
     b64:	0d 90       	ld	r0, X+
     b66:	00 20       	and	r0, r0
     b68:	11 f4       	brne	.+4      	; 0xb6e <strtok_r+0x1e>
     b6a:	c0 01       	movw	r24, r0
     b6c:	13 c0       	rjmp	.+38     	; 0xb94 <strtok_r+0x44>
     b6e:	fb 01       	movw	r30, r22
     b70:	21 91       	ld	r18, Z+
     b72:	22 23       	and	r18, r18
     b74:	19 f0       	breq	.+6      	; 0xb7c <strtok_r+0x2c>
     b76:	20 15       	cp	r18, r0
     b78:	d9 f7       	brne	.-10     	; 0xb70 <strtok_r+0x20>
     b7a:	f3 cf       	rjmp	.-26     	; 0xb62 <strtok_r+0x12>
     b7c:	fb 01       	movw	r30, r22
     b7e:	21 91       	ld	r18, Z+
     b80:	20 15       	cp	r18, r0
     b82:	19 f4       	brne	.+6      	; 0xb8a <strtok_r+0x3a>
     b84:	1e 92       	st	-X, r1
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <strtok_r+0x46>
     b8a:	22 23       	and	r18, r18
     b8c:	c1 f7       	brne	.-16     	; 0xb7e <strtok_r+0x2e>
     b8e:	0d 90       	ld	r0, X+
     b90:	00 20       	and	r0, r0
     b92:	a1 f7       	brne	.-24     	; 0xb7c <strtok_r+0x2c>
     b94:	d0 01       	movw	r26, r0
     b96:	fa 01       	movw	r30, r20
     b98:	a1 93       	st	Z+, r26
     b9a:	b0 83       	st	Z, r27
     b9c:	08 95       	ret

00000b9e <printf>:
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 26 09 	jmp	0x124c	; 0x124c <__prologue_saves__+0x20>
     baa:	ae 01       	movw	r20, r28
     bac:	4b 5f       	subi	r20, 0xFB	; 251
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	fa 01       	movw	r30, r20
     bb2:	61 91       	ld	r22, Z+
     bb4:	71 91       	ld	r23, Z+
     bb6:	af 01       	movw	r20, r30
     bb8:	80 91 09 29 	lds	r24, 0x2909	; 0x802909 <__iob+0x2>
     bbc:	90 91 0a 29 	lds	r25, 0x290A	; 0x80290a <__iob+0x3>
     bc0:	0e 94 45 06 	call	0xc8a	; 0xc8a <vfprintf>
     bc4:	e2 e0       	ldi	r30, 0x02	; 2
     bc6:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__epilogue_restores__+0x20>

00000bca <puts>:
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	e0 91 09 29 	lds	r30, 0x2909	; 0x802909 <__iob+0x2>
     bd6:	f0 91 0a 29 	lds	r31, 0x290A	; 0x80290a <__iob+0x3>
     bda:	23 81       	ldd	r18, Z+3	; 0x03
     bdc:	21 ff       	sbrs	r18, 1
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <puts+0x4c>
     be0:	8c 01       	movw	r16, r24
     be2:	d0 e0       	ldi	r29, 0x00	; 0
     be4:	c0 e0       	ldi	r28, 0x00	; 0
     be6:	f8 01       	movw	r30, r16
     be8:	81 91       	ld	r24, Z+
     bea:	8f 01       	movw	r16, r30
     bec:	60 91 09 29 	lds	r22, 0x2909	; 0x802909 <__iob+0x2>
     bf0:	70 91 0a 29 	lds	r23, 0x290A	; 0x80290a <__iob+0x3>
     bf4:	db 01       	movw	r26, r22
     bf6:	18 96       	adiw	r26, 0x08	; 8
     bf8:	ed 91       	ld	r30, X+
     bfa:	fc 91       	ld	r31, X
     bfc:	19 97       	sbiw	r26, 0x09	; 9
     bfe:	88 23       	and	r24, r24
     c00:	31 f0       	breq	.+12     	; 0xc0e <puts+0x44>
     c02:	09 95       	icall
     c04:	89 2b       	or	r24, r25
     c06:	79 f3       	breq	.-34     	; 0xbe6 <puts+0x1c>
     c08:	df ef       	ldi	r29, 0xFF	; 255
     c0a:	cf ef       	ldi	r28, 0xFF	; 255
     c0c:	ec cf       	rjmp	.-40     	; 0xbe6 <puts+0x1c>
     c0e:	8a e0       	ldi	r24, 0x0A	; 10
     c10:	09 95       	icall
     c12:	89 2b       	or	r24, r25
     c14:	19 f0       	breq	.+6      	; 0xc1c <puts+0x52>
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	9f ef       	ldi	r25, 0xFF	; 255
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <puts+0x56>
     c1c:	8d 2f       	mov	r24, r29
     c1e:	9c 2f       	mov	r25, r28
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <snprintf>:
     c2a:	ae e0       	ldi	r26, 0x0E	; 14
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	eb e1       	ldi	r30, 0x1B	; 27
     c30:	f6 e0       	ldi	r31, 0x06	; 6
     c32:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__prologue_saves__+0x1c>
     c36:	0d 89       	ldd	r16, Y+21	; 0x15
     c38:	1e 89       	ldd	r17, Y+22	; 0x16
     c3a:	8f 89       	ldd	r24, Y+23	; 0x17
     c3c:	98 8d       	ldd	r25, Y+24	; 0x18
     c3e:	26 e0       	ldi	r18, 0x06	; 6
     c40:	2c 83       	std	Y+4, r18	; 0x04
     c42:	09 83       	std	Y+1, r16	; 0x01
     c44:	1a 83       	std	Y+2, r17	; 0x02
     c46:	97 ff       	sbrs	r25, 7
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <snprintf+0x24>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e8       	ldi	r25, 0x80	; 128
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	ae 01       	movw	r20, r28
     c56:	45 5e       	subi	r20, 0xE5	; 229
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	69 8d       	ldd	r22, Y+25	; 0x19
     c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 45 06 	call	0xc8a	; 0xc8a <vfprintf>
     c66:	4d 81       	ldd	r20, Y+5	; 0x05
     c68:	5e 81       	ldd	r21, Y+6	; 0x06
     c6a:	57 fd       	sbrc	r21, 7
     c6c:	0a c0       	rjmp	.+20     	; 0xc82 <snprintf+0x58>
     c6e:	2f 81       	ldd	r18, Y+7	; 0x07
     c70:	38 85       	ldd	r19, Y+8	; 0x08
     c72:	42 17       	cp	r20, r18
     c74:	53 07       	cpc	r21, r19
     c76:	0c f4       	brge	.+2      	; 0xc7a <snprintf+0x50>
     c78:	9a 01       	movw	r18, r20
     c7a:	f8 01       	movw	r30, r16
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	10 82       	st	Z, r1
     c82:	2e 96       	adiw	r28, 0x0e	; 14
     c84:	e4 e0       	ldi	r30, 0x04	; 4
     c86:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__epilogue_restores__+0x1c>

00000c8a <vfprintf>:
     c8a:	ab e0       	ldi	r26, 0x0B	; 11
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e4       	ldi	r30, 0x4B	; 75
     c90:	f6 e0       	ldi	r31, 0x06	; 6
     c92:	0c 94 16 09 	jmp	0x122c	; 0x122c <__prologue_saves__>
     c96:	6c 01       	movw	r12, r24
     c98:	7b 01       	movw	r14, r22
     c9a:	8a 01       	movw	r16, r20
     c9c:	fc 01       	movw	r30, r24
     c9e:	16 82       	std	Z+6, r1	; 0x06
     ca0:	17 82       	std	Z+7, r1	; 0x07
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
     ca4:	81 ff       	sbrs	r24, 1
     ca6:	cc c1       	rjmp	.+920    	; 0x1040 <vfprintf+0x3b6>
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	3c 01       	movw	r6, r24
     cae:	f6 01       	movw	r30, r12
     cb0:	93 81       	ldd	r25, Z+3	; 0x03
     cb2:	f7 01       	movw	r30, r14
     cb4:	93 fd       	sbrc	r25, 3
     cb6:	85 91       	lpm	r24, Z+
     cb8:	93 ff       	sbrs	r25, 3
     cba:	81 91       	ld	r24, Z+
     cbc:	7f 01       	movw	r14, r30
     cbe:	88 23       	and	r24, r24
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <vfprintf+0x3a>
     cc2:	ba c1       	rjmp	.+884    	; 0x1038 <vfprintf+0x3ae>
     cc4:	85 32       	cpi	r24, 0x25	; 37
     cc6:	39 f4       	brne	.+14     	; 0xcd6 <vfprintf+0x4c>
     cc8:	93 fd       	sbrc	r25, 3
     cca:	85 91       	lpm	r24, Z+
     ccc:	93 ff       	sbrs	r25, 3
     cce:	81 91       	ld	r24, Z+
     cd0:	7f 01       	movw	r14, r30
     cd2:	85 32       	cpi	r24, 0x25	; 37
     cd4:	29 f4       	brne	.+10     	; 0xce0 <vfprintf+0x56>
     cd6:	b6 01       	movw	r22, r12
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
     cde:	e7 cf       	rjmp	.-50     	; 0xcae <vfprintf+0x24>
     ce0:	91 2c       	mov	r9, r1
     ce2:	21 2c       	mov	r2, r1
     ce4:	31 2c       	mov	r3, r1
     ce6:	ff e1       	ldi	r31, 0x1F	; 31
     ce8:	f3 15       	cp	r31, r3
     cea:	d8 f0       	brcs	.+54     	; 0xd22 <vfprintf+0x98>
     cec:	8b 32       	cpi	r24, 0x2B	; 43
     cee:	79 f0       	breq	.+30     	; 0xd0e <vfprintf+0x84>
     cf0:	38 f4       	brcc	.+14     	; 0xd00 <vfprintf+0x76>
     cf2:	80 32       	cpi	r24, 0x20	; 32
     cf4:	79 f0       	breq	.+30     	; 0xd14 <vfprintf+0x8a>
     cf6:	83 32       	cpi	r24, 0x23	; 35
     cf8:	a1 f4       	brne	.+40     	; 0xd22 <vfprintf+0x98>
     cfa:	23 2d       	mov	r18, r3
     cfc:	20 61       	ori	r18, 0x10	; 16
     cfe:	1d c0       	rjmp	.+58     	; 0xd3a <vfprintf+0xb0>
     d00:	8d 32       	cpi	r24, 0x2D	; 45
     d02:	61 f0       	breq	.+24     	; 0xd1c <vfprintf+0x92>
     d04:	80 33       	cpi	r24, 0x30	; 48
     d06:	69 f4       	brne	.+26     	; 0xd22 <vfprintf+0x98>
     d08:	23 2d       	mov	r18, r3
     d0a:	21 60       	ori	r18, 0x01	; 1
     d0c:	16 c0       	rjmp	.+44     	; 0xd3a <vfprintf+0xb0>
     d0e:	83 2d       	mov	r24, r3
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	38 2e       	mov	r3, r24
     d14:	e3 2d       	mov	r30, r3
     d16:	e4 60       	ori	r30, 0x04	; 4
     d18:	3e 2e       	mov	r3, r30
     d1a:	2a c0       	rjmp	.+84     	; 0xd70 <vfprintf+0xe6>
     d1c:	f3 2d       	mov	r31, r3
     d1e:	f8 60       	ori	r31, 0x08	; 8
     d20:	1d c0       	rjmp	.+58     	; 0xd5c <vfprintf+0xd2>
     d22:	37 fc       	sbrc	r3, 7
     d24:	2d c0       	rjmp	.+90     	; 0xd80 <vfprintf+0xf6>
     d26:	20 ed       	ldi	r18, 0xD0	; 208
     d28:	28 0f       	add	r18, r24
     d2a:	2a 30       	cpi	r18, 0x0A	; 10
     d2c:	40 f0       	brcs	.+16     	; 0xd3e <vfprintf+0xb4>
     d2e:	8e 32       	cpi	r24, 0x2E	; 46
     d30:	b9 f4       	brne	.+46     	; 0xd60 <vfprintf+0xd6>
     d32:	36 fc       	sbrc	r3, 6
     d34:	81 c1       	rjmp	.+770    	; 0x1038 <vfprintf+0x3ae>
     d36:	23 2d       	mov	r18, r3
     d38:	20 64       	ori	r18, 0x40	; 64
     d3a:	32 2e       	mov	r3, r18
     d3c:	19 c0       	rjmp	.+50     	; 0xd70 <vfprintf+0xe6>
     d3e:	36 fe       	sbrs	r3, 6
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0xc4>
     d42:	8a e0       	ldi	r24, 0x0A	; 10
     d44:	98 9e       	mul	r9, r24
     d46:	20 0d       	add	r18, r0
     d48:	11 24       	eor	r1, r1
     d4a:	92 2e       	mov	r9, r18
     d4c:	11 c0       	rjmp	.+34     	; 0xd70 <vfprintf+0xe6>
     d4e:	ea e0       	ldi	r30, 0x0A	; 10
     d50:	2e 9e       	mul	r2, r30
     d52:	20 0d       	add	r18, r0
     d54:	11 24       	eor	r1, r1
     d56:	22 2e       	mov	r2, r18
     d58:	f3 2d       	mov	r31, r3
     d5a:	f0 62       	ori	r31, 0x20	; 32
     d5c:	3f 2e       	mov	r3, r31
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <vfprintf+0xe6>
     d60:	8c 36       	cpi	r24, 0x6C	; 108
     d62:	21 f4       	brne	.+8      	; 0xd6c <vfprintf+0xe2>
     d64:	83 2d       	mov	r24, r3
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	38 2e       	mov	r3, r24
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <vfprintf+0xe6>
     d6c:	88 36       	cpi	r24, 0x68	; 104
     d6e:	41 f4       	brne	.+16     	; 0xd80 <vfprintf+0xf6>
     d70:	f7 01       	movw	r30, r14
     d72:	93 fd       	sbrc	r25, 3
     d74:	85 91       	lpm	r24, Z+
     d76:	93 ff       	sbrs	r25, 3
     d78:	81 91       	ld	r24, Z+
     d7a:	7f 01       	movw	r14, r30
     d7c:	81 11       	cpse	r24, r1
     d7e:	b3 cf       	rjmp	.-154    	; 0xce6 <vfprintf+0x5c>
     d80:	98 2f       	mov	r25, r24
     d82:	9f 7d       	andi	r25, 0xDF	; 223
     d84:	95 54       	subi	r25, 0x45	; 69
     d86:	93 30       	cpi	r25, 0x03	; 3
     d88:	28 f4       	brcc	.+10     	; 0xd94 <vfprintf+0x10a>
     d8a:	0c 5f       	subi	r16, 0xFC	; 252
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	9f e3       	ldi	r25, 0x3F	; 63
     d90:	99 83       	std	Y+1, r25	; 0x01
     d92:	0d c0       	rjmp	.+26     	; 0xdae <vfprintf+0x124>
     d94:	83 36       	cpi	r24, 0x63	; 99
     d96:	31 f0       	breq	.+12     	; 0xda4 <vfprintf+0x11a>
     d98:	83 37       	cpi	r24, 0x73	; 115
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <vfprintf+0x12e>
     d9c:	83 35       	cpi	r24, 0x53	; 83
     d9e:	09 f0       	breq	.+2      	; 0xda2 <vfprintf+0x118>
     da0:	59 c0       	rjmp	.+178    	; 0xe54 <vfprintf+0x1ca>
     da2:	21 c0       	rjmp	.+66     	; 0xde6 <vfprintf+0x15c>
     da4:	f8 01       	movw	r30, r16
     da6:	80 81       	ld	r24, Z
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	0e 5f       	subi	r16, 0xFE	; 254
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	88 24       	eor	r8, r8
     db0:	83 94       	inc	r8
     db2:	91 2c       	mov	r9, r1
     db4:	53 01       	movw	r10, r6
     db6:	13 c0       	rjmp	.+38     	; 0xdde <vfprintf+0x154>
     db8:	28 01       	movw	r4, r16
     dba:	f2 e0       	ldi	r31, 0x02	; 2
     dbc:	4f 0e       	add	r4, r31
     dbe:	51 1c       	adc	r5, r1
     dc0:	f8 01       	movw	r30, r16
     dc2:	a0 80       	ld	r10, Z
     dc4:	b1 80       	ldd	r11, Z+1	; 0x01
     dc6:	36 fe       	sbrs	r3, 6
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <vfprintf+0x146>
     dca:	69 2d       	mov	r22, r9
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <vfprintf+0x14a>
     dd0:	6f ef       	ldi	r22, 0xFF	; 255
     dd2:	7f ef       	ldi	r23, 0xFF	; 255
     dd4:	c5 01       	movw	r24, r10
     dd6:	0e 94 34 08 	call	0x1068	; 0x1068 <strnlen>
     dda:	4c 01       	movw	r8, r24
     ddc:	82 01       	movw	r16, r4
     dde:	f3 2d       	mov	r31, r3
     de0:	ff 77       	andi	r31, 0x7F	; 127
     de2:	3f 2e       	mov	r3, r31
     de4:	16 c0       	rjmp	.+44     	; 0xe12 <vfprintf+0x188>
     de6:	28 01       	movw	r4, r16
     de8:	22 e0       	ldi	r18, 0x02	; 2
     dea:	42 0e       	add	r4, r18
     dec:	51 1c       	adc	r5, r1
     dee:	f8 01       	movw	r30, r16
     df0:	a0 80       	ld	r10, Z
     df2:	b1 80       	ldd	r11, Z+1	; 0x01
     df4:	36 fe       	sbrs	r3, 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <vfprintf+0x174>
     df8:	69 2d       	mov	r22, r9
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x178>
     dfe:	6f ef       	ldi	r22, 0xFF	; 255
     e00:	7f ef       	ldi	r23, 0xFF	; 255
     e02:	c5 01       	movw	r24, r10
     e04:	0e 94 29 08 	call	0x1052	; 0x1052 <strnlen_P>
     e08:	4c 01       	movw	r8, r24
     e0a:	f3 2d       	mov	r31, r3
     e0c:	f0 68       	ori	r31, 0x80	; 128
     e0e:	3f 2e       	mov	r3, r31
     e10:	82 01       	movw	r16, r4
     e12:	33 fc       	sbrc	r3, 3
     e14:	1b c0       	rjmp	.+54     	; 0xe4c <vfprintf+0x1c2>
     e16:	82 2d       	mov	r24, r2
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	88 16       	cp	r8, r24
     e1c:	99 06       	cpc	r9, r25
     e1e:	b0 f4       	brcc	.+44     	; 0xe4c <vfprintf+0x1c2>
     e20:	b6 01       	movw	r22, r12
     e22:	80 e2       	ldi	r24, 0x20	; 32
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
     e2a:	2a 94       	dec	r2
     e2c:	f4 cf       	rjmp	.-24     	; 0xe16 <vfprintf+0x18c>
     e2e:	f5 01       	movw	r30, r10
     e30:	37 fc       	sbrc	r3, 7
     e32:	85 91       	lpm	r24, Z+
     e34:	37 fe       	sbrs	r3, 7
     e36:	81 91       	ld	r24, Z+
     e38:	5f 01       	movw	r10, r30
     e3a:	b6 01       	movw	r22, r12
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
     e42:	21 10       	cpse	r2, r1
     e44:	2a 94       	dec	r2
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	82 1a       	sub	r8, r18
     e4a:	91 08       	sbc	r9, r1
     e4c:	81 14       	cp	r8, r1
     e4e:	91 04       	cpc	r9, r1
     e50:	71 f7       	brne	.-36     	; 0xe2e <vfprintf+0x1a4>
     e52:	e8 c0       	rjmp	.+464    	; 0x1024 <vfprintf+0x39a>
     e54:	84 36       	cpi	r24, 0x64	; 100
     e56:	11 f0       	breq	.+4      	; 0xe5c <vfprintf+0x1d2>
     e58:	89 36       	cpi	r24, 0x69	; 105
     e5a:	41 f5       	brne	.+80     	; 0xeac <vfprintf+0x222>
     e5c:	f8 01       	movw	r30, r16
     e5e:	37 fe       	sbrs	r3, 7
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <vfprintf+0x1e6>
     e62:	60 81       	ld	r22, Z
     e64:	71 81       	ldd	r23, Z+1	; 0x01
     e66:	82 81       	ldd	r24, Z+2	; 0x02
     e68:	93 81       	ldd	r25, Z+3	; 0x03
     e6a:	0c 5f       	subi	r16, 0xFC	; 252
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	08 c0       	rjmp	.+16     	; 0xe80 <vfprintf+0x1f6>
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	07 2e       	mov	r0, r23
     e76:	00 0c       	add	r0, r0
     e78:	88 0b       	sbc	r24, r24
     e7a:	99 0b       	sbc	r25, r25
     e7c:	0e 5f       	subi	r16, 0xFE	; 254
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	f3 2d       	mov	r31, r3
     e82:	ff 76       	andi	r31, 0x6F	; 111
     e84:	3f 2e       	mov	r3, r31
     e86:	97 ff       	sbrs	r25, 7
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <vfprintf+0x212>
     e8a:	90 95       	com	r25
     e8c:	80 95       	com	r24
     e8e:	70 95       	com	r23
     e90:	61 95       	neg	r22
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	f0 68       	ori	r31, 0x80	; 128
     e9a:	3f 2e       	mov	r3, r31
     e9c:	2a e0       	ldi	r18, 0x0A	; 10
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	a3 01       	movw	r20, r6
     ea2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__ultoa_invert>
     ea6:	88 2e       	mov	r8, r24
     ea8:	86 18       	sub	r8, r6
     eaa:	45 c0       	rjmp	.+138    	; 0xf36 <vfprintf+0x2ac>
     eac:	85 37       	cpi	r24, 0x75	; 117
     eae:	31 f4       	brne	.+12     	; 0xebc <vfprintf+0x232>
     eb0:	23 2d       	mov	r18, r3
     eb2:	2f 7e       	andi	r18, 0xEF	; 239
     eb4:	b2 2e       	mov	r11, r18
     eb6:	2a e0       	ldi	r18, 0x0A	; 10
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	25 c0       	rjmp	.+74     	; 0xf06 <vfprintf+0x27c>
     ebc:	93 2d       	mov	r25, r3
     ebe:	99 7f       	andi	r25, 0xF9	; 249
     ec0:	b9 2e       	mov	r11, r25
     ec2:	8f 36       	cpi	r24, 0x6F	; 111
     ec4:	c1 f0       	breq	.+48     	; 0xef6 <vfprintf+0x26c>
     ec6:	18 f4       	brcc	.+6      	; 0xece <vfprintf+0x244>
     ec8:	88 35       	cpi	r24, 0x58	; 88
     eca:	79 f0       	breq	.+30     	; 0xeea <vfprintf+0x260>
     ecc:	b5 c0       	rjmp	.+362    	; 0x1038 <vfprintf+0x3ae>
     ece:	80 37       	cpi	r24, 0x70	; 112
     ed0:	19 f0       	breq	.+6      	; 0xed8 <vfprintf+0x24e>
     ed2:	88 37       	cpi	r24, 0x78	; 120
     ed4:	21 f0       	breq	.+8      	; 0xede <vfprintf+0x254>
     ed6:	b0 c0       	rjmp	.+352    	; 0x1038 <vfprintf+0x3ae>
     ed8:	e9 2f       	mov	r30, r25
     eda:	e0 61       	ori	r30, 0x10	; 16
     edc:	be 2e       	mov	r11, r30
     ede:	b4 fe       	sbrs	r11, 4
     ee0:	0d c0       	rjmp	.+26     	; 0xefc <vfprintf+0x272>
     ee2:	fb 2d       	mov	r31, r11
     ee4:	f4 60       	ori	r31, 0x04	; 4
     ee6:	bf 2e       	mov	r11, r31
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <vfprintf+0x272>
     eea:	34 fe       	sbrs	r3, 4
     eec:	0a c0       	rjmp	.+20     	; 0xf02 <vfprintf+0x278>
     eee:	29 2f       	mov	r18, r25
     ef0:	26 60       	ori	r18, 0x06	; 6
     ef2:	b2 2e       	mov	r11, r18
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <vfprintf+0x278>
     ef6:	28 e0       	ldi	r18, 0x08	; 8
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <vfprintf+0x27c>
     efc:	20 e1       	ldi	r18, 0x10	; 16
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <vfprintf+0x27c>
     f02:	20 e1       	ldi	r18, 0x10	; 16
     f04:	32 e0       	ldi	r19, 0x02	; 2
     f06:	f8 01       	movw	r30, r16
     f08:	b7 fe       	sbrs	r11, 7
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <vfprintf+0x290>
     f0c:	60 81       	ld	r22, Z
     f0e:	71 81       	ldd	r23, Z+1	; 0x01
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	0c 5f       	subi	r16, 0xFC	; 252
     f16:	1f 4f       	sbci	r17, 0xFF	; 255
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <vfprintf+0x29c>
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 5f       	subi	r16, 0xFE	; 254
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
     f26:	a3 01       	movw	r20, r6
     f28:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__ultoa_invert>
     f2c:	88 2e       	mov	r8, r24
     f2e:	86 18       	sub	r8, r6
     f30:	fb 2d       	mov	r31, r11
     f32:	ff 77       	andi	r31, 0x7F	; 127
     f34:	3f 2e       	mov	r3, r31
     f36:	36 fe       	sbrs	r3, 6
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <vfprintf+0x2ca>
     f3a:	23 2d       	mov	r18, r3
     f3c:	2e 7f       	andi	r18, 0xFE	; 254
     f3e:	a2 2e       	mov	r10, r18
     f40:	89 14       	cp	r8, r9
     f42:	58 f4       	brcc	.+22     	; 0xf5a <vfprintf+0x2d0>
     f44:	34 fe       	sbrs	r3, 4
     f46:	0b c0       	rjmp	.+22     	; 0xf5e <vfprintf+0x2d4>
     f48:	32 fc       	sbrc	r3, 2
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <vfprintf+0x2d4>
     f4c:	83 2d       	mov	r24, r3
     f4e:	8e 7e       	andi	r24, 0xEE	; 238
     f50:	a8 2e       	mov	r10, r24
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <vfprintf+0x2d4>
     f54:	b8 2c       	mov	r11, r8
     f56:	a3 2c       	mov	r10, r3
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <vfprintf+0x2d6>
     f5a:	b8 2c       	mov	r11, r8
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <vfprintf+0x2d6>
     f5e:	b9 2c       	mov	r11, r9
     f60:	a4 fe       	sbrs	r10, 4
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <vfprintf+0x2f8>
     f64:	fe 01       	movw	r30, r28
     f66:	e8 0d       	add	r30, r8
     f68:	f1 1d       	adc	r31, r1
     f6a:	80 81       	ld	r24, Z
     f6c:	80 33       	cpi	r24, 0x30	; 48
     f6e:	21 f4       	brne	.+8      	; 0xf78 <vfprintf+0x2ee>
     f70:	9a 2d       	mov	r25, r10
     f72:	99 7e       	andi	r25, 0xE9	; 233
     f74:	a9 2e       	mov	r10, r25
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <vfprintf+0x300>
     f78:	a2 fe       	sbrs	r10, 2
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0x2fe>
     f7c:	b3 94       	inc	r11
     f7e:	b3 94       	inc	r11
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <vfprintf+0x300>
     f82:	8a 2d       	mov	r24, r10
     f84:	86 78       	andi	r24, 0x86	; 134
     f86:	09 f0       	breq	.+2      	; 0xf8a <vfprintf+0x300>
     f88:	b3 94       	inc	r11
     f8a:	a3 fc       	sbrc	r10, 3
     f8c:	11 c0       	rjmp	.+34     	; 0xfb0 <vfprintf+0x326>
     f8e:	a0 fe       	sbrs	r10, 0
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x314>
     f92:	b2 14       	cp	r11, r2
     f94:	88 f4       	brcc	.+34     	; 0xfb8 <vfprintf+0x32e>
     f96:	28 0c       	add	r2, r8
     f98:	92 2c       	mov	r9, r2
     f9a:	9b 18       	sub	r9, r11
     f9c:	0e c0       	rjmp	.+28     	; 0xfba <vfprintf+0x330>
     f9e:	b2 14       	cp	r11, r2
     fa0:	60 f4       	brcc	.+24     	; 0xfba <vfprintf+0x330>
     fa2:	b6 01       	movw	r22, r12
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
     fac:	b3 94       	inc	r11
     fae:	f7 cf       	rjmp	.-18     	; 0xf9e <vfprintf+0x314>
     fb0:	b2 14       	cp	r11, r2
     fb2:	18 f4       	brcc	.+6      	; 0xfba <vfprintf+0x330>
     fb4:	2b 18       	sub	r2, r11
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <vfprintf+0x332>
     fb8:	98 2c       	mov	r9, r8
     fba:	21 2c       	mov	r2, r1
     fbc:	a4 fe       	sbrs	r10, 4
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <vfprintf+0x356>
     fc0:	b6 01       	movw	r22, r12
     fc2:	80 e3       	ldi	r24, 0x30	; 48
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
     fca:	a2 fe       	sbrs	r10, 2
     fcc:	17 c0       	rjmp	.+46     	; 0xffc <vfprintf+0x372>
     fce:	a1 fc       	sbrc	r10, 1
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <vfprintf+0x34e>
     fd2:	88 e7       	ldi	r24, 0x78	; 120
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x352>
     fd8:	88 e5       	ldi	r24, 0x58	; 88
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	b6 01       	movw	r22, r12
     fde:	0c c0       	rjmp	.+24     	; 0xff8 <vfprintf+0x36e>
     fe0:	8a 2d       	mov	r24, r10
     fe2:	86 78       	andi	r24, 0x86	; 134
     fe4:	59 f0       	breq	.+22     	; 0xffc <vfprintf+0x372>
     fe6:	a1 fe       	sbrs	r10, 1
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <vfprintf+0x364>
     fea:	8b e2       	ldi	r24, 0x2B	; 43
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <vfprintf+0x366>
     fee:	80 e2       	ldi	r24, 0x20	; 32
     ff0:	a7 fc       	sbrc	r10, 7
     ff2:	8d e2       	ldi	r24, 0x2D	; 45
     ff4:	b6 01       	movw	r22, r12
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
     ffc:	89 14       	cp	r8, r9
     ffe:	38 f4       	brcc	.+14     	; 0x100e <vfprintf+0x384>
    1000:	b6 01       	movw	r22, r12
    1002:	80 e3       	ldi	r24, 0x30	; 48
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
    100a:	9a 94       	dec	r9
    100c:	f7 cf       	rjmp	.-18     	; 0xffc <vfprintf+0x372>
    100e:	8a 94       	dec	r8
    1010:	f3 01       	movw	r30, r6
    1012:	e8 0d       	add	r30, r8
    1014:	f1 1d       	adc	r31, r1
    1016:	80 81       	ld	r24, Z
    1018:	b6 01       	movw	r22, r12
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
    1020:	81 10       	cpse	r8, r1
    1022:	f5 cf       	rjmp	.-22     	; 0x100e <vfprintf+0x384>
    1024:	22 20       	and	r2, r2
    1026:	09 f4       	brne	.+2      	; 0x102a <vfprintf+0x3a0>
    1028:	42 ce       	rjmp	.-892    	; 0xcae <vfprintf+0x24>
    102a:	b6 01       	movw	r22, r12
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 3f 08 	call	0x107e	; 0x107e <fputc>
    1034:	2a 94       	dec	r2
    1036:	f6 cf       	rjmp	.-20     	; 0x1024 <vfprintf+0x39a>
    1038:	f6 01       	movw	r30, r12
    103a:	86 81       	ldd	r24, Z+6	; 0x06
    103c:	97 81       	ldd	r25, Z+7	; 0x07
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <vfprintf+0x3ba>
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	2b 96       	adiw	r28, 0x0b	; 11
    1046:	e2 e1       	ldi	r30, 0x12	; 18
    1048:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__epilogue_restores__>

0000104c <__ctype_isfalse>:
    104c:	99 27       	eor	r25, r25
    104e:	88 27       	eor	r24, r24

00001050 <__ctype_istrue>:
    1050:	08 95       	ret

00001052 <strnlen_P>:
    1052:	fc 01       	movw	r30, r24
    1054:	05 90       	lpm	r0, Z+
    1056:	61 50       	subi	r22, 0x01	; 1
    1058:	70 40       	sbci	r23, 0x00	; 0
    105a:	01 10       	cpse	r0, r1
    105c:	d8 f7       	brcc	.-10     	; 0x1054 <strnlen_P+0x2>
    105e:	80 95       	com	r24
    1060:	90 95       	com	r25
    1062:	8e 0f       	add	r24, r30
    1064:	9f 1f       	adc	r25, r31
    1066:	08 95       	ret

00001068 <strnlen>:
    1068:	fc 01       	movw	r30, r24
    106a:	61 50       	subi	r22, 0x01	; 1
    106c:	70 40       	sbci	r23, 0x00	; 0
    106e:	01 90       	ld	r0, Z+
    1070:	01 10       	cpse	r0, r1
    1072:	d8 f7       	brcc	.-10     	; 0x106a <strnlen+0x2>
    1074:	80 95       	com	r24
    1076:	90 95       	com	r25
    1078:	8e 0f       	add	r24, r30
    107a:	9f 1f       	adc	r25, r31
    107c:	08 95       	ret

0000107e <fputc>:
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	fb 01       	movw	r30, r22
    1088:	23 81       	ldd	r18, Z+3	; 0x03
    108a:	21 fd       	sbrc	r18, 1
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <fputc+0x16>
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	9f ef       	ldi	r25, 0xFF	; 255
    1092:	2c c0       	rjmp	.+88     	; 0x10ec <fputc+0x6e>
    1094:	22 ff       	sbrs	r18, 2
    1096:	16 c0       	rjmp	.+44     	; 0x10c4 <fputc+0x46>
    1098:	46 81       	ldd	r20, Z+6	; 0x06
    109a:	57 81       	ldd	r21, Z+7	; 0x07
    109c:	24 81       	ldd	r18, Z+4	; 0x04
    109e:	35 81       	ldd	r19, Z+5	; 0x05
    10a0:	42 17       	cp	r20, r18
    10a2:	53 07       	cpc	r21, r19
    10a4:	44 f4       	brge	.+16     	; 0x10b6 <fputc+0x38>
    10a6:	a0 81       	ld	r26, Z
    10a8:	b1 81       	ldd	r27, Z+1	; 0x01
    10aa:	9d 01       	movw	r18, r26
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	20 83       	st	Z, r18
    10b2:	31 83       	std	Z+1, r19	; 0x01
    10b4:	8c 93       	st	X, r24
    10b6:	26 81       	ldd	r18, Z+6	; 0x06
    10b8:	37 81       	ldd	r19, Z+7	; 0x07
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	26 83       	std	Z+6, r18	; 0x06
    10c0:	37 83       	std	Z+7, r19	; 0x07
    10c2:	14 c0       	rjmp	.+40     	; 0x10ec <fputc+0x6e>
    10c4:	8b 01       	movw	r16, r22
    10c6:	ec 01       	movw	r28, r24
    10c8:	fb 01       	movw	r30, r22
    10ca:	00 84       	ldd	r0, Z+8	; 0x08
    10cc:	f1 85       	ldd	r31, Z+9	; 0x09
    10ce:	e0 2d       	mov	r30, r0
    10d0:	09 95       	icall
    10d2:	89 2b       	or	r24, r25
    10d4:	e1 f6       	brne	.-72     	; 0x108e <fputc+0x10>
    10d6:	d8 01       	movw	r26, r16
    10d8:	16 96       	adiw	r26, 0x06	; 6
    10da:	8d 91       	ld	r24, X+
    10dc:	9c 91       	ld	r25, X
    10de:	17 97       	sbiw	r26, 0x07	; 7
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	16 96       	adiw	r26, 0x06	; 6
    10e4:	8d 93       	st	X+, r24
    10e6:	9c 93       	st	X, r25
    10e8:	17 97       	sbiw	r26, 0x07	; 7
    10ea:	ce 01       	movw	r24, r28
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <__ultoa_invert>:
    10f6:	fa 01       	movw	r30, r20
    10f8:	aa 27       	eor	r26, r26
    10fa:	28 30       	cpi	r18, 0x08	; 8
    10fc:	51 f1       	breq	.+84     	; 0x1152 <__ultoa_invert+0x5c>
    10fe:	20 31       	cpi	r18, 0x10	; 16
    1100:	81 f1       	breq	.+96     	; 0x1162 <__ultoa_invert+0x6c>
    1102:	e8 94       	clt
    1104:	6f 93       	push	r22
    1106:	6e 7f       	andi	r22, 0xFE	; 254
    1108:	6e 5f       	subi	r22, 0xFE	; 254
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	af 4f       	sbci	r26, 0xFF	; 255
    1112:	b1 e0       	ldi	r27, 0x01	; 1
    1114:	3e d0       	rcall	.+124    	; 0x1192 <__ultoa_invert+0x9c>
    1116:	b4 e0       	ldi	r27, 0x04	; 4
    1118:	3c d0       	rcall	.+120    	; 0x1192 <__ultoa_invert+0x9c>
    111a:	67 0f       	add	r22, r23
    111c:	78 1f       	adc	r23, r24
    111e:	89 1f       	adc	r24, r25
    1120:	9a 1f       	adc	r25, r26
    1122:	a1 1d       	adc	r26, r1
    1124:	68 0f       	add	r22, r24
    1126:	79 1f       	adc	r23, r25
    1128:	8a 1f       	adc	r24, r26
    112a:	91 1d       	adc	r25, r1
    112c:	a1 1d       	adc	r26, r1
    112e:	6a 0f       	add	r22, r26
    1130:	71 1d       	adc	r23, r1
    1132:	81 1d       	adc	r24, r1
    1134:	91 1d       	adc	r25, r1
    1136:	a1 1d       	adc	r26, r1
    1138:	20 d0       	rcall	.+64     	; 0x117a <__ultoa_invert+0x84>
    113a:	09 f4       	brne	.+2      	; 0x113e <__ultoa_invert+0x48>
    113c:	68 94       	set
    113e:	3f 91       	pop	r19
    1140:	2a e0       	ldi	r18, 0x0A	; 10
    1142:	26 9f       	mul	r18, r22
    1144:	11 24       	eor	r1, r1
    1146:	30 19       	sub	r19, r0
    1148:	30 5d       	subi	r19, 0xD0	; 208
    114a:	31 93       	st	Z+, r19
    114c:	de f6       	brtc	.-74     	; 0x1104 <__ultoa_invert+0xe>
    114e:	cf 01       	movw	r24, r30
    1150:	08 95       	ret
    1152:	46 2f       	mov	r20, r22
    1154:	47 70       	andi	r20, 0x07	; 7
    1156:	40 5d       	subi	r20, 0xD0	; 208
    1158:	41 93       	st	Z+, r20
    115a:	b3 e0       	ldi	r27, 0x03	; 3
    115c:	0f d0       	rcall	.+30     	; 0x117c <__ultoa_invert+0x86>
    115e:	c9 f7       	brne	.-14     	; 0x1152 <__ultoa_invert+0x5c>
    1160:	f6 cf       	rjmp	.-20     	; 0x114e <__ultoa_invert+0x58>
    1162:	46 2f       	mov	r20, r22
    1164:	4f 70       	andi	r20, 0x0F	; 15
    1166:	40 5d       	subi	r20, 0xD0	; 208
    1168:	4a 33       	cpi	r20, 0x3A	; 58
    116a:	18 f0       	brcs	.+6      	; 0x1172 <__ultoa_invert+0x7c>
    116c:	49 5d       	subi	r20, 0xD9	; 217
    116e:	31 fd       	sbrc	r19, 1
    1170:	40 52       	subi	r20, 0x20	; 32
    1172:	41 93       	st	Z+, r20
    1174:	02 d0       	rcall	.+4      	; 0x117a <__ultoa_invert+0x84>
    1176:	a9 f7       	brne	.-22     	; 0x1162 <__ultoa_invert+0x6c>
    1178:	ea cf       	rjmp	.-44     	; 0x114e <__ultoa_invert+0x58>
    117a:	b4 e0       	ldi	r27, 0x04	; 4
    117c:	a6 95       	lsr	r26
    117e:	97 95       	ror	r25
    1180:	87 95       	ror	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	ba 95       	dec	r27
    1188:	c9 f7       	brne	.-14     	; 0x117c <__ultoa_invert+0x86>
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	61 05       	cpc	r22, r1
    118e:	71 05       	cpc	r23, r1
    1190:	08 95       	ret
    1192:	9b 01       	movw	r18, r22
    1194:	ac 01       	movw	r20, r24
    1196:	0a 2e       	mov	r0, r26
    1198:	06 94       	lsr	r0
    119a:	57 95       	ror	r21
    119c:	47 95       	ror	r20
    119e:	37 95       	ror	r19
    11a0:	27 95       	ror	r18
    11a2:	ba 95       	dec	r27
    11a4:	c9 f7       	brne	.-14     	; 0x1198 <__ultoa_invert+0xa2>
    11a6:	62 0f       	add	r22, r18
    11a8:	73 1f       	adc	r23, r19
    11aa:	84 1f       	adc	r24, r20
    11ac:	95 1f       	adc	r25, r21
    11ae:	a0 1d       	adc	r26, r0
    11b0:	08 95       	ret

000011b2 <__mulsi3>:
    11b2:	db 01       	movw	r26, r22
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	0e 94 0b 09 	call	0x1216	; 0x1216 <__muluhisi3>
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	a2 9f       	mul	r26, r18
    11c2:	80 0d       	add	r24, r0
    11c4:	91 1d       	adc	r25, r1
    11c6:	a3 9f       	mul	r26, r19
    11c8:	90 0d       	add	r25, r0
    11ca:	b2 9f       	mul	r27, r18
    11cc:	90 0d       	add	r25, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	08 95       	ret

000011d2 <__udivmodsi4>:
    11d2:	a1 e2       	ldi	r26, 0x21	; 33
    11d4:	1a 2e       	mov	r1, r26
    11d6:	aa 1b       	sub	r26, r26
    11d8:	bb 1b       	sub	r27, r27
    11da:	fd 01       	movw	r30, r26
    11dc:	0d c0       	rjmp	.+26     	; 0x11f8 <__udivmodsi4_ep>

000011de <__udivmodsi4_loop>:
    11de:	aa 1f       	adc	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	ee 1f       	adc	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	a2 17       	cp	r26, r18
    11e8:	b3 07       	cpc	r27, r19
    11ea:	e4 07       	cpc	r30, r20
    11ec:	f5 07       	cpc	r31, r21
    11ee:	20 f0       	brcs	.+8      	; 0x11f8 <__udivmodsi4_ep>
    11f0:	a2 1b       	sub	r26, r18
    11f2:	b3 0b       	sbc	r27, r19
    11f4:	e4 0b       	sbc	r30, r20
    11f6:	f5 0b       	sbc	r31, r21

000011f8 <__udivmodsi4_ep>:
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	1a 94       	dec	r1
    1202:	69 f7       	brne	.-38     	; 0x11de <__udivmodsi4_loop>
    1204:	60 95       	com	r22
    1206:	70 95       	com	r23
    1208:	80 95       	com	r24
    120a:	90 95       	com	r25
    120c:	9b 01       	movw	r18, r22
    120e:	ac 01       	movw	r20, r24
    1210:	bd 01       	movw	r22, r26
    1212:	cf 01       	movw	r24, r30
    1214:	08 95       	ret

00001216 <__muluhisi3>:
    1216:	0e 94 47 09 	call	0x128e	; 0x128e <__umulhisi3>
    121a:	a5 9f       	mul	r26, r21
    121c:	90 0d       	add	r25, r0
    121e:	b4 9f       	mul	r27, r20
    1220:	90 0d       	add	r25, r0
    1222:	a4 9f       	mul	r26, r20
    1224:	80 0d       	add	r24, r0
    1226:	91 1d       	adc	r25, r1
    1228:	11 24       	eor	r1, r1
    122a:	08 95       	ret

0000122c <__prologue_saves__>:
    122c:	2f 92       	push	r2
    122e:	3f 92       	push	r3
    1230:	4f 92       	push	r4
    1232:	5f 92       	push	r5
    1234:	6f 92       	push	r6
    1236:	7f 92       	push	r7
    1238:	8f 92       	push	r8
    123a:	9f 92       	push	r9
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	ca 1b       	sub	r28, r26
    1256:	db 0b       	sbc	r29, r27
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	09 94       	ijmp

0000125e <__epilogue_restores__>:
    125e:	2a 88       	ldd	r2, Y+18	; 0x12
    1260:	39 88       	ldd	r3, Y+17	; 0x11
    1262:	48 88       	ldd	r4, Y+16	; 0x10
    1264:	5f 84       	ldd	r5, Y+15	; 0x0f
    1266:	6e 84       	ldd	r6, Y+14	; 0x0e
    1268:	7d 84       	ldd	r7, Y+13	; 0x0d
    126a:	8c 84       	ldd	r8, Y+12	; 0x0c
    126c:	9b 84       	ldd	r9, Y+11	; 0x0b
    126e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1270:	b9 84       	ldd	r11, Y+9	; 0x09
    1272:	c8 84       	ldd	r12, Y+8	; 0x08
    1274:	df 80       	ldd	r13, Y+7	; 0x07
    1276:	ee 80       	ldd	r14, Y+6	; 0x06
    1278:	fd 80       	ldd	r15, Y+5	; 0x05
    127a:	0c 81       	ldd	r16, Y+4	; 0x04
    127c:	1b 81       	ldd	r17, Y+3	; 0x03
    127e:	aa 81       	ldd	r26, Y+2	; 0x02
    1280:	b9 81       	ldd	r27, Y+1	; 0x01
    1282:	ce 0f       	add	r28, r30
    1284:	d1 1d       	adc	r29, r1
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	ed 01       	movw	r28, r26
    128c:	08 95       	ret

0000128e <__umulhisi3>:
    128e:	a2 9f       	mul	r26, r18
    1290:	b0 01       	movw	r22, r0
    1292:	b3 9f       	mul	r27, r19
    1294:	c0 01       	movw	r24, r0
    1296:	a3 9f       	mul	r26, r19
    1298:	70 0d       	add	r23, r0
    129a:	81 1d       	adc	r24, r1
    129c:	11 24       	eor	r1, r1
    129e:	91 1d       	adc	r25, r1
    12a0:	b2 9f       	mul	r27, r18
    12a2:	70 0d       	add	r23, r0
    12a4:	81 1d       	adc	r24, r1
    12a6:	11 24       	eor	r1, r1
    12a8:	91 1d       	adc	r25, r1
    12aa:	08 95       	ret

000012ac <_exit>:
    12ac:	f8 94       	cli

000012ae <__stop_program>:
    12ae:	ff cf       	rjmp	.-2      	; 0x12ae <__stop_program>
