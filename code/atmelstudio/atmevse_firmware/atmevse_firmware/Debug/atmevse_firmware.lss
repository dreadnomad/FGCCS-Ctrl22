
atmevse_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00802800  00001f6d  00001e21  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019d4  00000200  00000200  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000399  00005bd4  00001bd4  00001a88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000fe  00802928  00802928  00001f49  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001f49  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004de1  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000292f  00000000  00000000  00006f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000136d  00000000  00000000  00009888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000464  00000000  00000000  0000abf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002357  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e41  00000000  00000000  0000d3b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a8  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000200 <__vectors>:
     200:	0c 94 48 01 	jmp	0x290	; 0x290 <__ctors_end>
     204:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     208:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     20c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     210:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     214:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     218:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     21c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     220:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     224:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     228:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     22c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     230:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_12>
     234:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     238:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     23c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     240:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     244:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_17>
     248:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     24c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     250:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__vector_20>
     254:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     258:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     25c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     260:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     264:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     268:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     26c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     270:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     274:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     278:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     27c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     280:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     284:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     288:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     28c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df e3       	ldi	r29, 0x3F	; 63
     29a:	de bf       	out	0x3e, r29	; 62

0000029c <__do_copy_data>:
     29c:	19 e2       	ldi	r17, 0x29	; 41
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b8 e2       	ldi	r27, 0x28	; 40
     2a2:	ed e6       	ldi	r30, 0x6D	; 109
     2a4:	ff e1       	ldi	r31, 0x1F	; 31
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x10>
     2a8:	05 90       	lpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	a8 32       	cpi	r26, 0x28	; 40
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0xc>

000002b2 <__do_clear_bss>:
     2b2:	2a e2       	ldi	r18, 0x2A	; 42
     2b4:	a8 e2       	ldi	r26, 0x28	; 40
     2b6:	b9 e2       	ldi	r27, 0x29	; 41
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a6 32       	cpi	r26, 0x26	; 38
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <main>
     2c6:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <_exit>

000002ca <__bad_interrupt>:
     2ca:	0c 94 00 01 	jmp	0x200	; 0x200 <__vectors>

000002ce <led_toggle>:
        return 0;        
    } 
    else {
        return -1;
    }
}
     2ce:	88 e0       	ldi	r24, 0x08	; 8
     2d0:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <__TEXT_REGION_LENGTH__+0x7f4467>
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	08 95       	ret

000002d8 <led_on>:
     2d8:	88 e0       	ldi	r24, 0x08	; 8
     2da:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	08 95       	ret

000002e2 <led_off>:
     2e2:	88 e0       	ldi	r24, 0x08	; 8
     2e4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 95       	ret

000002ec <pwm_on>:
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	81 81       	ldd	r24, Z+1	; 0x01
     2f2:	80 64       	ori	r24, 0x40	; 64
     2f4:	81 83       	std	Z+1, r24	; 0x01
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <pwm_off>:
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	fa e0       	ldi	r31, 0x0A	; 10
     2fe:	81 81       	ldd	r24, Z+1	; 0x01
     300:	8f 7b       	andi	r24, 0xBF	; 191
     302:	81 83       	std	Z+1, r24	; 0x01
     304:	84 e0       	ldi	r24, 0x04	; 4
     306:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 95       	ret

0000030e <ssr1_on>:
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	08 95       	ret

00000318 <ssr1_off>:
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	08 95       	ret

00000322 <ssr2_on>:
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	08 95       	ret

0000032c <ssr2_off>:
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	08 95       	ret

00000336 <ssr3_on>:
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	08 95       	ret

00000340 <ssr3_off>:
     340:	80 e1       	ldi	r24, 0x10	; 16
     342:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	08 95       	ret

0000034a <all_ssr_on>:
     34a:	e0 e0       	ldi	r30, 0x00	; 0
     34c:	f4 e0       	ldi	r31, 0x04	; 4
     34e:	80 e4       	ldi	r24, 0x40	; 64
     350:	85 83       	std	Z+5, r24	; 0x05
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	85 83       	std	Z+5, r24	; 0x05
     356:	80 e1       	ldi	r24, 0x10	; 16
     358:	85 83       	std	Z+5, r24	; 0x05
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	08 95       	ret

0000035e <all_ssr_off>:
     35e:	e0 e0       	ldi	r30, 0x00	; 0
     360:	f4 e0       	ldi	r31, 0x04	; 4
     362:	80 e4       	ldi	r24, 0x40	; 64
     364:	86 83       	std	Z+6, r24	; 0x06
     366:	80 e2       	ldi	r24, 0x20	; 32
     368:	86 83       	std	Z+6, r24	; 0x06
     36a:	80 e1       	ldi	r24, 0x10	; 16
     36c:	86 83       	std	Z+6, r24	; 0x06
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret

00000372 <lock_off>:
     372:	80 e8       	ldi	r24, 0x80	; 128
     374:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	08 95       	ret

00000382 <relay_on>:
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	08 95       	ret

0000038c <relay_off>:
     38c:	88 e0       	ldi	r24, 0x08	; 8
     38e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	08 95       	ret

00000396 <readCP>:
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
     39c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
     3a0:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     3a4:	80 ff       	sbrs	r24, 0
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <readCP+0xa>
     3a8:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     3ac:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     3b0:	80 93 48 29 	sts	0x2948, r24	; 0x802948 <cpVal>
     3b4:	90 93 49 29 	sts	0x2949, r25	; 0x802949 <cpVal+0x1>
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	20 93 0b 06 	sts	0x060B, r18	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     3be:	85 3d       	cpi	r24, 0xD5	; 213
     3c0:	33 e0       	ldi	r19, 0x03	; 3
     3c2:	93 07       	cpc	r25, r19
     3c4:	18 f0       	brcs	.+6      	; 0x3cc <readCP+0x36>
     3c6:	20 93 47 29 	sts	0x2947, r18	; 0x802947 <pilot>
     3ca:	1a c0       	rjmp	.+52     	; 0x400 <__LOCK_REGION_LENGTH__>
     3cc:	9c 01       	movw	r18, r24
     3ce:	2d 55       	subi	r18, 0x5D	; 93
     3d0:	33 40       	sbci	r19, 0x03	; 3
     3d2:	26 33       	cpi	r18, 0x36	; 54
     3d4:	31 05       	cpc	r19, r1
     3d6:	10 f4       	brcc	.+4      	; 0x3dc <readCP+0x46>
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	07 c0       	rjmp	.+14     	; 0x3ea <readCP+0x54>
     3dc:	9c 01       	movw	r18, r24
     3de:	21 5d       	subi	r18, 0xD1	; 209
     3e0:	32 40       	sbci	r19, 0x02	; 2
     3e2:	2f 34       	cpi	r18, 0x4F	; 79
     3e4:	31 05       	cpc	r19, r1
     3e6:	20 f4       	brcc	.+8      	; 0x3f0 <readCP+0x5a>
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <pilot>
     3ee:	08 c0       	rjmp	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f0:	4a 97       	sbiw	r24, 0x1a	; 26
     3f2:	85 34       	cpi	r24, 0x45	; 69
     3f4:	91 05       	cpc	r25, r1
     3f6:	10 f4       	brcc	.+4      	; 0x3fc <readCP+0x66>
     3f8:	84 e0       	ldi	r24, 0x04	; 4
     3fa:	f7 cf       	rjmp	.-18     	; 0x3ea <readCP+0x54>
     3fc:	10 92 47 29 	sts	0x2947, r1	; 0x802947 <pilot>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	08 95       	ret

00000404 <readPP>:
     404:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
     40e:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     412:	80 ff       	sbrs	r24, 0
     414:	fc cf       	rjmp	.-8      	; 0x40e <readPP+0xa>
     416:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     41a:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     41e:	80 93 4a 29 	sts	0x294A, r24	; 0x80294a <ppVal>
     422:	90 93 4b 29 	sts	0x294B, r25	; 0x80294b <ppVal+0x1>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	20 93 0b 06 	sts	0x060B, r18	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     42c:	9c 01       	movw	r18, r24
     42e:	2b 58       	subi	r18, 0x8B	; 139
     430:	31 40       	sbci	r19, 0x01	; 1
     432:	27 32       	cpi	r18, 0x27	; 39
     434:	31 05       	cpc	r19, r1
     436:	10 f4       	brcc	.+4      	; 0x43c <readPP+0x38>
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	0f c0       	rjmp	.+30     	; 0x45a <readPP+0x56>
     43c:	9c 01       	movw	r18, r24
     43e:	20 5b       	subi	r18, 0xB0	; 176
     440:	31 09       	sbc	r19, r1
     442:	21 31       	cpi	r18, 0x11	; 17
     444:	31 05       	cpc	r19, r1
     446:	10 f4       	brcc	.+4      	; 0x44c <readPP+0x48>
     448:	80 e2       	ldi	r24, 0x20	; 32
     44a:	07 c0       	rjmp	.+14     	; 0x45a <readPP+0x56>
     44c:	89 55       	subi	r24, 0x59	; 89
     44e:	91 09       	sbc	r25, r1
     450:	09 97       	sbiw	r24, 0x09	; 9
     452:	10 f0       	brcs	.+4      	; 0x458 <readPP+0x54>
     454:	8d e0       	ldi	r24, 0x0D	; 13
     456:	01 c0       	rjmp	.+2      	; 0x45a <readPP+0x56>
     458:	8f e3       	ldi	r24, 0x3F	; 63
     45a:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <maxCapacity>
     45e:	80 91 35 29 	lds	r24, 0x2935	; 0x802935 <cableConf>
     462:	88 23       	and	r24, r24
     464:	21 f0       	breq	.+8      	; 0x46e <readPP+0x6a>
     466:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <maxCurrent>
     46a:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <maxCapacity>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	08 95       	ret

00000472 <readCT>:
     472:	85 e0       	ldi	r24, 0x05	; 5
     474:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
     47e:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     482:	80 ff       	sbrs	r24, 0
     484:	fc cf       	rjmp	.-8      	; 0x47e <readCT+0xc>
     486:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     48a:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     48e:	80 93 52 29 	sts	0x2952, r24	; 0x802952 <ctVal>
     492:	90 93 53 29 	sts	0x2953, r25	; 0x802953 <ctVal+0x1>
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     49c:	96 e0       	ldi	r25, 0x06	; 6
     49e:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
     4a2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
     4a6:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     4aa:	80 ff       	sbrs	r24, 0
     4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <readCT+0x34>
     4ae:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     4b2:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     4b6:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <ctVal+0x2>
     4ba:	90 93 55 29 	sts	0x2955, r25	; 0x802955 <ctVal+0x3>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     4c4:	97 e0       	ldi	r25, 0x07	; 7
     4c6:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
     4ca:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
     4ce:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     4d2:	80 ff       	sbrs	r24, 0
     4d4:	fc cf       	rjmp	.-8      	; 0x4ce <readCT+0x5c>
     4d6:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     4da:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     4de:	80 93 56 29 	sts	0x2956, r24	; 0x802956 <ctVal+0x4>
     4e2:	90 93 57 29 	sts	0x2957, r25	; 0x802957 <ctVal+0x5>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	08 95       	ret

000004f0 <lock_cable>:
     4f0:	80 e8       	ldi	r24, 0x80	; 128
     4f2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     4fc:	2f eb       	ldi	r18, 0xBF	; 191
     4fe:	87 e2       	ldi	r24, 0x27	; 39
     500:	99 e0       	ldi	r25, 0x09	; 9
     502:	21 50       	subi	r18, 0x01	; 1
     504:	80 40       	sbci	r24, 0x00	; 0
     506:	90 40       	sbci	r25, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <lock_cable+0x12>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <lock_cable+0x1c>
     50c:	00 00       	nop
     50e:	0e 94 b9 01 	call	0x372	; 0x372 <lock_off>
     512:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	29 2f       	mov	r18, r25
     51a:	24 70       	andi	r18, 0x04	; 4
     51c:	92 ff       	sbrs	r25, 2
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	80 93 37 29 	sts	0x2937, r24	; 0x802937 <lockstate>
     524:	21 11       	cpse	r18, r1
     526:	02 c0       	rjmp	.+4      	; 0x52c <lock_cable+0x3c>
     528:	8e ef       	ldi	r24, 0xFE	; 254
     52a:	08 95       	ret
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret

00000530 <unlock_cable>:
     530:	80 e8       	ldi	r24, 0x80	; 128
     532:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
     53c:	2f eb       	ldi	r18, 0xBF	; 191
     53e:	87 e2       	ldi	r24, 0x27	; 39
     540:	99 e0       	ldi	r25, 0x09	; 9
     542:	21 50       	subi	r18, 0x01	; 1
     544:	80 40       	sbci	r24, 0x00	; 0
     546:	90 40       	sbci	r25, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <unlock_cable+0x12>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <unlock_cable+0x1c>
     54c:	00 00       	nop
     54e:	0e 94 b9 01 	call	0x372	; 0x372 <lock_off>
     552:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	29 2f       	mov	r18, r25
     55a:	24 70       	andi	r18, 0x04	; 4
     55c:	92 ff       	sbrs	r25, 2
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	80 93 37 29 	sts	0x2937, r24	; 0x802937 <lockstate>
     564:	22 23       	and	r18, r18
     566:	11 f0       	breq	.+4      	; 0x56c <unlock_cable+0x3c>
     568:	8e ef       	ldi	r24, 0xFE	; 254
     56a:	08 95       	ret
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 95       	ret

00000570 <readTemp>:
     570:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     574:	8e 7f       	andi	r24, 0xFE	; 254
     576:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     57a:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     57e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     582:	8e e1       	ldi	r24, 0x1E	; 30
     584:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
     588:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     58c:	80 62       	ori	r24, 0x20	; 32
     58e:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     592:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     596:	81 60       	ori	r24, 0x01	; 1
     598:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     59c:	89 ef       	ldi	r24, 0xF9	; 249
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <readTemp+0x30>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <readTemp+0x36>
     5a6:	00 00       	nop
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
     5ae:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     5b2:	80 ff       	sbrs	r24, 0
     5b4:	fc cf       	rjmp	.-8      	; 0x5ae <readTemp+0x3e>
     5b6:	a0 91 10 06 	lds	r26, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     5ba:	b0 91 11 06 	lds	r27, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     5be:	80 91 2d 29 	lds	r24, 0x292D	; 0x80292d <sigrow_offset>
     5c2:	a8 1b       	sub	r26, r24
     5c4:	b1 09       	sbc	r27, r1
     5c6:	87 fd       	sbrc	r24, 7
     5c8:	b3 95       	inc	r27
     5ca:	20 91 2c 29 	lds	r18, 0x292C	; 0x80292c <sigrow_gain>
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__umulhisi3>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	80 58       	subi	r24, 0x80	; 128
     5da:	9f 4f       	sbci	r25, 0xFF	; 255
     5dc:	af 4f       	sbci	r26, 0xFF	; 255
     5de:	bf 4f       	sbci	r27, 0xFF	; 255
     5e0:	89 2f       	mov	r24, r25
     5e2:	9a 2f       	mov	r25, r26
     5e4:	ab 2f       	mov	r26, r27
     5e6:	bb 27       	eor	r27, r27
     5e8:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <temperature>
     5ec:	90 93 46 29 	sts	0x2946, r25	; 0x802946 <temperature+0x1>
     5f0:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     5f4:	8e 7f       	andi	r24, 0xFE	; 254
     5f6:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     5fa:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     5fe:	80 61       	ori	r24, 0x10	; 16
     600:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     604:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     608:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     60c:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     610:	81 60       	ori	r24, 0x01	; 1
     612:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	08 95       	ret

00000620 <init>:
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	98 ed       	ldi	r25, 0xD8	; 216
     626:	94 bf       	out	0x34, r25	; 52
     628:	e0 e1       	ldi	r30, 0x10	; 16
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	80 81       	ld	r24, Z
     62e:	80 64       	ori	r24, 0x40	; 64
     630:	80 83       	st	Z, r24
     632:	80 81       	ld	r24, Z
     634:	81 60       	ori	r24, 0x01	; 1
     636:	80 83       	st	Z, r24
     638:	94 bf       	out	0x34, r25	; 52
     63a:	31 e0       	ldi	r19, 0x01	; 1
     63c:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
     640:	e0 e6       	ldi	r30, 0x60	; 96
     642:	f4 e0       	ldi	r31, 0x04	; 4
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	81 83       	std	Z+1, r24	; 0x01
     648:	90 e1       	ldi	r25, 0x10	; 16
     64a:	92 83       	std	Z+2, r25	; 0x02
     64c:	94 89       	ldd	r25, Z+20	; 0x14
     64e:	98 7f       	andi	r25, 0xF8	; 248
     650:	94 8b       	std	Z+20, r25	; 0x14
     652:	94 89       	ldd	r25, Z+20	; 0x14
     654:	92 60       	ori	r25, 0x02	; 2
     656:	94 8b       	std	Z+20, r25	; 0x14
     658:	94 89       	ldd	r25, Z+20	; 0x14
     65a:	97 7f       	andi	r25, 0xF7	; 247
     65c:	94 8b       	std	Z+20, r25	; 0x14
     65e:	a0 e0       	ldi	r26, 0x00	; 0
     660:	b4 e0       	ldi	r27, 0x04	; 4
     662:	90 e7       	ldi	r25, 0x70	; 112
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	9c 93       	st	X, r25
     668:	11 97       	sbiw	r26, 0x01	; 1
     66a:	16 96       	adiw	r26, 0x06	; 6
     66c:	9c 93       	st	X, r25
     66e:	16 97       	sbiw	r26, 0x06	; 6
     670:	11 96       	adiw	r26, 0x01	; 1
     672:	8c 93       	st	X, r24
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	16 96       	adiw	r26, 0x06	; 6
     678:	8c 93       	st	X, r24
     67a:	16 97       	sbiw	r26, 0x06	; 6
     67c:	90 e8       	ldi	r25, 0x80	; 128
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	9c 93       	st	X, r25
     682:	11 97       	sbiw	r26, 0x01	; 1
     684:	15 96       	adiw	r26, 0x05	; 5
     686:	9c 93       	st	X, r25
     688:	15 97       	sbiw	r26, 0x05	; 5
     68a:	c0 e4       	ldi	r28, 0x40	; 64
     68c:	d4 e0       	ldi	r29, 0x04	; 4
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	8d 83       	std	Y+5, r24	; 0x05
     694:	82 83       	std	Z+2, r24	; 0x02
     696:	22 89       	ldd	r18, Z+18	; 0x12
     698:	22 8b       	std	Z+18, r18	; 0x12
     69a:	20 e2       	ldi	r18, 0x20	; 32
     69c:	22 83       	std	Z+2, r18	; 0x02
     69e:	25 89       	ldd	r18, Z+21	; 0x15
     6a0:	28 7f       	andi	r18, 0xF8	; 248
     6a2:	25 8b       	std	Z+21, r18	; 0x15
     6a4:	25 89       	ldd	r18, Z+21	; 0x15
     6a6:	24 60       	ori	r18, 0x04	; 4
     6a8:	25 8b       	std	Z+21, r18	; 0x15
     6aa:	25 89       	ldd	r18, Z+21	; 0x15
     6ac:	27 7f       	andi	r18, 0xF7	; 247
     6ae:	25 8b       	std	Z+21, r18	; 0x15
     6b0:	20 e4       	ldi	r18, 0x40	; 64
     6b2:	22 83       	std	Z+2, r18	; 0x02
     6b4:	26 89       	ldd	r18, Z+22	; 0x16
     6b6:	28 7f       	andi	r18, 0xF8	; 248
     6b8:	26 8b       	std	Z+22, r18	; 0x16
     6ba:	26 89       	ldd	r18, Z+22	; 0x16
     6bc:	24 60       	ori	r18, 0x04	; 4
     6be:	26 8b       	std	Z+22, r18	; 0x16
     6c0:	26 89       	ldd	r18, Z+22	; 0x16
     6c2:	27 7f       	andi	r18, 0xF7	; 247
     6c4:	26 8b       	std	Z+22, r18	; 0x16
     6c6:	92 83       	std	Z+2, r25	; 0x02
     6c8:	97 89       	ldd	r25, Z+23	; 0x17
     6ca:	98 7f       	andi	r25, 0xF8	; 248
     6cc:	97 8b       	std	Z+23, r25	; 0x17
     6ce:	97 89       	ldd	r25, Z+23	; 0x17
     6d0:	94 60       	ori	r25, 0x04	; 4
     6d2:	97 8b       	std	Z+23, r25	; 0x17
     6d4:	97 89       	ldd	r25, Z+23	; 0x17
     6d6:	97 7f       	andi	r25, 0xF7	; 247
     6d8:	97 8b       	std	Z+23, r25	; 0x17
     6da:	32 83       	std	Z+2, r19	; 0x02
     6dc:	90 89       	ldd	r25, Z+16	; 0x10
     6de:	98 7f       	andi	r25, 0xF8	; 248
     6e0:	90 8b       	std	Z+16, r25	; 0x10
     6e2:	90 89       	ldd	r25, Z+16	; 0x10
     6e4:	94 60       	ori	r25, 0x04	; 4
     6e6:	90 8b       	std	Z+16, r25	; 0x10
     6e8:	90 89       	ldd	r25, Z+16	; 0x10
     6ea:	97 7f       	andi	r25, 0xF7	; 247
     6ec:	90 8b       	std	Z+16, r25	; 0x10
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	92 83       	std	Z+2, r25	; 0x02
     6f2:	91 89       	ldd	r25, Z+17	; 0x11
     6f4:	98 7f       	andi	r25, 0xF8	; 248
     6f6:	91 8b       	std	Z+17, r25	; 0x11
     6f8:	91 89       	ldd	r25, Z+17	; 0x11
     6fa:	94 60       	ori	r25, 0x04	; 4
     6fc:	91 8b       	std	Z+17, r25	; 0x11
     6fe:	91 89       	ldd	r25, Z+17	; 0x11
     700:	97 7f       	andi	r25, 0xF7	; 247
     702:	91 8b       	std	Z+17, r25	; 0x11
     704:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
     708:	11 96       	adiw	r26, 0x01	; 1
     70a:	8c 93       	st	X, r24
     70c:	11 97       	sbiw	r26, 0x01	; 1
     70e:	15 96       	adiw	r26, 0x05	; 5
     710:	8c 93       	st	X, r24
     712:	c0 e0       	ldi	r28, 0x00	; 0
     714:	da e0       	ldi	r29, 0x0A	; 10
     716:	88 81       	ld	r24, Y
     718:	87 60       	ori	r24, 0x07	; 7
     71a:	88 83       	st	Y, r24
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	87 60       	ori	r24, 0x07	; 7
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	8e 7f       	andi	r24, 0xFE	; 254
     726:	89 87       	std	Y+9, r24	; 0x09
     728:	81 e7       	ldi	r24, 0x71	; 113
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	8e ab       	std	Y+54, r24	; 0x36
     72e:	9f ab       	std	Y+55, r25	; 0x37
     730:	60 91 18 29 	lds	r22, 0x2918	; 0x802918 <dutyCycle>
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__floatsisf>
     73e:	2a e0       	ldi	r18, 0x0A	; 10
     740:	37 ed       	ldi	r19, 0xD7	; 215
     742:	43 e2       	ldi	r20, 0x23	; 35
     744:	5c e3       	ldi	r21, 0x3C	; 60
     746:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e4       	ldi	r19, 0x40	; 64
     74e:	4c e1       	ldi	r20, 0x1C	; 28
     750:	54 e4       	ldi	r21, 0x44	; 68
     752:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3>
     756:	0e 94 29 08 	call	0x1052	; 0x1052 <__fixunssfsi>
     75a:	6c af       	std	Y+60, r22	; 0x3c
     75c:	7d af       	std	Y+61, r23	; 0x3d
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	8f 7b       	andi	r24, 0xBF	; 191
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	e0 e8       	ldi	r30, 0x80	; 128
     766:	fa e0       	ldi	r31, 0x0A	; 10
     768:	80 81       	ld	r24, Z
     76a:	84 60       	ori	r24, 0x04	; 4
     76c:	80 83       	st	Z, r24
     76e:	81 81       	ldd	r24, Z+1	; 0x01
     770:	81 83       	std	Z+1, r24	; 0x01
     772:	84 81       	ldd	r24, Z+4	; 0x04
     774:	8e 7f       	andi	r24, 0xFE	; 254
     776:	84 83       	std	Z+4, r24	; 0x04
     778:	85 81       	ldd	r24, Z+5	; 0x05
     77a:	81 60       	ori	r24, 0x01	; 1
     77c:	85 83       	std	Z+5, r24	; 0x05
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	9f ef       	ldi	r25, 0xFF	; 255
     782:	84 87       	std	Z+12, r24	; 0x0c
     784:	95 87       	std	Z+13, r25	; 0x0d
     786:	80 81       	ld	r24, Z
     788:	81 60       	ori	r24, 0x01	; 1
     78a:	80 83       	st	Z, r24
     78c:	e0 e0       	ldi	r30, 0x00	; 0
     78e:	f1 e1       	ldi	r31, 0x11	; 17
     790:	81 a1       	ldd	r24, Z+33	; 0x21
     792:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <sigrow_offset>
     796:	80 a1       	ldd	r24, Z+32	; 0x20
     798:	80 93 2c 29 	sts	0x292C, r24	; 0x80292c <sigrow_gain>
     79c:	e0 ea       	ldi	r30, 0xA0	; 160
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	80 61       	ori	r24, 0x10	; 16
     7a4:	80 83       	st	Z, r24
     7a6:	81 81       	ldd	r24, Z+1	; 0x01
     7a8:	82 60       	ori	r24, 0x02	; 2
     7aa:	81 83       	std	Z+1, r24	; 0x01
     7ac:	e0 e0       	ldi	r30, 0x00	; 0
     7ae:	f6 e0       	ldi	r31, 0x06	; 6
     7b0:	82 81       	ldd	r24, Z+2	; 0x02
     7b2:	85 61       	ori	r24, 0x15	; 21
     7b4:	82 83       	std	Z+2, r24	; 0x02
     7b6:	83 81       	ldd	r24, Z+3	; 0x03
     7b8:	83 83       	std	Z+3, r24	; 0x03
     7ba:	85 e0       	ldi	r24, 0x05	; 5
     7bc:	85 83       	std	Z+5, r24	; 0x05
     7be:	82 81       	ldd	r24, Z+2	; 0x02
     7c0:	80 64       	ori	r24, 0x40	; 64
     7c2:	82 83       	std	Z+2, r24	; 0x02
     7c4:	80 81       	ld	r24, Z
     7c6:	81 60       	ori	r24, 0x01	; 1
     7c8:	80 83       	st	Z, r24
     7ca:	0e 94 de 07 	call	0xfbc	; 0xfbc <uart_init>
     7ce:	10 92 1c 2a 	sts	0x2A1C, r1	; 0x802a1c <rxbuffer+0x40>
     7d2:	10 92 1d 2a 	sts	0x2A1D, r1	; 0x802a1d <rxbuffer+0x41>
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <__vector_20>:
    ADC0.INTFLAGS = ADC_RESRDY_bm;
    return 0;
}            

/* ISR */
ISR(PORTD_PORT_vect) {    
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	8f 93       	push	r24
     7e8:	ef 93       	push	r30
     7ea:	ff 93       	push	r31
    rxbuffer.read = 0;
    rxbuffer.write = 0;
}

int8_t led_toggle() {
    PORTD.OUTTGL = LED;
     7ec:	e0 e6       	ldi	r30, 0x60	; 96
     7ee:	f4 e0       	ldi	r31, 0x04	; 4
     7f0:	88 e0       	ldi	r24, 0x08	; 8
     7f2:	87 83       	std	Z+7, r24	; 0x07
}            

/* ISR */
ISR(PORTD_PORT_vect) {    
    led_toggle();
    PORTD.INTFLAGS = PORT_INT4_bm;
     7f4:	80 e1       	ldi	r24, 0x10	; 16
     7f6:	81 87       	std	Z+9, r24	; 0x09
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	8f 91       	pop	r24
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <__vector_12>:

ISR(TCB0_INT_vect) {
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	11 24       	eor	r1, r1
     812:	2f 93       	push	r18
     814:	3f 93       	push	r19
     816:	4f 93       	push	r20
     818:	5f 93       	push	r21
     81a:	6f 93       	push	r22
     81c:	7f 93       	push	r23
     81e:	8f 93       	push	r24
     820:	9f 93       	push	r25
     822:	af 93       	push	r26
     824:	bf 93       	push	r27
     826:	ef 93       	push	r30
     828:	ff 93       	push	r31
    printf("Interrupt!\r\n");
     82a:	84 ed       	ldi	r24, 0xD4	; 212
     82c:	9b e5       	ldi	r25, 0x5B	; 91
     82e:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
    TCB0.INTFLAGS = TCB_CAPT_bm;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
}
     838:	ff 91       	pop	r31
     83a:	ef 91       	pop	r30
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_17>:

ISR(USART0_RXC_vect) {
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	ef 93       	push	r30
     86a:	ff 93       	push	r31
    char c = USART0_RXDATAL;
     86c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
    if ((c != '\r') && (c != '\n')) {
     870:	8d 30       	cpi	r24, 0x0D	; 13
     872:	c1 f0       	breq	.+48     	; 0x8a4 <__vector_17+0x4a>
     874:	e0 91 1d 2a 	lds	r30, 0x2A1D	; 0x802a1d <rxbuffer+0x41>
     878:	8a 30       	cpi	r24, 0x0A	; 10
     87a:	49 f0       	breq	.+18     	; 0x88e <__vector_17+0x34>
        rxbuffer.data[rxbuffer.write++] = c;
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9e 0f       	add	r25, r30
     880:	90 93 1d 2a 	sts	0x2A1D, r25	; 0x802a1d <rxbuffer+0x41>
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	e4 52       	subi	r30, 0x24	; 36
     888:	f6 4d       	sbci	r31, 0xD6	; 214
     88a:	80 83       	st	Z, r24
    }
    if (c == '\n') {
        rxbuffer.data[rxbuffer.write++] = '\0';
        rxflag = 1;
        }   
}
     88c:	0b c0       	rjmp	.+22     	; 0x8a4 <__vector_17+0x4a>
    char c = USART0_RXDATAL;
    if ((c != '\r') && (c != '\n')) {
        rxbuffer.data[rxbuffer.write++] = c;
    }
    if (c == '\n') {
        rxbuffer.data[rxbuffer.write++] = '\0';
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	8e 0f       	add	r24, r30
     892:	80 93 1d 2a 	sts	0x2A1D, r24	; 0x802a1d <rxbuffer+0x41>
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	e4 52       	subi	r30, 0x24	; 36
     89a:	f6 4d       	sbci	r31, 0xD6	; 214
     89c:	10 82       	st	Z, r1
        rxflag = 1;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 2b 29 	sts	0x292B, r24	; 0x80292b <rxflag>
        }   
}
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <main>:

/*
    Application
    *************************************************/
int main(void) {
    init();
     8b6:	0e 94 10 03 	call	0x620	; 0x620 <init>
    sei();
     8ba:	78 94       	sei
            rxflag = 0;
        }    
    }
#endif
#ifdef PRODUCTION
    access = 1;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 2e 29 	sts	0x292E, r24	; 0x80292e <access>
    DEBUG_PRINT("ACCESS BIT SET TO 1...\r\n");
     8c2:	80 ee       	ldi	r24, 0xE0	; 224
     8c4:	9b e5       	ldi	r25, 0x5B	; 91
     8c6:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
    DEBUG_PRINT("COMING UP INTO STATE A...\r\n");
     8ca:	88 ef       	ldi	r24, 0xF8	; 248
     8cc:	9b e5       	ldi	r25, 0x5B	; 91
     8ce:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
    init();
    sei();
    
    /* Main variables */
    uint8_t count = 0;
    uint8_t diodeCheck = 0;
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
int main(void) {
    init();
    sei();
    
    /* Main variables */
    uint8_t count = 0;
     8d4:	10 e0       	ldi	r17, 0x00	; 0
    while (1) {
        /* EVSE STATE A - No Vehicle connected */
        if (state == STATE_A) {
            /* Turn off PWM and set PWM output to static +12V*/
            pwm_off();
            PORTA.OUTSET = PWM_OUT;
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	e8 2e       	mov	r14, r24
                        pwm_on();
                        DEBUG_PRINT("STATE A -> B\r\n");
                    }
                }
                else {
                    nextState = STATE_B;
     8da:	02 e0       	ldi	r16, 0x02	; 2
                                /* TODO if no current available -> error |= NO_CURRENT */
                            }
                        }
                    }
                    else {
                        nextState = STATE_C;
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	f9 2e       	mov	r15, r25
    access = 1;
    DEBUG_PRINT("ACCESS BIT SET TO 1...\r\n");
    DEBUG_PRINT("COMING UP INTO STATE A...\r\n");
    while (1) {
        /* EVSE STATE A - No Vehicle connected */
        if (state == STATE_A) {
     8e0:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <state>
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	09 f0       	breq	.+2      	; 0x8ea <main+0x34>
     8e8:	4a c0       	rjmp	.+148    	; 0x97e <main+0xc8>
            /* Turn off PWM and set PWM output to static +12V*/
            pwm_off();
     8ea:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pwm_off>
            PORTA.OUTSET = PWM_OUT;
     8ee:	e0 92 05 04 	sts	0x0405, r14	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
            all_ssr_off();
     8f2:	0e 94 af 01 	call	0x35e	; 0x35e <all_ssr_off>
            readCP();
     8f6:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
            
            /* Check if vehicle disconnected / forced to State A and clear errors */
            if (pilot == PILOT_12V) {
     8fa:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <pilot>
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	41 f4       	brne	.+16     	; 0x912 <main+0x5c>
                error &= ~(LESS_MIN_CURRENT);
     902:	80 91 34 29 	lds	r24, 0x2934	; 0x802934 <error>
     906:	8e 7f       	andi	r24, 0xFE	; 254
     908:	80 93 34 29 	sts	0x2934, r24	; 0x802934 <error>
                chargeDelay = 0;
     90c:	10 92 0e 29 	sts	0x290E, r1	; 0x80290e <chargeDelay>
     910:	36 c0       	rjmp	.+108    	; 0x97e <main+0xc8>
            }
            
            /* Switch to State B? */
            if (pilot == PILOT_9V) {
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	a1 f5       	brne	.+104    	; 0x97e <main+0xc8>
                /* Access to charging is only permitted if access == 1 */
                if ((nextState == STATE_B) && access) {
     916:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     91a:	82 30       	cpi	r24, 0x02	; 2
     91c:	61 f5       	brne	.+88     	; 0x976 <main+0xc0>
     91e:	80 91 2e 29 	lds	r24, 0x292E	; 0x80292e <access>
     922:	88 23       	and	r24, r24
     924:	41 f1       	breq	.+80     	; 0x976 <main+0xc0>
                    /* Repeat 25 times to ensure all is OK */
                    if ((count++ > 25) && (error == NO_ERROR) && (chargeDelay == 0)) {
     926:	c1 e0       	ldi	r28, 0x01	; 1
     928:	c1 0f       	add	r28, r17
     92a:	1a 31       	cpi	r17, 0x1A	; 26
     92c:	48 f1       	brcs	.+82     	; 0x980 <main+0xca>
     92e:	80 91 34 29 	lds	r24, 0x2934	; 0x802934 <error>
     932:	81 11       	cpse	r24, r1
     934:	25 c0       	rjmp	.+74     	; 0x980 <main+0xca>
     936:	80 91 0e 29 	lds	r24, 0x290E	; 0x80290e <chargeDelay>
     93a:	81 11       	cpse	r24, r1
     93c:	21 c0       	rjmp	.+66     	; 0x980 <main+0xca>
                        diodeCheck = 0;
                        readPP();
     93e:	0e 94 02 02 	call	0x404	; 0x404 <readPP>
                        if (maxCurrent > maxCapacity) {
     942:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <maxCurrent>
     946:	90 91 33 29 	lds	r25, 0x2933	; 0x802933 <maxCapacity>
     94a:	98 17       	cp	r25, r24
     94c:	28 f4       	brcc	.+10     	; 0x958 <main+0xa2>
                            chargeCurrent = maxCapacity * 10;
     94e:	2a e0       	ldi	r18, 0x0A	; 10
     950:	92 9f       	mul	r25, r18
     952:	c0 01       	movw	r24, r0
     954:	11 24       	eor	r1, r1
     956:	01 c0       	rjmp	.+2      	; 0x95a <main+0xa4>
                        }
                        else {
                            chargeCurrent = maxCurrent;
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <chargeCurrent>
     95e:	90 93 59 29 	sts	0x2959, r25	; 0x802959 <chargeCurrent+0x1>
                        }
                        state = STATE_B;
     962:	00 93 10 29 	sts	0x2910, r16	; 0x802910 <state>
                        pwm_on();
     966:	0e 94 76 01 	call	0x2ec	; 0x2ec <pwm_on>
                        DEBUG_PRINT("STATE A -> B\r\n");
     96a:	83 e1       	ldi	r24, 0x13	; 19
     96c:	9c e5       	ldi	r25, 0x5C	; 92
     96e:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
            if (pilot == PILOT_9V) {
                /* Access to charging is only permitted if access == 1 */
                if ((nextState == STATE_B) && access) {
                    /* Repeat 25 times to ensure all is OK */
                    if ((count++ > 25) && (error == NO_ERROR) && (chargeDelay == 0)) {
                        diodeCheck = 0;
     972:	d0 e0       	ldi	r29, 0x00	; 0
     974:	05 c0       	rjmp	.+10     	; 0x980 <main+0xca>
                        pwm_on();
                        DEBUG_PRINT("STATE A -> B\r\n");
                    }
                }
                else {
                    nextState = STATE_B;
     976:	00 93 0f 29 	sts	0x290F, r16	; 0x80290f <nextState>
                    count = 0;
     97a:	c0 e0       	ldi	r28, 0x00	; 0
     97c:	01 c0       	rjmp	.+2      	; 0x980 <main+0xca>
     97e:	c1 2f       	mov	r28, r17
            } 
        }
        /* END OF STATE A */
        
        /* EVSE STATE B - Vehicle connected, not ready for charging */
        if (state == STATE_B) {
     980:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <state>
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	09 f0       	breq	.+2      	; 0x98a <main+0xd4>
     988:	71 c0       	rjmp	.+226    	; 0xa6c <main+0x1b6>
            /* Check at beginning of PWM period for high level */
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
     98a:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     98e:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     992:	02 97       	sbiw	r24, 0x02	; 2
     994:	08 f4       	brcc	.+2      	; 0x998 <main+0xe2>
     996:	46 c0       	rjmp	.+140    	; 0xa24 <main+0x16e>
     998:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     99c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     9a0:	4e 97       	sbiw	r24, 0x1e	; 30
     9a2:	08 f0       	brcs	.+2      	; 0x9a6 <main+0xf0>
     9a4:	3f c0       	rjmp	.+126    	; 0xa24 <main+0x16e>
                readCP();
     9a6:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
                /* Disconnected? */
                if (pilot == PILOT_12V) {
     9aa:	90 91 47 29 	lds	r25, 0x2947	; 0x802947 <pilot>
     9ae:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     9b2:	91 30       	cpi	r25, 0x01	; 1
     9b4:	81 f4       	brne	.+32     	; 0x9d6 <main+0x120>
                    if (nextState == STATE_A) {
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	59 f4       	brne	.+22     	; 0x9d0 <main+0x11a>
                        if (count++ > 25) {
     9ba:	11 e0       	ldi	r17, 0x01	; 1
     9bc:	1c 0f       	add	r17, r28
     9be:	ca 31       	cpi	r28, 0x1A	; 26
     9c0:	80 f1       	brcs	.+96     	; 0xa22 <main+0x16c>
                            state = STATE_A;
     9c2:	80 93 10 29 	sts	0x2910, r24	; 0x802910 <state>
                            DEBUG_PRINT("STATE B -> A\r\n");
     9c6:	81 e2       	ldi	r24, 0x21	; 33
     9c8:	9c e5       	ldi	r25, 0x5C	; 92
     9ca:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
     9ce:	29 c0       	rjmp	.+82     	; 0xa22 <main+0x16c>
                        }
                    }
                    else {
                        nextState = STATE_A;
     9d0:	90 93 0f 29 	sts	0x290F, r25	; 0x80290f <nextState>
     9d4:	1f c0       	rjmp	.+62     	; 0xa14 <main+0x15e>
                        count = 0;
                    }
                }
                else if (pilot == PILOT_6V) {
     9d6:	93 30       	cpi	r25, 0x03	; 3
     9d8:	f9 f4       	brne	.+62     	; 0xa18 <main+0x162>
                    if ((nextState == STATE_C) && (diodeCheck == 1)) {
     9da:	83 30       	cpi	r24, 0x03	; 3
     9dc:	c9 f4       	brne	.+50     	; 0xa10 <main+0x15a>
     9de:	d1 30       	cpi	r29, 0x01	; 1
     9e0:	b9 f4       	brne	.+46     	; 0xa10 <main+0x15a>
                        if (count++ > 25) {
     9e2:	11 e0       	ldi	r17, 0x01	; 1
     9e4:	1c 0f       	add	r17, r28
     9e6:	ca 31       	cpi	r28, 0x1A	; 26
     9e8:	e0 f0       	brcs	.+56     	; 0xa22 <main+0x16c>
                            if ((error == NO_ERROR) && (chargeDelay == 0)) {
     9ea:	80 91 34 29 	lds	r24, 0x2934	; 0x802934 <error>
     9ee:	81 11       	cpse	r24, r1
     9f0:	18 c0       	rjmp	.+48     	; 0xa22 <main+0x16c>
     9f2:	80 91 0e 29 	lds	r24, 0x290E	; 0x80290e <chargeDelay>
     9f6:	81 11       	cpse	r24, r1
     9f8:	14 c0       	rjmp	.+40     	; 0xa22 <main+0x16c>
                                /* TODO: check for available current */
                                /* TODO: calculate current */
                                all_ssr_on();
     9fa:	0e 94 a5 01 	call	0x34a	; 0x34a <all_ssr_on>
                                diodeCheck = 0;
                                state = STATE_C;
     9fe:	f0 92 10 29 	sts	0x2910, r15	; 0x802910 <state>
                                DEBUG_PRINT("STATE B -> C\r\n");
     a02:	8f e2       	ldi	r24, 0x2F	; 47
     a04:	9c e5       	ldi	r25, 0x5C	; 92
     a06:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
                        count = 0;
                    }
                }
                else if (pilot == PILOT_6V) {
                    if ((nextState == STATE_C) && (diodeCheck == 1)) {
                        if (count++ > 25) {
     a0a:	c1 2f       	mov	r28, r17
                            if ((error == NO_ERROR) && (chargeDelay == 0)) {
                                /* TODO: check for available current */
                                /* TODO: calculate current */
                                all_ssr_on();
                                diodeCheck = 0;
     a0c:	d0 e0       	ldi	r29, 0x00	; 0
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <main+0x16e>
                                /* TODO if no current available -> error |= NO_CURRENT */
                            }
                        }
                    }
                    else {
                        nextState = STATE_C;
     a10:	f0 92 0f 29 	sts	0x290F, r15	; 0x80290f <nextState>
                        count = 0;
     a14:	c0 e0       	ldi	r28, 0x00	; 0
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <main+0x16e>
                    }
                }
                /* PILOT_9V */
                else {
                    if (nextState == STATE_B) {
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	21 f0       	breq	.+8      	; 0xa24 <main+0x16e>
                        /* Either no current available or charging was finished -> Wait for EV to disconnect */
                    }
                    else {
                        /* No state to switch to */
                        nextState = 0;
     a1c:	10 92 0f 29 	sts	0x290F, r1	; 0x80290f <nextState>
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <main+0x16e>
                        count = 0;
                    }
                }
                else if (pilot == PILOT_6V) {
                    if ((nextState == STATE_C) && (diodeCheck == 1)) {
                        if (count++ > 25) {
     a22:	c1 2f       	mov	r28, r17
                        nextState = 0;
                    }
                }
            }
            /* Check at the end of PWM period for low level */
            if (TCA0.SINGLE.CNT > 550) {
     a24:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     a28:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     a2c:	87 32       	cpi	r24, 0x27	; 39
     a2e:	92 40       	sbci	r25, 0x02	; 2
     a30:	e8 f0       	brcs	.+58     	; 0xa6c <main+0x1b6>
                while (TCA0.SINGLE.CNT < 600);                              // Blocking, so low level is not missed at high duty cycles                  
     a32:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     a36:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     a3a:	88 35       	cpi	r24, 0x58	; 88
     a3c:	92 40       	sbci	r25, 0x02	; 2
     a3e:	c8 f3       	brcs	.-14     	; 0xa32 <main+0x17c>
	            if ((TCA0.SINGLE.CNT > 600) && (TCA0.SINGLE.CNT < 620)) {
     a40:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     a44:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     a48:	89 35       	cpi	r24, 0x59	; 89
     a4a:	92 40       	sbci	r25, 0x02	; 2
     a4c:	78 f0       	brcs	.+30     	; 0xa6c <main+0x1b6>
     a4e:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     a52:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     a56:	8c 36       	cpi	r24, 0x6C	; 108
     a58:	92 40       	sbci	r25, 0x02	; 2
     a5a:	40 f4       	brcc	.+16     	; 0xa6c <main+0x1b6>
	                readCP();
     a5c:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
     a60:	d1 e0       	ldi	r29, 0x01	; 1
     a62:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <pilot>
     a66:	84 30       	cpi	r24, 0x04	; 4
     a68:	09 f0       	breq	.+2      	; 0xa6c <main+0x1b6>
     a6a:	d0 e0       	ldi	r29, 0x00	; 0
            }
        }
        /* END OF STATE B */
        
        /* EVSE STATE C - Vehicle connected, ready for charging */
        if (state == STATE_C) {
     a6c:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <state>
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	09 f0       	breq	.+2      	; 0xa76 <main+0x1c0>
     a74:	44 c0       	rjmp	.+136    	; 0xafe <main+0x248>
            /* Measure CP at ~5% of PWM cycle */
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
     a76:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     a7a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     a7e:	02 97       	sbiw	r24, 0x02	; 2
     a80:	f0 f1       	brcs	.+124    	; 0xafe <main+0x248>
     a82:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     a86:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     a8a:	4e 97       	sbiw	r24, 0x1e	; 30
     a8c:	c0 f5       	brcc	.+112    	; 0xafe <main+0x248>
                readCP();
     a8e:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
                /* Disconnect or Error? */
                if ((pilot == PILOT_12V) || (pilot == PILOT_NOK)) {
     a92:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <pilot>
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	a0 f4       	brcc	.+40     	; 0xac2 <main+0x20c>
                    if (nextState == STATE_A) {
     a9a:	d0 90 0f 29 	lds	r13, 0x290F	; 0x80290f <nextState>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	d8 12       	cpse	r13, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <main+0x208>
                        if (count++ > 25) {
     aa4:	11 e0       	ldi	r17, 0x01	; 1
     aa6:	1c 0f       	add	r17, r28
     aa8:	ca 31       	cpi	r28, 0x1A	; 26
     aaa:	40 f1       	brcs	.+80     	; 0xafc <main+0x246>
                            all_ssr_off();
     aac:	0e 94 af 01 	call	0x35e	; 0x35e <all_ssr_off>
                            state = STATE_A;
     ab0:	d0 92 10 29 	sts	0x2910, r13	; 0x802910 <state>
                            DEBUG_PRINT("STATE C -> A\r\n");
     ab4:	8d e3       	ldi	r24, 0x3D	; 61
     ab6:	9c e5       	ldi	r25, 0x5C	; 92
     ab8:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
     abc:	1f c0       	rjmp	.+62     	; 0xafc <main+0x246>
                        }
                    }
                    else {
                        nextState = STATE_A;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	16 c0       	rjmp	.+44     	; 0xaee <main+0x238>
                        count = 0;
                    }
                }
                /* No charge requested by EV */
                else if (pilot == PILOT_9V) {
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	c1 f4       	brne	.+48     	; 0xaf6 <main+0x240>
                    if (nextState == STATE_B) {
     ac6:	d0 90 0f 29 	lds	r13, 0x290F	; 0x80290f <nextState>
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	d9 12       	cpse	r13, r25
     ace:	0f c0       	rjmp	.+30     	; 0xaee <main+0x238>
                        if (count++ > 25) {
     ad0:	11 e0       	ldi	r17, 0x01	; 1
     ad2:	1c 0f       	add	r17, r28
     ad4:	ca 31       	cpi	r28, 0x1A	; 26
     ad6:	90 f0       	brcs	.+36     	; 0xafc <main+0x246>
                            all_ssr_off();
     ad8:	0e 94 af 01 	call	0x35e	; 0x35e <all_ssr_off>
                            state = STATE_B;
     adc:	d0 92 10 29 	sts	0x2910, r13	; 0x802910 <state>
                            DEBUG_PRINT("STATE C -> B\r\n");
     ae0:	8b e4       	ldi	r24, 0x4B	; 75
     ae2:	9c e5       	ldi	r25, 0x5C	; 92
     ae4:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
                    }
                }
                /* No charge requested by EV */
                else if (pilot == PILOT_9V) {
                    if (nextState == STATE_B) {
                        if (count++ > 25) {
     ae8:	c1 2f       	mov	r28, r17
                            all_ssr_off();
                            state = STATE_B;
                            DEBUG_PRINT("STATE C -> B\r\n");
                            diodeCheck = 0;
     aea:	d0 e0       	ldi	r29, 0x00	; 0
     aec:	08 c0       	rjmp	.+16     	; 0xafe <main+0x248>
                        }
                    }
                    else {
                        nextState = STATE_B;
     aee:	80 93 0f 29 	sts	0x290F, r24	; 0x80290f <nextState>
                        count = 0;
     af2:	c0 e0       	ldi	r28, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <main+0x248>
                    }
                }
                /* No state to switch to */
                else {
                    nextState = 0; 
     af6:	10 92 0f 29 	sts	0x290F, r1	; 0x80290f <nextState>
     afa:	01 c0       	rjmp	.+2      	; 0xafe <main+0x248>
                    }
                }
                /* No charge requested by EV */
                else if (pilot == PILOT_9V) {
                    if (nextState == STATE_B) {
                        if (count++ > 25) {
     afc:	c1 2f       	mov	r28, r17
            }
        }
        /* END OF STATE C */
        
        /* UART reading and command parsing section */
        uart0_readLoop();
     afe:	0e 94 0a 08 	call	0x1014	; 0x1014 <uart0_readLoop>
        if (rxflag == 1) {
     b02:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <rxflag>
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	41 f4       	brne	.+16     	; 0xb1a <main+0x264>
            cmd_parse(input);
     b0a:	8a e5       	ldi	r24, 0x5A	; 90
     b0c:	99 e2       	ldi	r25, 0x29	; 41
     b0e:	0e 94 77 06 	call	0xcee	; 0xcee <cmd_parse>
            rxflag = 0;
     b12:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <rxflag>
            input[0] = '\0';
     b16:	10 92 5a 29 	sts	0x295A, r1	; 0x80295a <input>
        }
        
        /* Millisecond timer */
        if (TCB0.CNT >= 625) {
     b1a:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <__TEXT_REGION_LENGTH__+0x7f4a8a>
     b1e:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <__TEXT_REGION_LENGTH__+0x7f4a8b>
     b22:	81 37       	cpi	r24, 0x71	; 113
     b24:	92 40       	sbci	r25, 0x02	; 2
     b26:	b8 f0       	brcs	.+46     	; 0xb56 <main+0x2a0>
            systime++;
     b28:	80 91 41 29 	lds	r24, 0x2941	; 0x802941 <systime>
     b2c:	90 91 42 29 	lds	r25, 0x2942	; 0x802942 <systime+0x1>
     b30:	a0 91 43 29 	lds	r26, 0x2943	; 0x802943 <systime+0x2>
     b34:	b0 91 44 29 	lds	r27, 0x2944	; 0x802944 <systime+0x3>
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	a1 1d       	adc	r26, r1
     b3c:	b1 1d       	adc	r27, r1
     b3e:	80 93 41 29 	sts	0x2941, r24	; 0x802941 <systime>
     b42:	90 93 42 29 	sts	0x2942, r25	; 0x802942 <systime+0x1>
     b46:	a0 93 43 29 	sts	0x2943, r26	; 0x802943 <systime+0x2>
     b4a:	b0 93 44 29 	sts	0x2944, r27	; 0x802944 <systime+0x3>
            TCB0.CNT = 0;
     b4e:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__TEXT_REGION_LENGTH__+0x7f4a8a>
     b52:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__TEXT_REGION_LENGTH__+0x7f4a8b>
        }
        /* Seconds timer */
        if (systime >= 1000) {
     b56:	80 91 41 29 	lds	r24, 0x2941	; 0x802941 <systime>
     b5a:	90 91 42 29 	lds	r25, 0x2942	; 0x802942 <systime+0x1>
     b5e:	a0 91 43 29 	lds	r26, 0x2943	; 0x802943 <systime+0x2>
     b62:	b0 91 44 29 	lds	r27, 0x2944	; 0x802944 <systime+0x3>
     b66:	88 3e       	cpi	r24, 0xE8	; 232
     b68:	93 40       	sbci	r25, 0x03	; 3
     b6a:	a1 05       	cpc	r26, r1
     b6c:	b1 05       	cpc	r27, r1
     b6e:	10 f4       	brcc	.+4      	; 0xb74 <main+0x2be>
}

/*
    Application
    *************************************************/
int main(void) {
     b70:	1c 2f       	mov	r17, r28
     b72:	b6 ce       	rjmp	.-660    	; 0x8e0 <main+0x2a>
            systime++;
            TCB0.CNT = 0;
        }
        /* Seconds timer */
        if (systime >= 1000) {
            sectime++;
     b74:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <sectime>
     b78:	90 91 3e 29 	lds	r25, 0x293E	; 0x80293e <sectime+0x1>
     b7c:	a0 91 3f 29 	lds	r26, 0x293F	; 0x80293f <sectime+0x2>
     b80:	b0 91 40 29 	lds	r27, 0x2940	; 0x802940 <sectime+0x3>
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	a1 1d       	adc	r26, r1
     b88:	b1 1d       	adc	r27, r1
     b8a:	80 93 3d 29 	sts	0x293D, r24	; 0x80293d <sectime>
     b8e:	90 93 3e 29 	sts	0x293E, r25	; 0x80293e <sectime+0x1>
     b92:	a0 93 3f 29 	sts	0x293F, r26	; 0x80293f <sectime+0x2>
     b96:	b0 93 40 29 	sts	0x2940, r27	; 0x802940 <sectime+0x3>
     b9a:	ea cf       	rjmp	.-44     	; 0xb70 <main+0x2ba>

00000b9c <cmd_exec>:
 */

int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
    /* Find and execute command from cmd table */
    if (cmd_table[index].cmd_func_ptr != NULL) {       
     b9c:	24 e0       	ldi	r18, 0x04	; 4
     b9e:	82 9f       	mul	r24, r18
     ba0:	c0 01       	movw	r24, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	fc 01       	movw	r30, r24
     ba6:	e6 55       	subi	r30, 0x56	; 86
     ba8:	f7 4d       	sbci	r31, 0xD7	; 215
     baa:	02 80       	ldd	r0, Z+2	; 0x02
     bac:	f3 81       	ldd	r31, Z+3	; 0x03
     bae:	e0 2d       	mov	r30, r0
     bb0:	30 97       	sbiw	r30, 0x00	; 0
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <cmd_exec+0x1a>
        retval = cmd_table[index].cmd_func_ptr();
     bb4:	09 94       	ijmp
    }
    return retval;
}
     bb6:	8e ef       	ldi	r24, 0xFE	; 254
     bb8:	08 95       	ret

00000bba <param_get>:
        return retval;
    }
    return retval;
}

int8_t param_get(char *param_string, uint32_t *param_value) {
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	6c 01       	movw	r12, r24
     bce:	7b 01       	movw	r14, r22
    int8_t retval = -4;                                         // default return value -4 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
     bd0:	10 e0       	ldi	r17, 0x00	; 0
    }
    return retval;
}

int8_t param_get(char *param_string, uint32_t *param_value) {
    int8_t retval = -4;                                         // default return value -4 -> parameter not found
     bd2:	8c ef       	ldi	r24, 0xFC	; 252
     bd4:	b8 2e       	mov	r11, r24
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        if (strcmp((const char *)param_string, (const char *)param_table[i].param) == 0) {
     bd6:	05 e0       	ldi	r16, 0x05	; 5
     bd8:	01 9f       	mul	r16, r17
     bda:	e0 01       	movw	r28, r0
     bdc:	11 24       	eor	r1, r1
     bde:	c0 50       	subi	r28, 0x00	; 0
     be0:	d8 4d       	sbci	r29, 0xD8	; 216
     be2:	68 81       	ld	r22, Y
     be4:	79 81       	ldd	r23, Y+1	; 0x01
     be6:	c6 01       	movw	r24, r12
     be8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <strcmp>
     bec:	89 2b       	or	r24, r25
     bee:	11 f5       	brne	.+68     	; 0xc34 <param_get+0x7a>
            cli();
     bf0:	f8 94       	cli
            switch (param_table[i].size) {                      // cast pointer to the correct data type according to param table size info
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	80 31       	cpi	r24, 0x10	; 16
     bf6:	49 f0       	breq	.+18     	; 0xc0a <param_get+0x50>
     bf8:	80 32       	cpi	r24, 0x20	; 32
     bfa:	71 f0       	breq	.+28     	; 0xc18 <param_get+0x5e>
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	b9 f4       	brne	.+46     	; 0xc2e <param_get+0x74>
            case 8:
                *param_value = *(uint8_t *)param_table[i].value;
     c00:	ea 81       	ldd	r30, Y+2	; 0x02
     c02:	fb 81       	ldd	r31, Y+3	; 0x03
     c04:	80 81       	ld	r24, Z
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <param_get+0x58>
            	break;
            case 16:
                *param_value = *(uint16_t *)param_table[i].value;
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	a0 e0       	ldi	r26, 0x00	; 0
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <param_get+0x6a>
                break;
            case 32:
                *param_value = *(uint32_t *)param_table[i].value;
     c18:	ea 81       	ldd	r30, Y+2	; 0x02
     c1a:	fb 81       	ldd	r31, Y+3	; 0x03
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	a2 81       	ldd	r26, Z+2	; 0x02
     c22:	b3 81       	ldd	r27, Z+3	; 0x03
     c24:	f7 01       	movw	r30, r14
     c26:	80 83       	st	Z, r24
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	a2 83       	std	Z+2, r26	; 0x02
     c2c:	b3 83       	std	Z+3, r27	; 0x03
                break;               
            }
            sei();
     c2e:	78 94       	sei
            i = NO_PARAM;                                   // exit loop
     c30:	12 e2       	ldi	r17, 0x22	; 34
            retval = 0;
     c32:	b1 2c       	mov	r11, r1
    return retval;
}

int8_t param_get(char *param_string, uint32_t *param_value) {
    int8_t retval = -4;                                         // default return value -4 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
     c34:	1f 5f       	subi	r17, 0xFF	; 255
     c36:	12 32       	cpi	r17, 0x22	; 34
     c38:	78 f2       	brcs	.-98     	; 0xbd8 <param_get+0x1e>
            i = NO_PARAM;                                   // exit loop
            retval = 0;
        }
    }
    return retval;
}
     c3a:	8b 2d       	mov	r24, r11
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	08 95       	ret

00000c50 <param_set>:

int8_t param_set(char *param_string, void *param_new_val_ptr) {
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	6c 01       	movw	r12, r24
     c64:	7b 01       	movw	r14, r22
    int8_t retval = -4;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
     c66:	00 e0       	ldi	r16, 0x00	; 0
    }
    return retval;
}

int8_t param_set(char *param_string, void *param_new_val_ptr) {
    int8_t retval = -4;                                                     // default return value -2 -> parameter not found
     c68:	1c ef       	ldi	r17, 0xFC	; 252
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        if (strcmp(param_string, param_table[i].param) == 0) {
     c6a:	85 e0       	ldi	r24, 0x05	; 5
     c6c:	b8 2e       	mov	r11, r24
     c6e:	b0 9e       	mul	r11, r16
     c70:	e0 01       	movw	r28, r0
     c72:	11 24       	eor	r1, r1
     c74:	c0 50       	subi	r28, 0x00	; 0
     c76:	d8 4d       	sbci	r29, 0xD8	; 216
     c78:	68 81       	ld	r22, Y
     c7a:	79 81       	ldd	r23, Y+1	; 0x01
     c7c:	c6 01       	movw	r24, r12
     c7e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <strcmp>
     c82:	89 2b       	or	r24, r25
     c84:	31 f5       	brne	.+76     	; 0xcd2 <param_set+0x82>
            cli();
     c86:	f8 94       	cli
            switch (param_table[i].size) {                                           // cast pointer to the correct data type according to param table size info
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	80 31       	cpi	r24, 0x10	; 16
     c8c:	51 f0       	breq	.+20     	; 0xca2 <param_set+0x52>
     c8e:	80 32       	cpi	r24, 0x20	; 32
     c90:	81 f0       	breq	.+32     	; 0xcb2 <param_set+0x62>
     c92:	88 30       	cpi	r24, 0x08	; 8
     c94:	d9 f4       	brne	.+54     	; 0xccc <param_set+0x7c>
            case 8:
                *(uint8_t *)param_table[i].value = *(uint8_t *)param_new_val_ptr;
     c96:	ea 81       	ldd	r30, Y+2	; 0x02
     c98:	fb 81       	ldd	r31, Y+3	; 0x03
     c9a:	d7 01       	movw	r26, r14
     c9c:	8c 91       	ld	r24, X
     c9e:	80 83       	st	Z, r24
     ca0:	13 c0       	rjmp	.+38     	; 0xcc8 <param_set+0x78>
                retval = 0;
            	break;
            case 16:
                *(uint16_t *)param_table[i].value = *(uint16_t *)param_new_val_ptr;
     ca2:	f7 01       	movw	r30, r14
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	ea 81       	ldd	r30, Y+2	; 0x02
     caa:	fb 81       	ldd	r31, Y+3	; 0x03
     cac:	80 83       	st	Z, r24
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <param_set+0x78>
                retval = 0;
                break;
            case 32:
                *(uint32_t *)param_table[i].value = *(uint32_t *)param_new_val_ptr;
     cb2:	f7 01       	movw	r30, r14
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	a2 81       	ldd	r26, Z+2	; 0x02
     cba:	b3 81       	ldd	r27, Z+3	; 0x03
     cbc:	ea 81       	ldd	r30, Y+2	; 0x02
     cbe:	fb 81       	ldd	r31, Y+3	; 0x03
     cc0:	80 83       	st	Z, r24
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	a2 83       	std	Z+2, r26	; 0x02
     cc6:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
     cc8:	10 e0       	ldi	r17, 0x00	; 0
                break; 
     cca:	01 c0       	rjmp	.+2      	; 0xcce <param_set+0x7e>
            default:
                retval = -3;                                                // default return value -3 -> invalid value size               
     ccc:	1d ef       	ldi	r17, 0xFD	; 253
            }
            sei();
     cce:	78 94       	sei
            i = NO_PARAM;                                               // exit loop
     cd0:	02 e2       	ldi	r16, 0x22	; 34
    return retval;
}

int8_t param_set(char *param_string, void *param_new_val_ptr) {
    int8_t retval = -4;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
     cd2:	0f 5f       	subi	r16, 0xFF	; 255
     cd4:	02 32       	cpi	r16, 0x22	; 34
     cd6:	58 f2       	brcs	.-106    	; 0xc6e <param_set+0x1e>
            sei();
            i = NO_PARAM;                                               // exit loop
        }
    }
    return retval;
}
     cd8:	81 2f       	mov	r24, r17
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	08 95       	ret

00000cee <cmd_parse>:
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}

int8_t cmd_parse(char *string) {
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	28 97       	sbiw	r28, 0x08	; 8
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	8c 01       	movw	r16, r24
    int8_t retval = -1;                                 // set initial return value to -1 -> no valid command
    char *command = string;
    char *param = NULL;
    uint8_t is_param_op = 0;
    if (strcmp((const char *)string, "??") == 0) {
     d08:	6a e4       	ldi	r22, 0x4A	; 74
     d0a:	7e e5       	ldi	r23, 0x5E	; 94
     d0c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <strcmp>
     d10:	89 2b       	or	r24, r25
     d12:	09 f4       	brne	.+2      	; 0xd16 <cmd_parse+0x28>
     d14:	78 c0       	rjmp	.+240    	; 0xe06 <cmd_parse+0x118>
        command = "status";
    }
    /* Command is GET ("<param>?")*/
    else if (strchr(string, CMD_GET) != NULL) {                                         
     d16:	6f e3       	ldi	r22, 0x3F	; 63
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	c8 01       	movw	r24, r16
     d1c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <strchr>
     d20:	89 2b       	or	r24, r25
     d22:	41 f1       	breq	.+80     	; 0xd74 <cmd_parse+0x86>
        command = "param_get";                      
        param = strtok(string, "?");
     d24:	6b e4       	ldi	r22, 0x4B	; 75
     d26:	7e e5       	ldi	r23, 0x5E	; 94
     d28:	c8 01       	movw	r24, r16
     d2a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <strtok>
     d2e:	e8 2e       	mov	r14, r24
     d30:	d9 2e       	mov	r13, r25
        is_param_op = 1;
        uint32_t param_val = 0;
     d32:	19 82       	std	Y+1, r1	; 0x01
     d34:	1a 82       	std	Y+2, r1	; 0x02
     d36:	1b 82       	std	Y+3, r1	; 0x03
     d38:	1c 82       	std	Y+4, r1	; 0x04
        retval = param_get(param, &param_val);
     d3a:	be 01       	movw	r22, r28
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	0e 94 dd 05 	call	0xbba	; 0xbba <param_get>
     d44:	f8 2e       	mov	r15, r24
        if (retval == 0) {
     d46:	81 11       	cpse	r24, r1
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <cmd_parse+0x80>
            printf("%s = %"PRIu32"\r\n", param, param_val);               
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	8f 93       	push	r24
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	8f 93       	push	r24
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	8f 93       	push	r24
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	8f 93       	push	r24
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	8a e4       	ldi	r24, 0x4A	; 74
     d60:	9f e5       	ldi	r25, 0x5F	; 95
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	0e 94 a0 0a 	call	0x1540	; 0x1540 <printf>
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	de bf       	out	0x3e, r29	; 62
    if (strcmp((const char *)string, "??") == 0) {
        command = "status";
    }
    /* Command is GET ("<param>?")*/
    else if (strchr(string, CMD_GET) != NULL) {                                         
        command = "param_get";                      
     d6e:	08 e7       	ldi	r16, 0x78	; 120
     d70:	1d e5       	ldi	r17, 0x5D	; 93
     d72:	67 c0       	rjmp	.+206    	; 0xe42 <cmd_parse+0x154>
        if (retval == 0) {
            printf("%s = %"PRIu32"\r\n", param, param_val);               
        }        
    } 
    /* Command is SET ("<param>=<new_value>") */
    else if (strchr(string, CMD_SET) != NULL) {
     d74:	6d e3       	ldi	r22, 0x3D	; 61
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	c8 01       	movw	r24, r16
     d7a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <strchr>
     d7e:	89 2b       	or	r24, r25
     d80:	09 f4       	brne	.+2      	; 0xd84 <cmd_parse+0x96>
     d82:	43 c0       	rjmp	.+134    	; 0xe0a <cmd_parse+0x11c>
        command = "param_set";
        is_param_op = 1;
        param = strtok(string, "=");
     d84:	6d e4       	ldi	r22, 0x4D	; 77
     d86:	7e e5       	ldi	r23, 0x5E	; 94
     d88:	c8 01       	movw	r24, r16
     d8a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <strtok>
     d8e:	e8 2e       	mov	r14, r24
     d90:	d9 2e       	mov	r13, r25
        char *str_value = strtok(NULL, "=");
     d92:	6d e4       	ldi	r22, 0x4D	; 77
     d94:	7e e5       	ldi	r23, 0x5E	; 94
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <strtok>
        uint32_t value = (uint32_t)strtoul(str_value, NULL, 0);
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <strtoul>
     daa:	6d 83       	std	Y+5, r22	; 0x05
     dac:	7e 83       	std	Y+6, r23	; 0x06
     dae:	8f 83       	std	Y+7, r24	; 0x07
     db0:	98 87       	std	Y+8, r25	; 0x08
        retval = param_set(param, &value);
     db2:	be 01       	movw	r22, r28
     db4:	6b 5f       	subi	r22, 0xFB	; 251
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	8e 2d       	mov	r24, r14
     dba:	9d 2d       	mov	r25, r13
     dbc:	0e 94 28 06 	call	0xc50	; 0xc50 <param_set>
     dc0:	f8 2e       	mov	r15, r24
        if (retval == 0) {
     dc2:	81 11       	cpse	r24, r1
     dc4:	1d c0       	rjmp	.+58     	; 0xe00 <cmd_parse+0x112>
            uint32_t param_val = 0;
     dc6:	19 82       	std	Y+1, r1	; 0x01
     dc8:	1a 82       	std	Y+2, r1	; 0x02
     dca:	1b 82       	std	Y+3, r1	; 0x03
     dcc:	1c 82       	std	Y+4, r1	; 0x04
            param_get(param, &param_val);        
     dce:	be 01       	movw	r22, r28
     dd0:	6f 5f       	subi	r22, 0xFF	; 255
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	8e 2d       	mov	r24, r14
     dd6:	9d 2d       	mov	r25, r13
     dd8:	0e 94 dd 05 	call	0xbba	; 0xbba <param_get>
            printf("%s = %"PRIu32"\r\n", param, param_val);
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	8f 93       	push	r24
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	8f 93       	push	r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	8f 93       	push	r24
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	8f 93       	push	r24
     dec:	df 92       	push	r13
     dee:	ef 92       	push	r14
     df0:	8a e4       	ldi	r24, 0x4A	; 74
     df2:	9f e5       	ldi	r25, 0x5F	; 95
     df4:	9f 93       	push	r25
     df6:	8f 93       	push	r24
     df8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <printf>
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	de bf       	out	0x3e, r29	; 62
            printf("%s = %"PRIu32"\r\n", param, param_val);               
        }        
    } 
    /* Command is SET ("<param>=<new_value>") */
    else if (strchr(string, CMD_SET) != NULL) {
        command = "param_set";
     e00:	02 e8       	ldi	r16, 0x82	; 130
     e02:	1d e5       	ldi	r17, 0x5D	; 93
     e04:	1e c0       	rjmp	.+60     	; 0xe42 <cmd_parse+0x154>
    int8_t retval = -1;                                 // set initial return value to -1 -> no valid command
    char *command = string;
    char *param = NULL;
    uint8_t is_param_op = 0;
    if (strcmp((const char *)string, "??") == 0) {
        command = "status";
     e06:	01 e7       	ldi	r16, 0x71	; 113
     e08:	1d e5       	ldi	r17, 0x5D	; 93
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}

int8_t cmd_parse(char *string) {
     e0a:	e1 2c       	mov	r14, r1
     e0c:	ff 24       	eor	r15, r15
     e0e:	fa 94       	dec	r15
            printf("%s = %"PRIu32"\r\n", param, param_val);
        }
    }
    if (is_param_op == 0) {        
	    for (uint8_t i = 0; i < NO_CMD; i++) {
            if (strcmp(command, cmd_table[i].cmd) == 0) {
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	e9 9e       	mul	r14, r25
     e14:	f0 01       	movw	r30, r0
     e16:	11 24       	eor	r1, r1
     e18:	e6 55       	subi	r30, 0x56	; 86
     e1a:	f7 4d       	sbci	r31, 0xD7	; 215
     e1c:	60 81       	ld	r22, Z
     e1e:	71 81       	ldd	r23, Z+1	; 0x01
     e20:	c8 01       	movw	r24, r16
     e22:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <strcmp>
     e26:	89 2b       	or	r24, r25
     e28:	31 f4       	brne	.+12     	; 0xe36 <cmd_parse+0x148>
                retval = cmd_exec(i);
     e2a:	8e 2d       	mov	r24, r14
     e2c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <cmd_exec>
     e30:	f8 2e       	mov	r15, r24
                i = NO_CMD;                             // exit loop
     e32:	89 e1       	ldi	r24, 0x19	; 25
     e34:	e8 2e       	mov	r14, r24
            param_get(param, &param_val);        
            printf("%s = %"PRIu32"\r\n", param, param_val);
        }
    }
    if (is_param_op == 0) {        
	    for (uint8_t i = 0; i < NO_CMD; i++) {
     e36:	e3 94       	inc	r14
     e38:	88 e1       	ldi	r24, 0x18	; 24
     e3a:	8e 15       	cp	r24, r14
     e3c:	48 f7       	brcc	.-46     	; 0xe10 <cmd_parse+0x122>
     e3e:	e1 2c       	mov	r14, r1
     e40:	d1 2c       	mov	r13, r1
                i = NO_CMD;                             // exit loop
            }
	    } 
    }
    
    switch (retval) {                                   // select appropriate feedback to return
     e42:	9e ef       	ldi	r25, 0xFE	; 254
     e44:	f9 16       	cp	r15, r25
     e46:	e1 f0       	breq	.+56     	; 0xe80 <cmd_parse+0x192>
     e48:	9f 15       	cp	r25, r15
     e4a:	5c f0       	brlt	.+22     	; 0xe62 <cmd_parse+0x174>
     e4c:	8c ef       	ldi	r24, 0xFC	; 252
     e4e:	f8 16       	cp	r15, r24
     e50:	e1 f0       	breq	.+56     	; 0xe8a <cmd_parse+0x19c>
     e52:	9d ef       	ldi	r25, 0xFD	; 253
     e54:	f9 12       	cpse	r15, r25
     e56:	25 c0       	rjmp	.+74     	; 0xea2 <cmd_parse+0x1b4>
    	return retval;
    case -2:
        printf("FAIL. Failed to execute command %s!\r\n", command);
        return retval;
    case -3:
        printf("FAIL. Invalid options/parameters for command %s!\r\n", command);
     e58:	1f 93       	push	r17
     e5a:	0f 93       	push	r16
     e5c:	84 ea       	ldi	r24, 0xA4	; 164
     e5e:	9e e5       	ldi	r25, 0x5E	; 94
     e60:	18 c0       	rjmp	.+48     	; 0xe92 <cmd_parse+0x1a4>
                i = NO_CMD;                             // exit loop
            }
	    } 
    }
    
    switch (retval) {                                   // select appropriate feedback to return
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	f8 16       	cp	r15, r24
     e66:	39 f0       	breq	.+14     	; 0xe76 <cmd_parse+0x188>
     e68:	f1 10       	cpse	r15, r1
     e6a:	1b c0       	rjmp	.+54     	; 0xea2 <cmd_parse+0x1b4>
        return retval;
    case -4:
        printf("FAIL. Parameter %s not found in parameter table!\r\n", param);
        return retval;
    case 0:
        printf("OK.\r\n");
     e6c:	8a e0       	ldi	r24, 0x0A	; 10
     e6e:	9f e5       	ldi	r25, 0x5F	; 95
     e70:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
        return retval;
     e74:	16 c0       	rjmp	.+44     	; 0xea2 <cmd_parse+0x1b4>
	    } 
    }
    
    switch (retval) {                                   // select appropriate feedback to return
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", command);
     e76:	1f 93       	push	r17
     e78:	0f 93       	push	r16
     e7a:	8f e4       	ldi	r24, 0x4F	; 79
     e7c:	9e e5       	ldi	r25, 0x5E	; 94
     e7e:	09 c0       	rjmp	.+18     	; 0xe92 <cmd_parse+0x1a4>
    	return retval;
    case -2:
        printf("FAIL. Failed to execute command %s!\r\n", command);
     e80:	1f 93       	push	r17
     e82:	0f 93       	push	r16
     e84:	8e e7       	ldi	r24, 0x7E	; 126
     e86:	9e e5       	ldi	r25, 0x5E	; 94
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <cmd_parse+0x1a4>
        return retval;
    case -3:
        printf("FAIL. Invalid options/parameters for command %s!\r\n", command);
        return retval;
    case -4:
        printf("FAIL. Parameter %s not found in parameter table!\r\n", param);
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	87 ed       	ldi	r24, 0xD7	; 215
     e90:	9e e5       	ldi	r25, 0x5E	; 94
     e92:	9f 93       	push	r25
     e94:	8f 93       	push	r24
     e96:	0e 94 a0 0a 	call	0x1540	; 0x1540 <printf>
        return retval;
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
    case 0:
        printf("OK.\r\n");
        return retval;
    }
    return retval;
}
     ea2:	8f 2d       	mov	r24, r15
     ea4:	28 96       	adiw	r28, 0x08	; 8
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	08 95       	ret

00000eba <sys_status>:
        }
    }
    return retval;
}

int8_t sys_status() {
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <sys_status+0x12>
     ecc:	00 d0       	rcall	.+0      	; 0xece <sys_status+0x14>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
    printf("$ Available commands:\r\n");                      // print all defined commands in cmd table
     ed2:	8f e0       	ldi	r24, 0x0F	; 15
     ed4:	9f e5       	ldi	r25, 0x5F	; 95
     ed6:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
     eda:	0a ea       	ldi	r16, 0xAA	; 170
     edc:	18 e2       	ldi	r17, 0x28	; 40
    for (uint8_t i = 0; i < NO_CMD; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("$ %s\r\n", cmd);
     ede:	26 e2       	ldi	r18, 0x26	; 38
     ee0:	e2 2e       	mov	r14, r18
     ee2:	2f e5       	ldi	r18, 0x5F	; 95
     ee4:	f2 2e       	mov	r15, r18
}

int8_t sys_status() {
    printf("$ Available commands:\r\n");                      // print all defined commands in cmd table
    for (uint8_t i = 0; i < NO_CMD; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
     ee6:	d8 01       	movw	r26, r16
     ee8:	ed 91       	ld	r30, X+
     eea:	fc 91       	ld	r31, X
        if (strcmp(cmd, "\0") != 0) {
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	51 f0       	breq	.+20     	; 0xf06 <sys_status+0x4c>
            printf("$ %s\r\n", cmd);
     ef2:	ff 93       	push	r31
     ef4:	ef 93       	push	r30
     ef6:	ff 92       	push	r15
     ef8:	ef 92       	push	r14
     efa:	0e 94 a0 0a 	call	0x1540	; 0x1540 <printf>
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0c 5f       	subi	r16, 0xFC	; 252
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
    return retval;
}

int8_t sys_status() {
    printf("$ Available commands:\r\n");                      // print all defined commands in cmd table
    for (uint8_t i = 0; i < NO_CMD; i++) {
     f0a:	b9 e2       	ldi	r27, 0x29	; 41
     f0c:	0e 30       	cpi	r16, 0x0E	; 14
     f0e:	1b 07       	cpc	r17, r27
     f10:	51 f7       	brne	.-44     	; 0xee6 <sys_status+0x2c>
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("$ %s\r\n", cmd);
        }
    }
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
     f12:	8d e2       	ldi	r24, 0x2D	; 45
     f14:	9f e5       	ldi	r25, 0x5F	; 95
     f16:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	e8 2e       	mov	r14, r24
     f1e:	88 e2       	ldi	r24, 0x28	; 40
     f20:	f8 2e       	mov	r15, r24
     f22:	00 e0       	ldi	r16, 0x00	; 0
     f24:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        uint32_t param_value = 0;
        if (strcmp((const char *)param_table[i].param, "\0") != 0) {
            param_get(param_table[i].param, &param_value);
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
     f26:	94 e4       	ldi	r25, 0x44	; 68
     f28:	c9 2e       	mov	r12, r25
     f2a:	9f e5       	ldi	r25, 0x5F	; 95
     f2c:	d9 2e       	mov	r13, r25
            printf("$ %s\r\n", cmd);
        }
    }
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        uint32_t param_value = 0;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	1a 82       	std	Y+2, r1	; 0x02
     f32:	1b 82       	std	Y+3, r1	; 0x03
     f34:	1c 82       	std	Y+4, r1	; 0x04
        if (strcmp((const char *)param_table[i].param, "\0") != 0) {
     f36:	f7 01       	movw	r30, r14
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	dc 01       	movw	r26, r24
     f3e:	2c 91       	ld	r18, X
     f40:	22 23       	and	r18, r18
     f42:	d1 f0       	breq	.+52     	; 0xf78 <sys_status+0xbe>
            param_get(param_table[i].param, &param_value);
     f44:	be 01       	movw	r22, r28
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	0e 94 dd 05 	call	0xbba	; 0xbba <param_get>
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	8f 93       	push	r24
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	8f 93       	push	r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	8f 93       	push	r24
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	8f 93       	push	r24
     f5e:	f7 01       	movw	r30, r14
     f60:	81 81       	ldd	r24, Z+1	; 0x01
     f62:	8f 93       	push	r24
     f64:	80 81       	ld	r24, Z
     f66:	8f 93       	push	r24
     f68:	1f 93       	push	r17
     f6a:	0f 93       	push	r16
     f6c:	df 92       	push	r13
     f6e:	cf 92       	push	r12
     f70:	0e 94 a0 0a 	call	0x1540	; 0x1540 <printf>
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f 5f       	subi	r16, 0xFF	; 255
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	95 e0       	ldi	r25, 0x05	; 5
     f7e:	e9 0e       	add	r14, r25
     f80:	f1 1c       	adc	r15, r1
        if (strcmp(cmd, "\0") != 0) {
            printf("$ %s\r\n", cmd);
        }
    }
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
    for (uint8_t i = 0; i < NO_PARAM; i++) {
     f82:	02 32       	cpi	r16, 0x22	; 34
     f84:	11 05       	cpc	r17, r1
     f86:	99 f6       	brne	.-90     	; 0xf2e <sys_status+0x74>
            param_get(param_table[i].param, &param_value);
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
        }

    }
    printf("$ Status message end #\r\n");
     f88:	85 e5       	ldi	r24, 0x55	; 85
     f8a:	9f e5       	ldi	r25, 0x5F	; 95
     f8c:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
    return 0;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	24 96       	adiw	r28, 0x04	; 4
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	08 95       	ret

00000faa <uart0_printChar>:
    USART1.TXDATAL = c;
    while (!(USART1.STATUS & USART_DREIF_bm)) {     // Check for completed transmission
        ;
    }
    /* Return to receiver mode */
    PORTC.OUTCLR = PIN3_bm;
     faa:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
     fae:	95 ff       	sbrs	r25, 5
     fb0:	fc cf       	rjmp	.-8      	; 0xfaa <uart0_printChar>
     fb2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	08 95       	ret

00000fbc <uart_init>:
    Function definitions
    *************************************************/
void uart_init() {
    /* Setup stream for printf() */  
    #if USART_SEL == 0
        stdout = &uart0_stream;
     fbc:	89 e1       	ldi	r24, 0x19	; 25
     fbe:	99 e2       	ldi	r25, 0x29	; 41
     fc0:	80 93 20 2a 	sts	0x2A20, r24	; 0x802a20 <__iob+0x2>
     fc4:	90 93 21 2a 	sts	0x2A21, r25	; 0x802a21 <__iob+0x3>
        stdout = &uart1_stream;
    #endif
    
    /* USART0 Config (Main comms and debug interface) */
    /* Baud rate */
    USART0.BAUD = (uint16_t)USART_BAUD_RATE(BAUD0);
     fc8:	e0 e0       	ldi	r30, 0x00	; 0
     fca:	f8 e0       	ldi	r31, 0x08	; 8
     fcc:	8b e5       	ldi	r24, 0x5B	; 91
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	80 87       	std	Z+8, r24	; 0x08
     fd2:	91 87       	std	Z+9, r25	; 0x09
    /* Enable interrupts */
    USART0.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm);
     fd4:	85 81       	ldd	r24, Z+5	; 0x05
     fd6:	80 6e       	ori	r24, 0xE0	; 224
     fd8:	85 83       	std	Z+5, r24	; 0x05
    /* Enable TX & RX */
    USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);
     fda:	86 81       	ldd	r24, Z+6	; 0x06
     fdc:	80 6c       	ori	r24, 0xC0	; 192
     fde:	86 83       	std	Z+6, r24	; 0x06
    /* Set TX(PA0) to output, RX(PA1) to input */
    PORTA.DIRSET = PIN0_bm;
     fe0:	e0 e0       	ldi	r30, 0x00	; 0
     fe2:	f4 e0       	ldi	r31, 0x04	; 4
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	21 83       	std	Z+1, r18	; 0x01
    PORTA.DIRCLR = PIN1_bm;
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	92 83       	std	Z+2, r25	; 0x02
                                               

    
    /* USART1 Config (RS485 interface) */
    /* Baud rate */
    USART1.BAUD = (uint16_t)USART_BAUD_RATE(BAUD1);
     fec:	e0 e2       	ldi	r30, 0x20	; 32
     fee:	f8 e0       	ldi	r31, 0x08	; 8
     ff0:	47 e4       	ldi	r20, 0x47	; 71
     ff2:	50 e1       	ldi	r21, 0x10	; 16
     ff4:	40 87       	std	Z+8, r20	; 0x08
     ff6:	51 87       	std	Z+9, r21	; 0x09
    /* Enable interrupts */
    USART1.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm | USART_RS485_EXT_gc); 
     ff8:	85 81       	ldd	r24, Z+5	; 0x05
     ffa:	81 6e       	ori	r24, 0xE1	; 225
     ffc:	85 83       	std	Z+5, r24	; 0x05
    /* Enable TX & RX */    
    USART1.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);   
     ffe:	86 81       	ldd	r24, Z+6	; 0x06
    1000:	80 6c       	ori	r24, 0xC0	; 192
    1002:	86 83       	std	Z+6, r24	; 0x06
    /* Set TX(PC0) and XDIR(PC3) to output, RX(PC1) to input. XDIR low ->  Receiver mode */                     
    PORTC.DIRSET = PIN0_bm;                                              
    1004:	e0 e4       	ldi	r30, 0x40	; 64
    1006:	f4 e0       	ldi	r31, 0x04	; 4
    1008:	21 83       	std	Z+1, r18	; 0x01
    PORTC.DIRCLR = PIN1_bm;                                                
    100a:	92 83       	std	Z+2, r25	; 0x02
    PORTC.DIRSET = PIN3_bm;                                                
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	81 83       	std	Z+1, r24	; 0x01
    PORTC.OUTCLR = PIN3_bm;
    1010:	86 83       	std	Z+6, r24	; 0x06
    1012:	08 95       	ret

00001014 <uart0_readLoop>:
    }
    return USART0.RXDATAL;
}

void uart0_readLoop(){
    if (USART0.STATUS & USART_RXCIF_bm) {
    1014:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
    1018:	87 ff       	sbrs	r24, 7
    101a:	1a c0       	rjmp	.+52     	; 0x1050 <uart0_readLoop+0x3c>
        char c = USART0.RXDATAL;
    101c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
        if ((c != '\r') && (c != '\n')) {
    1020:	8d 30       	cpi	r24, 0x0D	; 13
    1022:	b1 f0       	breq	.+44     	; 0x1050 <uart0_readLoop+0x3c>
    1024:	e0 91 2a 29 	lds	r30, 0x292A	; 0x80292a <idx>
    1028:	8a 30       	cpi	r24, 0x0A	; 10
    102a:	49 f0       	breq	.+18     	; 0x103e <uart0_readLoop+0x2a>
            input[idx++] = c;    
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	9e 0f       	add	r25, r30
    1030:	90 93 2a 29 	sts	0x292A, r25	; 0x80292a <idx>
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	e6 5a       	subi	r30, 0xA6	; 166
    1038:	f6 4d       	sbci	r31, 0xD6	; 214
    103a:	80 83       	st	Z, r24
            input[idx] = '\0';
            idx = 0;
            rxflag = 1;
        }        
    }
}
    103c:	08 95       	ret
        char c = USART0.RXDATAL;
        if ((c != '\r') && (c != '\n')) {
            input[idx++] = c;    
        }
        if (c == '\n') {
            input[idx] = '\0';
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	e6 5a       	subi	r30, 0xA6	; 166
    1042:	f6 4d       	sbci	r31, 0xD6	; 214
    1044:	10 82       	st	Z, r1
            idx = 0;
    1046:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <idx>
            rxflag = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	80 93 2b 29 	sts	0x292B, r24	; 0x80292b <rxflag>
    1050:	08 95       	ret

00001052 <__fixunssfsi>:
    1052:	0e 94 9d 08 	call	0x113a	; 0x113a <__fp_splitA>
    1056:	88 f0       	brcs	.+34     	; 0x107a <__fixunssfsi+0x28>
    1058:	9f 57       	subi	r25, 0x7F	; 127
    105a:	98 f0       	brcs	.+38     	; 0x1082 <__fixunssfsi+0x30>
    105c:	b9 2f       	mov	r27, r25
    105e:	99 27       	eor	r25, r25
    1060:	b7 51       	subi	r27, 0x17	; 23
    1062:	b0 f0       	brcs	.+44     	; 0x1090 <__fixunssfsi+0x3e>
    1064:	e1 f0       	breq	.+56     	; 0x109e <__fixunssfsi+0x4c>
    1066:	66 0f       	add	r22, r22
    1068:	77 1f       	adc	r23, r23
    106a:	88 1f       	adc	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	1a f0       	brmi	.+6      	; 0x1076 <__fixunssfsi+0x24>
    1070:	ba 95       	dec	r27
    1072:	c9 f7       	brne	.-14     	; 0x1066 <__fixunssfsi+0x14>
    1074:	14 c0       	rjmp	.+40     	; 0x109e <__fixunssfsi+0x4c>
    1076:	b1 30       	cpi	r27, 0x01	; 1
    1078:	91 f0       	breq	.+36     	; 0x109e <__fixunssfsi+0x4c>
    107a:	0e 94 b7 08 	call	0x116e	; 0x116e <__fp_zero>
    107e:	b1 e0       	ldi	r27, 0x01	; 1
    1080:	08 95       	ret
    1082:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__fp_zero>
    1086:	67 2f       	mov	r22, r23
    1088:	78 2f       	mov	r23, r24
    108a:	88 27       	eor	r24, r24
    108c:	b8 5f       	subi	r27, 0xF8	; 248
    108e:	39 f0       	breq	.+14     	; 0x109e <__fixunssfsi+0x4c>
    1090:	b9 3f       	cpi	r27, 0xF9	; 249
    1092:	cc f3       	brlt	.-14     	; 0x1086 <__fixunssfsi+0x34>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b3 95       	inc	r27
    109c:	d9 f7       	brne	.-10     	; 0x1094 <__fixunssfsi+0x42>
    109e:	3e f4       	brtc	.+14     	; 0x10ae <__fixunssfsi+0x5c>
    10a0:	90 95       	com	r25
    10a2:	80 95       	com	r24
    10a4:	70 95       	com	r23
    10a6:	61 95       	neg	r22
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	8f 4f       	sbci	r24, 0xFF	; 255
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	08 95       	ret

000010b0 <__floatunsisf>:
    10b0:	e8 94       	clt
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <__floatsisf+0x12>

000010b4 <__floatsisf>:
    10b4:	97 fb       	bst	r25, 7
    10b6:	3e f4       	brtc	.+14     	; 0x10c6 <__floatsisf+0x12>
    10b8:	90 95       	com	r25
    10ba:	80 95       	com	r24
    10bc:	70 95       	com	r23
    10be:	61 95       	neg	r22
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8f 4f       	sbci	r24, 0xFF	; 255
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	99 23       	and	r25, r25
    10c8:	a9 f0       	breq	.+42     	; 0x10f4 <__floatsisf+0x40>
    10ca:	f9 2f       	mov	r31, r25
    10cc:	96 e9       	ldi	r25, 0x96	; 150
    10ce:	bb 27       	eor	r27, r27
    10d0:	93 95       	inc	r25
    10d2:	f6 95       	lsr	r31
    10d4:	87 95       	ror	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	b7 95       	ror	r27
    10dc:	f1 11       	cpse	r31, r1
    10de:	f8 cf       	rjmp	.-16     	; 0x10d0 <__floatsisf+0x1c>
    10e0:	fa f4       	brpl	.+62     	; 0x1120 <__floatsisf+0x6c>
    10e2:	bb 0f       	add	r27, r27
    10e4:	11 f4       	brne	.+4      	; 0x10ea <__floatsisf+0x36>
    10e6:	60 ff       	sbrs	r22, 0
    10e8:	1b c0       	rjmp	.+54     	; 0x1120 <__floatsisf+0x6c>
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	8f 4f       	sbci	r24, 0xFF	; 255
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	16 c0       	rjmp	.+44     	; 0x1120 <__floatsisf+0x6c>
    10f4:	88 23       	and	r24, r24
    10f6:	11 f0       	breq	.+4      	; 0x10fc <__floatsisf+0x48>
    10f8:	96 e9       	ldi	r25, 0x96	; 150
    10fa:	11 c0       	rjmp	.+34     	; 0x111e <__floatsisf+0x6a>
    10fc:	77 23       	and	r23, r23
    10fe:	21 f0       	breq	.+8      	; 0x1108 <__floatsisf+0x54>
    1100:	9e e8       	ldi	r25, 0x8E	; 142
    1102:	87 2f       	mov	r24, r23
    1104:	76 2f       	mov	r23, r22
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <__floatsisf+0x5e>
    1108:	66 23       	and	r22, r22
    110a:	71 f0       	breq	.+28     	; 0x1128 <__floatsisf+0x74>
    110c:	96 e8       	ldi	r25, 0x86	; 134
    110e:	86 2f       	mov	r24, r22
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	2a f0       	brmi	.+10     	; 0x1120 <__floatsisf+0x6c>
    1116:	9a 95       	dec	r25
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	da f7       	brpl	.-10     	; 0x1116 <__floatsisf+0x62>
    1120:	88 0f       	add	r24, r24
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret

0000112a <__fp_split3>:
    112a:	57 fd       	sbrc	r21, 7
    112c:	90 58       	subi	r25, 0x80	; 128
    112e:	44 0f       	add	r20, r20
    1130:	55 1f       	adc	r21, r21
    1132:	59 f0       	breq	.+22     	; 0x114a <__fp_splitA+0x10>
    1134:	5f 3f       	cpi	r21, 0xFF	; 255
    1136:	71 f0       	breq	.+28     	; 0x1154 <__fp_splitA+0x1a>
    1138:	47 95       	ror	r20

0000113a <__fp_splitA>:
    113a:	88 0f       	add	r24, r24
    113c:	97 fb       	bst	r25, 7
    113e:	99 1f       	adc	r25, r25
    1140:	61 f0       	breq	.+24     	; 0x115a <__fp_splitA+0x20>
    1142:	9f 3f       	cpi	r25, 0xFF	; 255
    1144:	79 f0       	breq	.+30     	; 0x1164 <__fp_splitA+0x2a>
    1146:	87 95       	ror	r24
    1148:	08 95       	ret
    114a:	12 16       	cp	r1, r18
    114c:	13 06       	cpc	r1, r19
    114e:	14 06       	cpc	r1, r20
    1150:	55 1f       	adc	r21, r21
    1152:	f2 cf       	rjmp	.-28     	; 0x1138 <__fp_split3+0xe>
    1154:	46 95       	lsr	r20
    1156:	f1 df       	rcall	.-30     	; 0x113a <__fp_splitA>
    1158:	08 c0       	rjmp	.+16     	; 0x116a <__fp_splitA+0x30>
    115a:	16 16       	cp	r1, r22
    115c:	17 06       	cpc	r1, r23
    115e:	18 06       	cpc	r1, r24
    1160:	99 1f       	adc	r25, r25
    1162:	f1 cf       	rjmp	.-30     	; 0x1146 <__fp_splitA+0xc>
    1164:	86 95       	lsr	r24
    1166:	71 05       	cpc	r23, r1
    1168:	61 05       	cpc	r22, r1
    116a:	08 94       	sec
    116c:	08 95       	ret

0000116e <__fp_zero>:
    116e:	e8 94       	clt

00001170 <__fp_szero>:
    1170:	bb 27       	eor	r27, r27
    1172:	66 27       	eor	r22, r22
    1174:	77 27       	eor	r23, r23
    1176:	cb 01       	movw	r24, r22
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret

0000117c <__mulsf3>:
    117c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3x>
    1180:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_round>
    1184:	0e 94 34 09 	call	0x1268	; 0x1268 <__fp_pscA>
    1188:	38 f0       	brcs	.+14     	; 0x1198 <__mulsf3+0x1c>
    118a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__fp_pscB>
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__mulsf3+0x1c>
    1190:	95 23       	and	r25, r21
    1192:	11 f0       	breq	.+4      	; 0x1198 <__mulsf3+0x1c>
    1194:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__fp_inf>
    1198:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__fp_nan>
    119c:	11 24       	eor	r1, r1
    119e:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>

000011a2 <__mulsf3x>:
    11a2:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_split3>
    11a6:	70 f3       	brcs	.-36     	; 0x1184 <__mulsf3+0x8>

000011a8 <__mulsf3_pse>:
    11a8:	95 9f       	mul	r25, r21
    11aa:	c1 f3       	breq	.-16     	; 0x119c <__mulsf3+0x20>
    11ac:	95 0f       	add	r25, r21
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	55 1f       	adc	r21, r21
    11b2:	62 9f       	mul	r22, r18
    11b4:	f0 01       	movw	r30, r0
    11b6:	72 9f       	mul	r23, r18
    11b8:	bb 27       	eor	r27, r27
    11ba:	f0 0d       	add	r31, r0
    11bc:	b1 1d       	adc	r27, r1
    11be:	63 9f       	mul	r22, r19
    11c0:	aa 27       	eor	r26, r26
    11c2:	f0 0d       	add	r31, r0
    11c4:	b1 1d       	adc	r27, r1
    11c6:	aa 1f       	adc	r26, r26
    11c8:	64 9f       	mul	r22, r20
    11ca:	66 27       	eor	r22, r22
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	66 1f       	adc	r22, r22
    11d2:	82 9f       	mul	r24, r18
    11d4:	22 27       	eor	r18, r18
    11d6:	b0 0d       	add	r27, r0
    11d8:	a1 1d       	adc	r26, r1
    11da:	62 1f       	adc	r22, r18
    11dc:	73 9f       	mul	r23, r19
    11de:	b0 0d       	add	r27, r0
    11e0:	a1 1d       	adc	r26, r1
    11e2:	62 1f       	adc	r22, r18
    11e4:	83 9f       	mul	r24, r19
    11e6:	a0 0d       	add	r26, r0
    11e8:	61 1d       	adc	r22, r1
    11ea:	22 1f       	adc	r18, r18
    11ec:	74 9f       	mul	r23, r20
    11ee:	33 27       	eor	r19, r19
    11f0:	a0 0d       	add	r26, r0
    11f2:	61 1d       	adc	r22, r1
    11f4:	23 1f       	adc	r18, r19
    11f6:	84 9f       	mul	r24, r20
    11f8:	60 0d       	add	r22, r0
    11fa:	21 1d       	adc	r18, r1
    11fc:	82 2f       	mov	r24, r18
    11fe:	76 2f       	mov	r23, r22
    1200:	6a 2f       	mov	r22, r26
    1202:	11 24       	eor	r1, r1
    1204:	9f 57       	subi	r25, 0x7F	; 127
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	9a f0       	brmi	.+38     	; 0x1230 <__mulsf3_pse+0x88>
    120a:	f1 f0       	breq	.+60     	; 0x1248 <__mulsf3_pse+0xa0>
    120c:	88 23       	and	r24, r24
    120e:	4a f0       	brmi	.+18     	; 0x1222 <__mulsf3_pse+0x7a>
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	bb 1f       	adc	r27, r27
    1216:	66 1f       	adc	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	91 50       	subi	r25, 0x01	; 1
    121e:	50 40       	sbci	r21, 0x00	; 0
    1220:	a9 f7       	brne	.-22     	; 0x120c <__mulsf3_pse+0x64>
    1222:	9e 3f       	cpi	r25, 0xFE	; 254
    1224:	51 05       	cpc	r21, r1
    1226:	80 f0       	brcs	.+32     	; 0x1248 <__mulsf3_pse+0xa0>
    1228:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__fp_inf>
    122c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_szero>
    1230:	5f 3f       	cpi	r21, 0xFF	; 255
    1232:	e4 f3       	brlt	.-8      	; 0x122c <__mulsf3_pse+0x84>
    1234:	98 3e       	cpi	r25, 0xE8	; 232
    1236:	d4 f3       	brlt	.-12     	; 0x122c <__mulsf3_pse+0x84>
    1238:	86 95       	lsr	r24
    123a:	77 95       	ror	r23
    123c:	67 95       	ror	r22
    123e:	b7 95       	ror	r27
    1240:	f7 95       	ror	r31
    1242:	e7 95       	ror	r30
    1244:	9f 5f       	subi	r25, 0xFF	; 255
    1246:	c1 f7       	brne	.-16     	; 0x1238 <__mulsf3_pse+0x90>
    1248:	fe 2b       	or	r31, r30
    124a:	88 0f       	add	r24, r24
    124c:	91 1d       	adc	r25, r1
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	97 f9       	bld	r25, 7
    1254:	08 95       	ret

00001256 <__fp_inf>:
    1256:	97 f9       	bld	r25, 7
    1258:	9f 67       	ori	r25, 0x7F	; 127
    125a:	80 e8       	ldi	r24, 0x80	; 128
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	08 95       	ret

00001262 <__fp_nan>:
    1262:	9f ef       	ldi	r25, 0xFF	; 255
    1264:	80 ec       	ldi	r24, 0xC0	; 192
    1266:	08 95       	ret

00001268 <__fp_pscA>:
    1268:	00 24       	eor	r0, r0
    126a:	0a 94       	dec	r0
    126c:	16 16       	cp	r1, r22
    126e:	17 06       	cpc	r1, r23
    1270:	18 06       	cpc	r1, r24
    1272:	09 06       	cpc	r0, r25
    1274:	08 95       	ret

00001276 <__fp_pscB>:
    1276:	00 24       	eor	r0, r0
    1278:	0a 94       	dec	r0
    127a:	12 16       	cp	r1, r18
    127c:	13 06       	cpc	r1, r19
    127e:	14 06       	cpc	r1, r20
    1280:	05 06       	cpc	r0, r21
    1282:	08 95       	ret

00001284 <__fp_round>:
    1284:	09 2e       	mov	r0, r25
    1286:	03 94       	inc	r0
    1288:	00 0c       	add	r0, r0
    128a:	11 f4       	brne	.+4      	; 0x1290 <__fp_round+0xc>
    128c:	88 23       	and	r24, r24
    128e:	52 f0       	brmi	.+20     	; 0x12a4 <__fp_round+0x20>
    1290:	bb 0f       	add	r27, r27
    1292:	40 f4       	brcc	.+16     	; 0x12a4 <__fp_round+0x20>
    1294:	bf 2b       	or	r27, r31
    1296:	11 f4       	brne	.+4      	; 0x129c <__fp_round+0x18>
    1298:	60 ff       	sbrs	r22, 0
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <__fp_round+0x20>
    129c:	6f 5f       	subi	r22, 0xFF	; 255
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	8f 4f       	sbci	r24, 0xFF	; 255
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	08 95       	ret

000012a6 <__umulhisi3>:
    12a6:	a2 9f       	mul	r26, r18
    12a8:	b0 01       	movw	r22, r0
    12aa:	b3 9f       	mul	r27, r19
    12ac:	c0 01       	movw	r24, r0
    12ae:	a3 9f       	mul	r26, r19
    12b0:	70 0d       	add	r23, r0
    12b2:	81 1d       	adc	r24, r1
    12b4:	11 24       	eor	r1, r1
    12b6:	91 1d       	adc	r25, r1
    12b8:	b2 9f       	mul	r27, r18
    12ba:	70 0d       	add	r23, r0
    12bc:	81 1d       	adc	r24, r1
    12be:	11 24       	eor	r1, r1
    12c0:	91 1d       	adc	r25, r1
    12c2:	08 95       	ret

000012c4 <strtoul>:
    12c4:	a0 e0       	ldi	r26, 0x00	; 0
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e6       	ldi	r30, 0x68	; 104
    12ca:	f9 e0       	ldi	r31, 0x09	; 9
    12cc:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__prologue_saves__+0x2>
    12d0:	5c 01       	movw	r10, r24
    12d2:	6b 01       	movw	r12, r22
    12d4:	7a 01       	movw	r14, r20
    12d6:	61 15       	cp	r22, r1
    12d8:	71 05       	cpc	r23, r1
    12da:	19 f0       	breq	.+6      	; 0x12e2 <strtoul+0x1e>
    12dc:	fb 01       	movw	r30, r22
    12de:	80 83       	st	Z, r24
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	e1 14       	cp	r14, r1
    12e4:	f1 04       	cpc	r15, r1
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <strtoul+0x2e>
    12e8:	c7 01       	movw	r24, r14
    12ea:	02 97       	sbiw	r24, 0x02	; 2
    12ec:	83 97       	sbiw	r24, 0x23	; 35
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <strtoul+0x2e>
    12f0:	c9 c0       	rjmp	.+402    	; 0x1484 <strtoul+0x1c0>
    12f2:	e5 01       	movw	r28, r10
    12f4:	21 96       	adiw	r28, 0x01	; 1
    12f6:	f5 01       	movw	r30, r10
    12f8:	10 81       	ld	r17, Z
    12fa:	81 2f       	mov	r24, r17
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 57 0a 	call	0x14ae	; 0x14ae <isspace>
    1302:	89 2b       	or	r24, r25
    1304:	11 f0       	breq	.+4      	; 0x130a <strtoul+0x46>
    1306:	5e 01       	movw	r10, r28
    1308:	f4 cf       	rjmp	.-24     	; 0x12f2 <strtoul+0x2e>
    130a:	1d 32       	cpi	r17, 0x2D	; 45
    130c:	29 f4       	brne	.+10     	; 0x1318 <strtoul+0x54>
    130e:	21 96       	adiw	r28, 0x01	; 1
    1310:	f5 01       	movw	r30, r10
    1312:	11 81       	ldd	r17, Z+1	; 0x01
    1314:	01 e0       	ldi	r16, 0x01	; 1
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <strtoul+0x62>
    1318:	1b 32       	cpi	r17, 0x2B	; 43
    131a:	21 f4       	brne	.+8      	; 0x1324 <strtoul+0x60>
    131c:	e5 01       	movw	r28, r10
    131e:	22 96       	adiw	r28, 0x02	; 2
    1320:	f5 01       	movw	r30, r10
    1322:	11 81       	ldd	r17, Z+1	; 0x01
    1324:	00 e0       	ldi	r16, 0x00	; 0
    1326:	e1 14       	cp	r14, r1
    1328:	f1 04       	cpc	r15, r1
    132a:	b1 f0       	breq	.+44     	; 0x1358 <strtoul+0x94>
    132c:	f0 e1       	ldi	r31, 0x10	; 16
    132e:	ef 16       	cp	r14, r31
    1330:	f1 04       	cpc	r15, r1
    1332:	29 f4       	brne	.+10     	; 0x133e <strtoul+0x7a>
    1334:	b0 c0       	rjmp	.+352    	; 0x1496 <strtoul+0x1d2>
    1336:	10 e3       	ldi	r17, 0x30	; 48
    1338:	e1 14       	cp	r14, r1
    133a:	f1 04       	cpc	r15, r1
    133c:	01 f1       	breq	.+64     	; 0x137e <strtoul+0xba>
    133e:	2a e0       	ldi	r18, 0x0A	; 10
    1340:	e2 16       	cp	r14, r18
    1342:	f1 04       	cpc	r15, r1
    1344:	b1 f1       	breq	.+108    	; 0x13b2 <strtoul+0xee>
    1346:	80 e1       	ldi	r24, 0x10	; 16
    1348:	e8 16       	cp	r14, r24
    134a:	f1 04       	cpc	r15, r1
    134c:	71 f0       	breq	.+28     	; 0x136a <strtoul+0xa6>
    134e:	e8 e0       	ldi	r30, 0x08	; 8
    1350:	ee 16       	cp	r14, r30
    1352:	f1 04       	cpc	r15, r1
    1354:	f1 f4       	brne	.+60     	; 0x1392 <strtoul+0xce>
    1356:	13 c0       	rjmp	.+38     	; 0x137e <strtoul+0xba>
    1358:	10 33       	cpi	r17, 0x30	; 48
    135a:	41 f5       	brne	.+80     	; 0x13ac <strtoul+0xe8>
    135c:	88 81       	ld	r24, Y
    135e:	8f 7d       	andi	r24, 0xDF	; 223
    1360:	88 35       	cpi	r24, 0x58	; 88
    1362:	49 f7       	brne	.-46     	; 0x1336 <strtoul+0x72>
    1364:	19 81       	ldd	r17, Y+1	; 0x01
    1366:	22 96       	adiw	r28, 0x02	; 2
    1368:	02 60       	ori	r16, 0x02	; 2
    136a:	f0 e1       	ldi	r31, 0x10	; 16
    136c:	ef 2e       	mov	r14, r31
    136e:	f1 2c       	mov	r15, r1
    1370:	88 24       	eor	r8, r8
    1372:	8a 94       	dec	r8
    1374:	98 2c       	mov	r9, r8
    1376:	a8 2c       	mov	r10, r8
    1378:	af e0       	ldi	r26, 0x0F	; 15
    137a:	ba 2e       	mov	r11, r26
    137c:	20 c0       	rjmp	.+64     	; 0x13be <strtoul+0xfa>
    137e:	78 e0       	ldi	r23, 0x08	; 8
    1380:	e7 2e       	mov	r14, r23
    1382:	f1 2c       	mov	r15, r1
    1384:	88 24       	eor	r8, r8
    1386:	8a 94       	dec	r8
    1388:	98 2c       	mov	r9, r8
    138a:	a8 2c       	mov	r10, r8
    138c:	ef e1       	ldi	r30, 0x1F	; 31
    138e:	be 2e       	mov	r11, r30
    1390:	16 c0       	rjmp	.+44     	; 0x13be <strtoul+0xfa>
    1392:	6f ef       	ldi	r22, 0xFF	; 255
    1394:	7f ef       	ldi	r23, 0xFF	; 255
    1396:	cb 01       	movw	r24, r22
    1398:	97 01       	movw	r18, r14
    139a:	0f 2c       	mov	r0, r15
    139c:	00 0c       	add	r0, r0
    139e:	44 0b       	sbc	r20, r20
    13a0:	55 0b       	sbc	r21, r21
    13a2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__udivmodsi4>
    13a6:	49 01       	movw	r8, r18
    13a8:	5a 01       	movw	r10, r20
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <strtoul+0xfa>
    13ac:	8a e0       	ldi	r24, 0x0A	; 10
    13ae:	e8 2e       	mov	r14, r24
    13b0:	f1 2c       	mov	r15, r1
    13b2:	69 e9       	ldi	r22, 0x99	; 153
    13b4:	86 2e       	mov	r8, r22
    13b6:	98 2c       	mov	r9, r8
    13b8:	a8 2c       	mov	r10, r8
    13ba:	69 e1       	ldi	r22, 0x19	; 25
    13bc:	b6 2e       	mov	r11, r22
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	cb 01       	movw	r24, r22
    13c6:	27 01       	movw	r4, r14
    13c8:	0f 2c       	mov	r0, r15
    13ca:	00 0c       	add	r0, r0
    13cc:	66 08       	sbc	r6, r6
    13ce:	77 08       	sbc	r7, r7
    13d0:	fe 01       	movw	r30, r28
    13d2:	50 ed       	ldi	r21, 0xD0	; 208
    13d4:	35 2e       	mov	r3, r21
    13d6:	31 0e       	add	r3, r17
    13d8:	29 e0       	ldi	r18, 0x09	; 9
    13da:	23 15       	cp	r18, r3
    13dc:	70 f4       	brcc	.+28     	; 0x13fa <strtoul+0x136>
    13de:	2f eb       	ldi	r18, 0xBF	; 191
    13e0:	21 0f       	add	r18, r17
    13e2:	2a 31       	cpi	r18, 0x1A	; 26
    13e4:	18 f4       	brcc	.+6      	; 0x13ec <strtoul+0x128>
    13e6:	39 ec       	ldi	r19, 0xC9	; 201
    13e8:	33 2e       	mov	r3, r19
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <strtoul+0x134>
    13ec:	2f e9       	ldi	r18, 0x9F	; 159
    13ee:	21 0f       	add	r18, r17
    13f0:	2a 31       	cpi	r18, 0x1A	; 26
    13f2:	30 f5       	brcc	.+76     	; 0x1440 <strtoul+0x17c>
    13f4:	29 ea       	ldi	r18, 0xA9	; 169
    13f6:	32 2e       	mov	r3, r18
    13f8:	31 0e       	add	r3, r17
    13fa:	23 2d       	mov	r18, r3
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	2e 15       	cp	r18, r14
    1400:	3f 05       	cpc	r19, r15
    1402:	f4 f4       	brge	.+60     	; 0x1440 <strtoul+0x17c>
    1404:	4f 3f       	cpi	r20, 0xFF	; 255
    1406:	c9 f0       	breq	.+50     	; 0x143a <strtoul+0x176>
    1408:	86 16       	cp	r8, r22
    140a:	97 06       	cpc	r9, r23
    140c:	a8 06       	cpc	r10, r24
    140e:	b9 06       	cpc	r11, r25
    1410:	88 f0       	brcs	.+34     	; 0x1434 <strtoul+0x170>
    1412:	a3 01       	movw	r20, r6
    1414:	92 01       	movw	r18, r4
    1416:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__mulsi3>
    141a:	23 2d       	mov	r18, r3
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	62 0f       	add	r22, r18
    1424:	73 1f       	adc	r23, r19
    1426:	84 1f       	adc	r24, r20
    1428:	95 1f       	adc	r25, r21
    142a:	62 17       	cp	r22, r18
    142c:	73 07       	cpc	r23, r19
    142e:	84 07       	cpc	r24, r20
    1430:	95 07       	cpc	r25, r21
    1432:	10 f4       	brcc	.+4      	; 0x1438 <strtoul+0x174>
    1434:	4f ef       	ldi	r20, 0xFF	; 255
    1436:	01 c0       	rjmp	.+2      	; 0x143a <strtoul+0x176>
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	21 96       	adiw	r28, 0x01	; 1
    143c:	10 81       	ld	r17, Z
    143e:	c8 cf       	rjmp	.-112    	; 0x13d0 <strtoul+0x10c>
    1440:	c1 14       	cp	r12, r1
    1442:	d1 04       	cpc	r13, r1
    1444:	51 f0       	breq	.+20     	; 0x145a <strtoul+0x196>
    1446:	44 23       	and	r20, r20
    1448:	11 f0       	breq	.+4      	; 0x144e <strtoul+0x18a>
    144a:	21 97       	sbiw	r28, 0x01	; 1
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <strtoul+0x190>
    144e:	01 ff       	sbrs	r16, 1
    1450:	04 c0       	rjmp	.+8      	; 0x145a <strtoul+0x196>
    1452:	22 97       	sbiw	r28, 0x02	; 2
    1454:	f6 01       	movw	r30, r12
    1456:	c0 83       	st	Z, r28
    1458:	d1 83       	std	Z+1, r29	; 0x01
    145a:	00 ff       	sbrs	r16, 0
    145c:	07 c0       	rjmp	.+14     	; 0x146c <strtoul+0x1a8>
    145e:	90 95       	com	r25
    1460:	80 95       	com	r24
    1462:	70 95       	com	r23
    1464:	61 95       	neg	r22
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	4f 3f       	cpi	r20, 0xFF	; 255
    146e:	79 f4       	brne	.+30     	; 0x148e <strtoul+0x1ca>
    1470:	82 e2       	ldi	r24, 0x22	; 34
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	80 93 24 2a 	sts	0x2A24, r24	; 0x802a24 <errno>
    1478:	90 93 25 2a 	sts	0x2A25, r25	; 0x802a25 <errno+0x1>
    147c:	3f ef       	ldi	r19, 0xFF	; 255
    147e:	2f ef       	ldi	r18, 0xFF	; 255
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	0d c0       	rjmp	.+26     	; 0x149e <strtoul+0x1da>
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	08 c0       	rjmp	.+16     	; 0x149e <strtoul+0x1da>
    148e:	46 2f       	mov	r20, r22
    1490:	37 2f       	mov	r19, r23
    1492:	28 2f       	mov	r18, r24
    1494:	04 c0       	rjmp	.+8      	; 0x149e <strtoul+0x1da>
    1496:	10 33       	cpi	r17, 0x30	; 48
    1498:	09 f0       	breq	.+2      	; 0x149c <strtoul+0x1d8>
    149a:	67 cf       	rjmp	.-306    	; 0x136a <strtoul+0xa6>
    149c:	5f cf       	rjmp	.-322    	; 0x135c <strtoul+0x98>
    149e:	64 2f       	mov	r22, r20
    14a0:	73 2f       	mov	r23, r19
    14a2:	82 2f       	mov	r24, r18
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	e1 e1       	ldi	r30, 0x11	; 17
    14aa:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__epilogue_restores__+0x2>

000014ae <isspace>:
    14ae:	91 11       	cpse	r25, r1
    14b0:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__ctype_isfalse>
    14b4:	80 32       	cpi	r24, 0x20	; 32
    14b6:	19 f0       	breq	.+6      	; 0x14be <isspace+0x10>
    14b8:	89 50       	subi	r24, 0x09	; 9
    14ba:	85 50       	subi	r24, 0x05	; 5
    14bc:	c8 f7       	brcc	.-14     	; 0x14b0 <isspace+0x2>
    14be:	08 95       	ret

000014c0 <strtok>:
    14c0:	48 e2       	ldi	r20, 0x28	; 40
    14c2:	59 e2       	ldi	r21, 0x29	; 41
    14c4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strtok_r>
    14c8:	08 95       	ret

000014ca <strchr>:
    14ca:	fc 01       	movw	r30, r24
    14cc:	81 91       	ld	r24, Z+
    14ce:	86 17       	cp	r24, r22
    14d0:	21 f0       	breq	.+8      	; 0x14da <strchr+0x10>
    14d2:	88 23       	and	r24, r24
    14d4:	d9 f7       	brne	.-10     	; 0x14cc <strchr+0x2>
    14d6:	99 27       	eor	r25, r25
    14d8:	08 95       	ret
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	cf 01       	movw	r24, r30
    14de:	08 95       	ret

000014e0 <strcmp>:
    14e0:	fb 01       	movw	r30, r22
    14e2:	dc 01       	movw	r26, r24
    14e4:	8d 91       	ld	r24, X+
    14e6:	01 90       	ld	r0, Z+
    14e8:	80 19       	sub	r24, r0
    14ea:	01 10       	cpse	r0, r1
    14ec:	d9 f3       	breq	.-10     	; 0x14e4 <strcmp+0x4>
    14ee:	99 0b       	sbc	r25, r25
    14f0:	08 95       	ret

000014f2 <strtok_r>:
    14f2:	fa 01       	movw	r30, r20
    14f4:	a1 91       	ld	r26, Z+
    14f6:	b0 81       	ld	r27, Z
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	19 f4       	brne	.+6      	; 0x1502 <strtok_r+0x10>
    14fc:	10 97       	sbiw	r26, 0x00	; 0
    14fe:	e1 f0       	breq	.+56     	; 0x1538 <strtok_r+0x46>
    1500:	cd 01       	movw	r24, r26
    1502:	dc 01       	movw	r26, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0d 90       	ld	r0, X+
    1508:	00 20       	and	r0, r0
    150a:	11 f4       	brne	.+4      	; 0x1510 <strtok_r+0x1e>
    150c:	c0 01       	movw	r24, r0
    150e:	13 c0       	rjmp	.+38     	; 0x1536 <strtok_r+0x44>
    1510:	fb 01       	movw	r30, r22
    1512:	21 91       	ld	r18, Z+
    1514:	22 23       	and	r18, r18
    1516:	19 f0       	breq	.+6      	; 0x151e <strtok_r+0x2c>
    1518:	20 15       	cp	r18, r0
    151a:	d9 f7       	brne	.-10     	; 0x1512 <strtok_r+0x20>
    151c:	f3 cf       	rjmp	.-26     	; 0x1504 <strtok_r+0x12>
    151e:	fb 01       	movw	r30, r22
    1520:	21 91       	ld	r18, Z+
    1522:	20 15       	cp	r18, r0
    1524:	19 f4       	brne	.+6      	; 0x152c <strtok_r+0x3a>
    1526:	1e 92       	st	-X, r1
    1528:	11 96       	adiw	r26, 0x01	; 1
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <strtok_r+0x46>
    152c:	22 23       	and	r18, r18
    152e:	c1 f7       	brne	.-16     	; 0x1520 <strtok_r+0x2e>
    1530:	0d 90       	ld	r0, X+
    1532:	00 20       	and	r0, r0
    1534:	a1 f7       	brne	.-24     	; 0x151e <strtok_r+0x2c>
    1536:	d0 01       	movw	r26, r0
    1538:	fa 01       	movw	r30, r20
    153a:	a1 93       	st	Z+, r26
    153c:	b0 83       	st	Z, r27
    153e:	08 95       	ret

00001540 <printf>:
    1540:	a0 e0       	ldi	r26, 0x00	; 0
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e6 ea       	ldi	r30, 0xA6	; 166
    1546:	fa e0       	ldi	r31, 0x0A	; 10
    1548:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__prologue_saves__+0x20>
    154c:	ae 01       	movw	r20, r28
    154e:	4b 5f       	subi	r20, 0xFB	; 251
    1550:	5f 4f       	sbci	r21, 0xFF	; 255
    1552:	fa 01       	movw	r30, r20
    1554:	61 91       	ld	r22, Z+
    1556:	71 91       	ld	r23, Z+
    1558:	af 01       	movw	r20, r30
    155a:	80 91 20 2a 	lds	r24, 0x2A20	; 0x802a20 <__iob+0x2>
    155e:	90 91 21 2a 	lds	r25, 0x2A21	; 0x802a21 <__iob+0x3>
    1562:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <vfprintf>
    1566:	e2 e0       	ldi	r30, 0x02	; 2
    1568:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__epilogue_restores__+0x20>

0000156c <puts>:
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	e0 91 20 2a 	lds	r30, 0x2A20	; 0x802a20 <__iob+0x2>
    1578:	f0 91 21 2a 	lds	r31, 0x2A21	; 0x802a21 <__iob+0x3>
    157c:	23 81       	ldd	r18, Z+3	; 0x03
    157e:	21 ff       	sbrs	r18, 1
    1580:	1b c0       	rjmp	.+54     	; 0x15b8 <puts+0x4c>
    1582:	8c 01       	movw	r16, r24
    1584:	d0 e0       	ldi	r29, 0x00	; 0
    1586:	c0 e0       	ldi	r28, 0x00	; 0
    1588:	f8 01       	movw	r30, r16
    158a:	81 91       	ld	r24, Z+
    158c:	8f 01       	movw	r16, r30
    158e:	60 91 20 2a 	lds	r22, 0x2A20	; 0x802a20 <__iob+0x2>
    1592:	70 91 21 2a 	lds	r23, 0x2A21	; 0x802a21 <__iob+0x3>
    1596:	db 01       	movw	r26, r22
    1598:	18 96       	adiw	r26, 0x08	; 8
    159a:	ed 91       	ld	r30, X+
    159c:	fc 91       	ld	r31, X
    159e:	19 97       	sbiw	r26, 0x09	; 9
    15a0:	88 23       	and	r24, r24
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <puts+0x44>
    15a4:	09 95       	icall
    15a6:	89 2b       	or	r24, r25
    15a8:	79 f3       	breq	.-34     	; 0x1588 <puts+0x1c>
    15aa:	df ef       	ldi	r29, 0xFF	; 255
    15ac:	cf ef       	ldi	r28, 0xFF	; 255
    15ae:	ec cf       	rjmp	.-40     	; 0x1588 <puts+0x1c>
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	09 95       	icall
    15b4:	89 2b       	or	r24, r25
    15b6:	19 f0       	breq	.+6      	; 0x15be <puts+0x52>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <puts+0x56>
    15be:	8d 2f       	mov	r24, r29
    15c0:	9c 2f       	mov	r25, r28
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	08 95       	ret

000015cc <vfprintf>:
    15cc:	ab e0       	ldi	r26, 0x0B	; 11
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	ec ee       	ldi	r30, 0xEC	; 236
    15d2:	fa e0       	ldi	r31, 0x0A	; 10
    15d4:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__prologue_saves__>
    15d8:	6c 01       	movw	r12, r24
    15da:	7b 01       	movw	r14, r22
    15dc:	8a 01       	movw	r16, r20
    15de:	fc 01       	movw	r30, r24
    15e0:	16 82       	std	Z+6, r1	; 0x06
    15e2:	17 82       	std	Z+7, r1	; 0x07
    15e4:	83 81       	ldd	r24, Z+3	; 0x03
    15e6:	81 ff       	sbrs	r24, 1
    15e8:	cc c1       	rjmp	.+920    	; 0x1982 <__DATA_REGION_LENGTH__+0x182>
    15ea:	ce 01       	movw	r24, r28
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	3c 01       	movw	r6, r24
    15f0:	f6 01       	movw	r30, r12
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	f7 01       	movw	r30, r14
    15f6:	93 fd       	sbrc	r25, 3
    15f8:	85 91       	lpm	r24, Z+
    15fa:	93 ff       	sbrs	r25, 3
    15fc:	81 91       	ld	r24, Z+
    15fe:	7f 01       	movw	r14, r30
    1600:	88 23       	and	r24, r24
    1602:	09 f4       	brne	.+2      	; 0x1606 <vfprintf+0x3a>
    1604:	ba c1       	rjmp	.+884    	; 0x197a <__DATA_REGION_LENGTH__+0x17a>
    1606:	85 32       	cpi	r24, 0x25	; 37
    1608:	39 f4       	brne	.+14     	; 0x1618 <vfprintf+0x4c>
    160a:	93 fd       	sbrc	r25, 3
    160c:	85 91       	lpm	r24, Z+
    160e:	93 ff       	sbrs	r25, 3
    1610:	81 91       	ld	r24, Z+
    1612:	7f 01       	movw	r14, r30
    1614:	85 32       	cpi	r24, 0x25	; 37
    1616:	29 f4       	brne	.+10     	; 0x1622 <vfprintf+0x56>
    1618:	b6 01       	movw	r22, r12
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1620:	e7 cf       	rjmp	.-50     	; 0x15f0 <vfprintf+0x24>
    1622:	91 2c       	mov	r9, r1
    1624:	21 2c       	mov	r2, r1
    1626:	31 2c       	mov	r3, r1
    1628:	ff e1       	ldi	r31, 0x1F	; 31
    162a:	f3 15       	cp	r31, r3
    162c:	d8 f0       	brcs	.+54     	; 0x1664 <vfprintf+0x98>
    162e:	8b 32       	cpi	r24, 0x2B	; 43
    1630:	79 f0       	breq	.+30     	; 0x1650 <vfprintf+0x84>
    1632:	38 f4       	brcc	.+14     	; 0x1642 <vfprintf+0x76>
    1634:	80 32       	cpi	r24, 0x20	; 32
    1636:	79 f0       	breq	.+30     	; 0x1656 <vfprintf+0x8a>
    1638:	83 32       	cpi	r24, 0x23	; 35
    163a:	a1 f4       	brne	.+40     	; 0x1664 <vfprintf+0x98>
    163c:	23 2d       	mov	r18, r3
    163e:	20 61       	ori	r18, 0x10	; 16
    1640:	1d c0       	rjmp	.+58     	; 0x167c <vfprintf+0xb0>
    1642:	8d 32       	cpi	r24, 0x2D	; 45
    1644:	61 f0       	breq	.+24     	; 0x165e <vfprintf+0x92>
    1646:	80 33       	cpi	r24, 0x30	; 48
    1648:	69 f4       	brne	.+26     	; 0x1664 <vfprintf+0x98>
    164a:	23 2d       	mov	r18, r3
    164c:	21 60       	ori	r18, 0x01	; 1
    164e:	16 c0       	rjmp	.+44     	; 0x167c <vfprintf+0xb0>
    1650:	83 2d       	mov	r24, r3
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	38 2e       	mov	r3, r24
    1656:	e3 2d       	mov	r30, r3
    1658:	e4 60       	ori	r30, 0x04	; 4
    165a:	3e 2e       	mov	r3, r30
    165c:	2a c0       	rjmp	.+84     	; 0x16b2 <vfprintf+0xe6>
    165e:	f3 2d       	mov	r31, r3
    1660:	f8 60       	ori	r31, 0x08	; 8
    1662:	1d c0       	rjmp	.+58     	; 0x169e <vfprintf+0xd2>
    1664:	37 fc       	sbrc	r3, 7
    1666:	2d c0       	rjmp	.+90     	; 0x16c2 <vfprintf+0xf6>
    1668:	20 ed       	ldi	r18, 0xD0	; 208
    166a:	28 0f       	add	r18, r24
    166c:	2a 30       	cpi	r18, 0x0A	; 10
    166e:	40 f0       	brcs	.+16     	; 0x1680 <vfprintf+0xb4>
    1670:	8e 32       	cpi	r24, 0x2E	; 46
    1672:	b9 f4       	brne	.+46     	; 0x16a2 <vfprintf+0xd6>
    1674:	36 fc       	sbrc	r3, 6
    1676:	81 c1       	rjmp	.+770    	; 0x197a <__DATA_REGION_LENGTH__+0x17a>
    1678:	23 2d       	mov	r18, r3
    167a:	20 64       	ori	r18, 0x40	; 64
    167c:	32 2e       	mov	r3, r18
    167e:	19 c0       	rjmp	.+50     	; 0x16b2 <vfprintf+0xe6>
    1680:	36 fe       	sbrs	r3, 6
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0xc4>
    1684:	8a e0       	ldi	r24, 0x0A	; 10
    1686:	98 9e       	mul	r9, r24
    1688:	20 0d       	add	r18, r0
    168a:	11 24       	eor	r1, r1
    168c:	92 2e       	mov	r9, r18
    168e:	11 c0       	rjmp	.+34     	; 0x16b2 <vfprintf+0xe6>
    1690:	ea e0       	ldi	r30, 0x0A	; 10
    1692:	2e 9e       	mul	r2, r30
    1694:	20 0d       	add	r18, r0
    1696:	11 24       	eor	r1, r1
    1698:	22 2e       	mov	r2, r18
    169a:	f3 2d       	mov	r31, r3
    169c:	f0 62       	ori	r31, 0x20	; 32
    169e:	3f 2e       	mov	r3, r31
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <vfprintf+0xe6>
    16a2:	8c 36       	cpi	r24, 0x6C	; 108
    16a4:	21 f4       	brne	.+8      	; 0x16ae <vfprintf+0xe2>
    16a6:	83 2d       	mov	r24, r3
    16a8:	80 68       	ori	r24, 0x80	; 128
    16aa:	38 2e       	mov	r3, r24
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <vfprintf+0xe6>
    16ae:	88 36       	cpi	r24, 0x68	; 104
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <vfprintf+0xf6>
    16b2:	f7 01       	movw	r30, r14
    16b4:	93 fd       	sbrc	r25, 3
    16b6:	85 91       	lpm	r24, Z+
    16b8:	93 ff       	sbrs	r25, 3
    16ba:	81 91       	ld	r24, Z+
    16bc:	7f 01       	movw	r14, r30
    16be:	81 11       	cpse	r24, r1
    16c0:	b3 cf       	rjmp	.-154    	; 0x1628 <vfprintf+0x5c>
    16c2:	98 2f       	mov	r25, r24
    16c4:	9f 7d       	andi	r25, 0xDF	; 223
    16c6:	95 54       	subi	r25, 0x45	; 69
    16c8:	93 30       	cpi	r25, 0x03	; 3
    16ca:	28 f4       	brcc	.+10     	; 0x16d6 <vfprintf+0x10a>
    16cc:	0c 5f       	subi	r16, 0xFC	; 252
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	9f e3       	ldi	r25, 0x3F	; 63
    16d2:	99 83       	std	Y+1, r25	; 0x01
    16d4:	0d c0       	rjmp	.+26     	; 0x16f0 <vfprintf+0x124>
    16d6:	83 36       	cpi	r24, 0x63	; 99
    16d8:	31 f0       	breq	.+12     	; 0x16e6 <vfprintf+0x11a>
    16da:	83 37       	cpi	r24, 0x73	; 115
    16dc:	71 f0       	breq	.+28     	; 0x16fa <vfprintf+0x12e>
    16de:	83 35       	cpi	r24, 0x53	; 83
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <vfprintf+0x118>
    16e2:	59 c0       	rjmp	.+178    	; 0x1796 <vfprintf+0x1ca>
    16e4:	21 c0       	rjmp	.+66     	; 0x1728 <vfprintf+0x15c>
    16e6:	f8 01       	movw	r30, r16
    16e8:	80 81       	ld	r24, Z
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	0e 5f       	subi	r16, 0xFE	; 254
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
    16f0:	88 24       	eor	r8, r8
    16f2:	83 94       	inc	r8
    16f4:	91 2c       	mov	r9, r1
    16f6:	53 01       	movw	r10, r6
    16f8:	13 c0       	rjmp	.+38     	; 0x1720 <vfprintf+0x154>
    16fa:	28 01       	movw	r4, r16
    16fc:	f2 e0       	ldi	r31, 0x02	; 2
    16fe:	4f 0e       	add	r4, r31
    1700:	51 1c       	adc	r5, r1
    1702:	f8 01       	movw	r30, r16
    1704:	a0 80       	ld	r10, Z
    1706:	b1 80       	ldd	r11, Z+1	; 0x01
    1708:	36 fe       	sbrs	r3, 6
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x146>
    170c:	69 2d       	mov	r22, r9
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <vfprintf+0x14a>
    1712:	6f ef       	ldi	r22, 0xFF	; 255
    1714:	7f ef       	ldi	r23, 0xFF	; 255
    1716:	c5 01       	movw	r24, r10
    1718:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <strnlen>
    171c:	4c 01       	movw	r8, r24
    171e:	82 01       	movw	r16, r4
    1720:	f3 2d       	mov	r31, r3
    1722:	ff 77       	andi	r31, 0x7F	; 127
    1724:	3f 2e       	mov	r3, r31
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <vfprintf+0x188>
    1728:	28 01       	movw	r4, r16
    172a:	22 e0       	ldi	r18, 0x02	; 2
    172c:	42 0e       	add	r4, r18
    172e:	51 1c       	adc	r5, r1
    1730:	f8 01       	movw	r30, r16
    1732:	a0 80       	ld	r10, Z
    1734:	b1 80       	ldd	r11, Z+1	; 0x01
    1736:	36 fe       	sbrs	r3, 6
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <vfprintf+0x174>
    173a:	69 2d       	mov	r22, r9
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x178>
    1740:	6f ef       	ldi	r22, 0xFF	; 255
    1742:	7f ef       	ldi	r23, 0xFF	; 255
    1744:	c5 01       	movw	r24, r10
    1746:	0e 94 ca 0c 	call	0x1994	; 0x1994 <strnlen_P>
    174a:	4c 01       	movw	r8, r24
    174c:	f3 2d       	mov	r31, r3
    174e:	f0 68       	ori	r31, 0x80	; 128
    1750:	3f 2e       	mov	r3, r31
    1752:	82 01       	movw	r16, r4
    1754:	33 fc       	sbrc	r3, 3
    1756:	1b c0       	rjmp	.+54     	; 0x178e <vfprintf+0x1c2>
    1758:	82 2d       	mov	r24, r2
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	88 16       	cp	r8, r24
    175e:	99 06       	cpc	r9, r25
    1760:	b0 f4       	brcc	.+44     	; 0x178e <vfprintf+0x1c2>
    1762:	b6 01       	movw	r22, r12
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    176c:	2a 94       	dec	r2
    176e:	f4 cf       	rjmp	.-24     	; 0x1758 <vfprintf+0x18c>
    1770:	f5 01       	movw	r30, r10
    1772:	37 fc       	sbrc	r3, 7
    1774:	85 91       	lpm	r24, Z+
    1776:	37 fe       	sbrs	r3, 7
    1778:	81 91       	ld	r24, Z+
    177a:	5f 01       	movw	r10, r30
    177c:	b6 01       	movw	r22, r12
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1784:	21 10       	cpse	r2, r1
    1786:	2a 94       	dec	r2
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	82 1a       	sub	r8, r18
    178c:	91 08       	sbc	r9, r1
    178e:	81 14       	cp	r8, r1
    1790:	91 04       	cpc	r9, r1
    1792:	71 f7       	brne	.-36     	; 0x1770 <vfprintf+0x1a4>
    1794:	e8 c0       	rjmp	.+464    	; 0x1966 <__DATA_REGION_LENGTH__+0x166>
    1796:	84 36       	cpi	r24, 0x64	; 100
    1798:	11 f0       	breq	.+4      	; 0x179e <vfprintf+0x1d2>
    179a:	89 36       	cpi	r24, 0x69	; 105
    179c:	41 f5       	brne	.+80     	; 0x17ee <vfprintf+0x222>
    179e:	f8 01       	movw	r30, r16
    17a0:	37 fe       	sbrs	r3, 7
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <vfprintf+0x1e6>
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0c 5f       	subi	r16, 0xFC	; 252
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <vfprintf+0x1f6>
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	07 2e       	mov	r0, r23
    17b8:	00 0c       	add	r0, r0
    17ba:	88 0b       	sbc	r24, r24
    17bc:	99 0b       	sbc	r25, r25
    17be:	0e 5f       	subi	r16, 0xFE	; 254
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	f3 2d       	mov	r31, r3
    17c4:	ff 76       	andi	r31, 0x6F	; 111
    17c6:	3f 2e       	mov	r3, r31
    17c8:	97 ff       	sbrs	r25, 7
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <vfprintf+0x212>
    17cc:	90 95       	com	r25
    17ce:	80 95       	com	r24
    17d0:	70 95       	com	r23
    17d2:	61 95       	neg	r22
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	8f 4f       	sbci	r24, 0xFF	; 255
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	f0 68       	ori	r31, 0x80	; 128
    17dc:	3f 2e       	mov	r3, r31
    17de:	2a e0       	ldi	r18, 0x0A	; 10
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	a3 01       	movw	r20, r6
    17e4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__ultoa_invert>
    17e8:	88 2e       	mov	r8, r24
    17ea:	86 18       	sub	r8, r6
    17ec:	45 c0       	rjmp	.+138    	; 0x1878 <__DATA_REGION_LENGTH__+0x78>
    17ee:	85 37       	cpi	r24, 0x75	; 117
    17f0:	31 f4       	brne	.+12     	; 0x17fe <vfprintf+0x232>
    17f2:	23 2d       	mov	r18, r3
    17f4:	2f 7e       	andi	r18, 0xEF	; 239
    17f6:	b2 2e       	mov	r11, r18
    17f8:	2a e0       	ldi	r18, 0x0A	; 10
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	25 c0       	rjmp	.+74     	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
    17fe:	93 2d       	mov	r25, r3
    1800:	99 7f       	andi	r25, 0xF9	; 249
    1802:	b9 2e       	mov	r11, r25
    1804:	8f 36       	cpi	r24, 0x6F	; 111
    1806:	c1 f0       	breq	.+48     	; 0x1838 <__DATA_REGION_LENGTH__+0x38>
    1808:	18 f4       	brcc	.+6      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>
    180a:	88 35       	cpi	r24, 0x58	; 88
    180c:	79 f0       	breq	.+30     	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
    180e:	b5 c0       	rjmp	.+362    	; 0x197a <__DATA_REGION_LENGTH__+0x17a>
    1810:	80 37       	cpi	r24, 0x70	; 112
    1812:	19 f0       	breq	.+6      	; 0x181a <__DATA_REGION_LENGTH__+0x1a>
    1814:	88 37       	cpi	r24, 0x78	; 120
    1816:	21 f0       	breq	.+8      	; 0x1820 <__DATA_REGION_LENGTH__+0x20>
    1818:	b0 c0       	rjmp	.+352    	; 0x197a <__DATA_REGION_LENGTH__+0x17a>
    181a:	e9 2f       	mov	r30, r25
    181c:	e0 61       	ori	r30, 0x10	; 16
    181e:	be 2e       	mov	r11, r30
    1820:	b4 fe       	sbrs	r11, 4
    1822:	0d c0       	rjmp	.+26     	; 0x183e <__DATA_REGION_LENGTH__+0x3e>
    1824:	fb 2d       	mov	r31, r11
    1826:	f4 60       	ori	r31, 0x04	; 4
    1828:	bf 2e       	mov	r11, r31
    182a:	09 c0       	rjmp	.+18     	; 0x183e <__DATA_REGION_LENGTH__+0x3e>
    182c:	34 fe       	sbrs	r3, 4
    182e:	0a c0       	rjmp	.+20     	; 0x1844 <__DATA_REGION_LENGTH__+0x44>
    1830:	29 2f       	mov	r18, r25
    1832:	26 60       	ori	r18, 0x06	; 6
    1834:	b2 2e       	mov	r11, r18
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <__DATA_REGION_LENGTH__+0x44>
    1838:	28 e0       	ldi	r18, 0x08	; 8
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
    183e:	20 e1       	ldi	r18, 0x10	; 16
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
    1844:	20 e1       	ldi	r18, 0x10	; 16
    1846:	32 e0       	ldi	r19, 0x02	; 2
    1848:	f8 01       	movw	r30, r16
    184a:	b7 fe       	sbrs	r11, 7
    184c:	07 c0       	rjmp	.+14     	; 0x185c <__DATA_REGION_LENGTH__+0x5c>
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	0c 5f       	subi	r16, 0xFC	; 252
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <__DATA_REGION_LENGTH__+0x68>
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 5f       	subi	r16, 0xFE	; 254
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	a3 01       	movw	r20, r6
    186a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__ultoa_invert>
    186e:	88 2e       	mov	r8, r24
    1870:	86 18       	sub	r8, r6
    1872:	fb 2d       	mov	r31, r11
    1874:	ff 77       	andi	r31, 0x7F	; 127
    1876:	3f 2e       	mov	r3, r31
    1878:	36 fe       	sbrs	r3, 6
    187a:	0d c0       	rjmp	.+26     	; 0x1896 <__DATA_REGION_LENGTH__+0x96>
    187c:	23 2d       	mov	r18, r3
    187e:	2e 7f       	andi	r18, 0xFE	; 254
    1880:	a2 2e       	mov	r10, r18
    1882:	89 14       	cp	r8, r9
    1884:	58 f4       	brcc	.+22     	; 0x189c <__DATA_REGION_LENGTH__+0x9c>
    1886:	34 fe       	sbrs	r3, 4
    1888:	0b c0       	rjmp	.+22     	; 0x18a0 <__DATA_REGION_LENGTH__+0xa0>
    188a:	32 fc       	sbrc	r3, 2
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <__DATA_REGION_LENGTH__+0xa0>
    188e:	83 2d       	mov	r24, r3
    1890:	8e 7e       	andi	r24, 0xEE	; 238
    1892:	a8 2e       	mov	r10, r24
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <__DATA_REGION_LENGTH__+0xa0>
    1896:	b8 2c       	mov	r11, r8
    1898:	a3 2c       	mov	r10, r3
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <__DATA_REGION_LENGTH__+0xa2>
    189c:	b8 2c       	mov	r11, r8
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <__DATA_REGION_LENGTH__+0xa2>
    18a0:	b9 2c       	mov	r11, r9
    18a2:	a4 fe       	sbrs	r10, 4
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <__DATA_REGION_LENGTH__+0xc4>
    18a6:	fe 01       	movw	r30, r28
    18a8:	e8 0d       	add	r30, r8
    18aa:	f1 1d       	adc	r31, r1
    18ac:	80 81       	ld	r24, Z
    18ae:	80 33       	cpi	r24, 0x30	; 48
    18b0:	21 f4       	brne	.+8      	; 0x18ba <__DATA_REGION_LENGTH__+0xba>
    18b2:	9a 2d       	mov	r25, r10
    18b4:	99 7e       	andi	r25, 0xE9	; 233
    18b6:	a9 2e       	mov	r10, r25
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <__DATA_REGION_LENGTH__+0xcc>
    18ba:	a2 fe       	sbrs	r10, 2
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <__DATA_REGION_LENGTH__+0xca>
    18be:	b3 94       	inc	r11
    18c0:	b3 94       	inc	r11
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <__DATA_REGION_LENGTH__+0xcc>
    18c4:	8a 2d       	mov	r24, r10
    18c6:	86 78       	andi	r24, 0x86	; 134
    18c8:	09 f0       	breq	.+2      	; 0x18cc <__DATA_REGION_LENGTH__+0xcc>
    18ca:	b3 94       	inc	r11
    18cc:	a3 fc       	sbrc	r10, 3
    18ce:	11 c0       	rjmp	.+34     	; 0x18f2 <__DATA_REGION_LENGTH__+0xf2>
    18d0:	a0 fe       	sbrs	r10, 0
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <__DATA_REGION_LENGTH__+0xe0>
    18d4:	b2 14       	cp	r11, r2
    18d6:	88 f4       	brcc	.+34     	; 0x18fa <__DATA_REGION_LENGTH__+0xfa>
    18d8:	28 0c       	add	r2, r8
    18da:	92 2c       	mov	r9, r2
    18dc:	9b 18       	sub	r9, r11
    18de:	0e c0       	rjmp	.+28     	; 0x18fc <__DATA_REGION_LENGTH__+0xfc>
    18e0:	b2 14       	cp	r11, r2
    18e2:	60 f4       	brcc	.+24     	; 0x18fc <__DATA_REGION_LENGTH__+0xfc>
    18e4:	b6 01       	movw	r22, r12
    18e6:	80 e2       	ldi	r24, 0x20	; 32
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    18ee:	b3 94       	inc	r11
    18f0:	f7 cf       	rjmp	.-18     	; 0x18e0 <__DATA_REGION_LENGTH__+0xe0>
    18f2:	b2 14       	cp	r11, r2
    18f4:	18 f4       	brcc	.+6      	; 0x18fc <__DATA_REGION_LENGTH__+0xfc>
    18f6:	2b 18       	sub	r2, r11
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <__DATA_REGION_LENGTH__+0xfe>
    18fa:	98 2c       	mov	r9, r8
    18fc:	21 2c       	mov	r2, r1
    18fe:	a4 fe       	sbrs	r10, 4
    1900:	10 c0       	rjmp	.+32     	; 0x1922 <__DATA_REGION_LENGTH__+0x122>
    1902:	b6 01       	movw	r22, r12
    1904:	80 e3       	ldi	r24, 0x30	; 48
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    190c:	a2 fe       	sbrs	r10, 2
    190e:	17 c0       	rjmp	.+46     	; 0x193e <__DATA_REGION_LENGTH__+0x13e>
    1910:	a1 fc       	sbrc	r10, 1
    1912:	03 c0       	rjmp	.+6      	; 0x191a <__DATA_REGION_LENGTH__+0x11a>
    1914:	88 e7       	ldi	r24, 0x78	; 120
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <__DATA_REGION_LENGTH__+0x11e>
    191a:	88 e5       	ldi	r24, 0x58	; 88
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	b6 01       	movw	r22, r12
    1920:	0c c0       	rjmp	.+24     	; 0x193a <__DATA_REGION_LENGTH__+0x13a>
    1922:	8a 2d       	mov	r24, r10
    1924:	86 78       	andi	r24, 0x86	; 134
    1926:	59 f0       	breq	.+22     	; 0x193e <__DATA_REGION_LENGTH__+0x13e>
    1928:	a1 fe       	sbrs	r10, 1
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <__DATA_REGION_LENGTH__+0x130>
    192c:	8b e2       	ldi	r24, 0x2B	; 43
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <__DATA_REGION_LENGTH__+0x132>
    1930:	80 e2       	ldi	r24, 0x20	; 32
    1932:	a7 fc       	sbrc	r10, 7
    1934:	8d e2       	ldi	r24, 0x2D	; 45
    1936:	b6 01       	movw	r22, r12
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    193e:	89 14       	cp	r8, r9
    1940:	38 f4       	brcc	.+14     	; 0x1950 <__DATA_REGION_LENGTH__+0x150>
    1942:	b6 01       	movw	r22, r12
    1944:	80 e3       	ldi	r24, 0x30	; 48
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    194c:	9a 94       	dec	r9
    194e:	f7 cf       	rjmp	.-18     	; 0x193e <__DATA_REGION_LENGTH__+0x13e>
    1950:	8a 94       	dec	r8
    1952:	f3 01       	movw	r30, r6
    1954:	e8 0d       	add	r30, r8
    1956:	f1 1d       	adc	r31, r1
    1958:	80 81       	ld	r24, Z
    195a:	b6 01       	movw	r22, r12
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1962:	81 10       	cpse	r8, r1
    1964:	f5 cf       	rjmp	.-22     	; 0x1950 <__DATA_REGION_LENGTH__+0x150>
    1966:	22 20       	and	r2, r2
    1968:	09 f4       	brne	.+2      	; 0x196c <__DATA_REGION_LENGTH__+0x16c>
    196a:	42 ce       	rjmp	.-892    	; 0x15f0 <vfprintf+0x24>
    196c:	b6 01       	movw	r22, r12
    196e:	80 e2       	ldi	r24, 0x20	; 32
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    1976:	2a 94       	dec	r2
    1978:	f6 cf       	rjmp	.-20     	; 0x1966 <__DATA_REGION_LENGTH__+0x166>
    197a:	f6 01       	movw	r30, r12
    197c:	86 81       	ldd	r24, Z+6	; 0x06
    197e:	97 81       	ldd	r25, Z+7	; 0x07
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <__DATA_REGION_LENGTH__+0x186>
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	2b 96       	adiw	r28, 0x0b	; 11
    1988:	e2 e1       	ldi	r30, 0x12	; 18
    198a:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__epilogue_restores__>

0000198e <__ctype_isfalse>:
    198e:	99 27       	eor	r25, r25
    1990:	88 27       	eor	r24, r24

00001992 <__ctype_istrue>:
    1992:	08 95       	ret

00001994 <strnlen_P>:
    1994:	fc 01       	movw	r30, r24
    1996:	05 90       	lpm	r0, Z+
    1998:	61 50       	subi	r22, 0x01	; 1
    199a:	70 40       	sbci	r23, 0x00	; 0
    199c:	01 10       	cpse	r0, r1
    199e:	d8 f7       	brcc	.-10     	; 0x1996 <strnlen_P+0x2>
    19a0:	80 95       	com	r24
    19a2:	90 95       	com	r25
    19a4:	8e 0f       	add	r24, r30
    19a6:	9f 1f       	adc	r25, r31
    19a8:	08 95       	ret

000019aa <strnlen>:
    19aa:	fc 01       	movw	r30, r24
    19ac:	61 50       	subi	r22, 0x01	; 1
    19ae:	70 40       	sbci	r23, 0x00	; 0
    19b0:	01 90       	ld	r0, Z+
    19b2:	01 10       	cpse	r0, r1
    19b4:	d8 f7       	brcc	.-10     	; 0x19ac <strnlen+0x2>
    19b6:	80 95       	com	r24
    19b8:	90 95       	com	r25
    19ba:	8e 0f       	add	r24, r30
    19bc:	9f 1f       	adc	r25, r31
    19be:	08 95       	ret

000019c0 <fputc>:
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	fb 01       	movw	r30, r22
    19ca:	23 81       	ldd	r18, Z+3	; 0x03
    19cc:	21 fd       	sbrc	r18, 1
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <fputc+0x16>
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
    19d4:	2c c0       	rjmp	.+88     	; 0x1a2e <fputc+0x6e>
    19d6:	22 ff       	sbrs	r18, 2
    19d8:	16 c0       	rjmp	.+44     	; 0x1a06 <fputc+0x46>
    19da:	46 81       	ldd	r20, Z+6	; 0x06
    19dc:	57 81       	ldd	r21, Z+7	; 0x07
    19de:	24 81       	ldd	r18, Z+4	; 0x04
    19e0:	35 81       	ldd	r19, Z+5	; 0x05
    19e2:	42 17       	cp	r20, r18
    19e4:	53 07       	cpc	r21, r19
    19e6:	44 f4       	brge	.+16     	; 0x19f8 <fputc+0x38>
    19e8:	a0 81       	ld	r26, Z
    19ea:	b1 81       	ldd	r27, Z+1	; 0x01
    19ec:	9d 01       	movw	r18, r26
    19ee:	2f 5f       	subi	r18, 0xFF	; 255
    19f0:	3f 4f       	sbci	r19, 0xFF	; 255
    19f2:	20 83       	st	Z, r18
    19f4:	31 83       	std	Z+1, r19	; 0x01
    19f6:	8c 93       	st	X, r24
    19f8:	26 81       	ldd	r18, Z+6	; 0x06
    19fa:	37 81       	ldd	r19, Z+7	; 0x07
    19fc:	2f 5f       	subi	r18, 0xFF	; 255
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	26 83       	std	Z+6, r18	; 0x06
    1a02:	37 83       	std	Z+7, r19	; 0x07
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <fputc+0x6e>
    1a06:	8b 01       	movw	r16, r22
    1a08:	ec 01       	movw	r28, r24
    1a0a:	fb 01       	movw	r30, r22
    1a0c:	00 84       	ldd	r0, Z+8	; 0x08
    1a0e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a10:	e0 2d       	mov	r30, r0
    1a12:	09 95       	icall
    1a14:	89 2b       	or	r24, r25
    1a16:	e1 f6       	brne	.-72     	; 0x19d0 <fputc+0x10>
    1a18:	d8 01       	movw	r26, r16
    1a1a:	16 96       	adiw	r26, 0x06	; 6
    1a1c:	8d 91       	ld	r24, X+
    1a1e:	9c 91       	ld	r25, X
    1a20:	17 97       	sbiw	r26, 0x07	; 7
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	16 96       	adiw	r26, 0x06	; 6
    1a26:	8d 93       	st	X+, r24
    1a28:	9c 93       	st	X, r25
    1a2a:	17 97       	sbiw	r26, 0x07	; 7
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <__ultoa_invert>:
    1a38:	fa 01       	movw	r30, r20
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	28 30       	cpi	r18, 0x08	; 8
    1a3e:	51 f1       	breq	.+84     	; 0x1a94 <__ultoa_invert+0x5c>
    1a40:	20 31       	cpi	r18, 0x10	; 16
    1a42:	81 f1       	breq	.+96     	; 0x1aa4 <__ultoa_invert+0x6c>
    1a44:	e8 94       	clt
    1a46:	6f 93       	push	r22
    1a48:	6e 7f       	andi	r22, 0xFE	; 254
    1a4a:	6e 5f       	subi	r22, 0xFE	; 254
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	af 4f       	sbci	r26, 0xFF	; 255
    1a54:	b1 e0       	ldi	r27, 0x01	; 1
    1a56:	3e d0       	rcall	.+124    	; 0x1ad4 <__ultoa_invert+0x9c>
    1a58:	b4 e0       	ldi	r27, 0x04	; 4
    1a5a:	3c d0       	rcall	.+120    	; 0x1ad4 <__ultoa_invert+0x9c>
    1a5c:	67 0f       	add	r22, r23
    1a5e:	78 1f       	adc	r23, r24
    1a60:	89 1f       	adc	r24, r25
    1a62:	9a 1f       	adc	r25, r26
    1a64:	a1 1d       	adc	r26, r1
    1a66:	68 0f       	add	r22, r24
    1a68:	79 1f       	adc	r23, r25
    1a6a:	8a 1f       	adc	r24, r26
    1a6c:	91 1d       	adc	r25, r1
    1a6e:	a1 1d       	adc	r26, r1
    1a70:	6a 0f       	add	r22, r26
    1a72:	71 1d       	adc	r23, r1
    1a74:	81 1d       	adc	r24, r1
    1a76:	91 1d       	adc	r25, r1
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	20 d0       	rcall	.+64     	; 0x1abc <__ultoa_invert+0x84>
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <__ultoa_invert+0x48>
    1a7e:	68 94       	set
    1a80:	3f 91       	pop	r19
    1a82:	2a e0       	ldi	r18, 0x0A	; 10
    1a84:	26 9f       	mul	r18, r22
    1a86:	11 24       	eor	r1, r1
    1a88:	30 19       	sub	r19, r0
    1a8a:	30 5d       	subi	r19, 0xD0	; 208
    1a8c:	31 93       	st	Z+, r19
    1a8e:	de f6       	brtc	.-74     	; 0x1a46 <__ultoa_invert+0xe>
    1a90:	cf 01       	movw	r24, r30
    1a92:	08 95       	ret
    1a94:	46 2f       	mov	r20, r22
    1a96:	47 70       	andi	r20, 0x07	; 7
    1a98:	40 5d       	subi	r20, 0xD0	; 208
    1a9a:	41 93       	st	Z+, r20
    1a9c:	b3 e0       	ldi	r27, 0x03	; 3
    1a9e:	0f d0       	rcall	.+30     	; 0x1abe <__ultoa_invert+0x86>
    1aa0:	c9 f7       	brne	.-14     	; 0x1a94 <__ultoa_invert+0x5c>
    1aa2:	f6 cf       	rjmp	.-20     	; 0x1a90 <__ultoa_invert+0x58>
    1aa4:	46 2f       	mov	r20, r22
    1aa6:	4f 70       	andi	r20, 0x0F	; 15
    1aa8:	40 5d       	subi	r20, 0xD0	; 208
    1aaa:	4a 33       	cpi	r20, 0x3A	; 58
    1aac:	18 f0       	brcs	.+6      	; 0x1ab4 <__ultoa_invert+0x7c>
    1aae:	49 5d       	subi	r20, 0xD9	; 217
    1ab0:	31 fd       	sbrc	r19, 1
    1ab2:	40 52       	subi	r20, 0x20	; 32
    1ab4:	41 93       	st	Z+, r20
    1ab6:	02 d0       	rcall	.+4      	; 0x1abc <__ultoa_invert+0x84>
    1ab8:	a9 f7       	brne	.-22     	; 0x1aa4 <__ultoa_invert+0x6c>
    1aba:	ea cf       	rjmp	.-44     	; 0x1a90 <__ultoa_invert+0x58>
    1abc:	b4 e0       	ldi	r27, 0x04	; 4
    1abe:	a6 95       	lsr	r26
    1ac0:	97 95       	ror	r25
    1ac2:	87 95       	ror	r24
    1ac4:	77 95       	ror	r23
    1ac6:	67 95       	ror	r22
    1ac8:	ba 95       	dec	r27
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__ultoa_invert+0x86>
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	61 05       	cpc	r22, r1
    1ad0:	71 05       	cpc	r23, r1
    1ad2:	08 95       	ret
    1ad4:	9b 01       	movw	r18, r22
    1ad6:	ac 01       	movw	r20, r24
    1ad8:	0a 2e       	mov	r0, r26
    1ada:	06 94       	lsr	r0
    1adc:	57 95       	ror	r21
    1ade:	47 95       	ror	r20
    1ae0:	37 95       	ror	r19
    1ae2:	27 95       	ror	r18
    1ae4:	ba 95       	dec	r27
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__ultoa_invert+0xa2>
    1ae8:	62 0f       	add	r22, r18
    1aea:	73 1f       	adc	r23, r19
    1aec:	84 1f       	adc	r24, r20
    1aee:	95 1f       	adc	r25, r21
    1af0:	a0 1d       	adc	r26, r0
    1af2:	08 95       	ret

00001af4 <__mulsi3>:
    1af4:	db 01       	movw	r26, r22
    1af6:	8f 93       	push	r24
    1af8:	9f 93       	push	r25
    1afa:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__muluhisi3>
    1afe:	bf 91       	pop	r27
    1b00:	af 91       	pop	r26
    1b02:	a2 9f       	mul	r26, r18
    1b04:	80 0d       	add	r24, r0
    1b06:	91 1d       	adc	r25, r1
    1b08:	a3 9f       	mul	r26, r19
    1b0a:	90 0d       	add	r25, r0
    1b0c:	b2 9f       	mul	r27, r18
    1b0e:	90 0d       	add	r25, r0
    1b10:	11 24       	eor	r1, r1
    1b12:	08 95       	ret

00001b14 <__udivmodsi4>:
    1b14:	a1 e2       	ldi	r26, 0x21	; 33
    1b16:	1a 2e       	mov	r1, r26
    1b18:	aa 1b       	sub	r26, r26
    1b1a:	bb 1b       	sub	r27, r27
    1b1c:	fd 01       	movw	r30, r26
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <__udivmodsi4_ep>

00001b20 <__udivmodsi4_loop>:
    1b20:	aa 1f       	adc	r26, r26
    1b22:	bb 1f       	adc	r27, r27
    1b24:	ee 1f       	adc	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	a2 17       	cp	r26, r18
    1b2a:	b3 07       	cpc	r27, r19
    1b2c:	e4 07       	cpc	r30, r20
    1b2e:	f5 07       	cpc	r31, r21
    1b30:	20 f0       	brcs	.+8      	; 0x1b3a <__udivmodsi4_ep>
    1b32:	a2 1b       	sub	r26, r18
    1b34:	b3 0b       	sbc	r27, r19
    1b36:	e4 0b       	sbc	r30, r20
    1b38:	f5 0b       	sbc	r31, r21

00001b3a <__udivmodsi4_ep>:
    1b3a:	66 1f       	adc	r22, r22
    1b3c:	77 1f       	adc	r23, r23
    1b3e:	88 1f       	adc	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	1a 94       	dec	r1
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <__udivmodsi4_loop>
    1b46:	60 95       	com	r22
    1b48:	70 95       	com	r23
    1b4a:	80 95       	com	r24
    1b4c:	90 95       	com	r25
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
    1b52:	bd 01       	movw	r22, r26
    1b54:	cf 01       	movw	r24, r30
    1b56:	08 95       	ret

00001b58 <__muluhisi3>:
    1b58:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__umulhisi3>
    1b5c:	a5 9f       	mul	r26, r21
    1b5e:	90 0d       	add	r25, r0
    1b60:	b4 9f       	mul	r27, r20
    1b62:	90 0d       	add	r25, r0
    1b64:	a4 9f       	mul	r26, r20
    1b66:	80 0d       	add	r24, r0
    1b68:	91 1d       	adc	r25, r1
    1b6a:	11 24       	eor	r1, r1
    1b6c:	08 95       	ret

00001b6e <__prologue_saves__>:
    1b6e:	2f 92       	push	r2
    1b70:	3f 92       	push	r3
    1b72:	4f 92       	push	r4
    1b74:	5f 92       	push	r5
    1b76:	6f 92       	push	r6
    1b78:	7f 92       	push	r7
    1b7a:	8f 92       	push	r8
    1b7c:	9f 92       	push	r9
    1b7e:	af 92       	push	r10
    1b80:	bf 92       	push	r11
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	ca 1b       	sub	r28, r26
    1b98:	db 0b       	sbc	r29, r27
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	09 94       	ijmp

00001ba0 <__epilogue_restores__>:
    1ba0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ba2:	39 88       	ldd	r3, Y+17	; 0x11
    1ba4:	48 88       	ldd	r4, Y+16	; 0x10
    1ba6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ba8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1baa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bac:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bae:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bb2:	b9 84       	ldd	r11, Y+9	; 0x09
    1bb4:	c8 84       	ldd	r12, Y+8	; 0x08
    1bb6:	df 80       	ldd	r13, Y+7	; 0x07
    1bb8:	ee 80       	ldd	r14, Y+6	; 0x06
    1bba:	fd 80       	ldd	r15, Y+5	; 0x05
    1bbc:	0c 81       	ldd	r16, Y+4	; 0x04
    1bbe:	1b 81       	ldd	r17, Y+3	; 0x03
    1bc0:	aa 81       	ldd	r26, Y+2	; 0x02
    1bc2:	b9 81       	ldd	r27, Y+1	; 0x01
    1bc4:	ce 0f       	add	r28, r30
    1bc6:	d1 1d       	adc	r29, r1
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	ed 01       	movw	r28, r26
    1bce:	08 95       	ret

00001bd0 <_exit>:
    1bd0:	f8 94       	cli

00001bd2 <__stop_program>:
    1bd2:	ff cf       	rjmp	.-2      	; 0x1bd2 <__stop_program>
