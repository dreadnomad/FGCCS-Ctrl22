
atmevse_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00802800  00002028  00001edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ac2  00000200  00000200  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000366  00005cc2  00001cc2  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000fa  00802928  00802928  00002004  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004dba  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002908  00000000  00000000  00006fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001389  00000000  00000000  000098ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000448  00000000  00000000  0000ac74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002352  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ebe  00000000  00000000  0000d40e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  0000e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000200 <__vectors>:
     200:	0c 94 48 01 	jmp	0x290	; 0x290 <__ctors_end>
     204:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     208:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     20c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     210:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     214:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     218:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     21c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     220:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     224:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     228:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     22c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     230:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_12>
     234:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     238:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     23c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     240:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     244:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     248:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     24c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     250:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_20>
     254:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     258:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     25c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     260:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     264:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     268:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     26c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     270:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     274:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     278:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     27c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     280:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     284:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     288:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     28c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df e3       	ldi	r29, 0x3F	; 63
     29a:	de bf       	out	0x3e, r29	; 62

0000029c <__do_copy_data>:
     29c:	19 e2       	ldi	r17, 0x29	; 41
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b8 e2       	ldi	r27, 0x28	; 40
     2a2:	e8 e2       	ldi	r30, 0x28	; 40
     2a4:	f0 e2       	ldi	r31, 0x20	; 32
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x10>
     2a8:	05 90       	lpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	a8 32       	cpi	r26, 0x28	; 40
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0xc>

000002b2 <__do_clear_bss>:
     2b2:	2a e2       	ldi	r18, 0x2A	; 42
     2b4:	a8 e2       	ldi	r26, 0x28	; 40
     2b6:	b9 e2       	ldi	r27, 0x29	; 41
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a2 32       	cpi	r26, 0x22	; 34
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 1a 04 	call	0x834	; 0x834 <main>
     2c6:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <_exit>

000002ca <__bad_interrupt>:
     2ca:	0c 94 00 01 	jmp	0x200	; 0x200 <__vectors>

000002ce <led_toggle>:
        return 0;        
    } 
    else {
        return -1;
    }
}
     2ce:	88 e0       	ldi	r24, 0x08	; 8
     2d0:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <__TEXT_REGION_LENGTH__+0x7f4467>
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	08 95       	ret

000002d8 <led_on>:
     2d8:	88 e0       	ldi	r24, 0x08	; 8
     2da:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	08 95       	ret

000002e2 <led_off>:
     2e2:	88 e0       	ldi	r24, 0x08	; 8
     2e4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 95       	ret

000002ec <pwm_on>:
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	81 81       	ldd	r24, Z+1	; 0x01
     2f2:	80 64       	ori	r24, 0x40	; 64
     2f4:	81 83       	std	Z+1, r24	; 0x01
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <pwm_off>:
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	fa e0       	ldi	r31, 0x0A	; 10
     2fe:	81 81       	ldd	r24, Z+1	; 0x01
     300:	8f 7b       	andi	r24, 0xBF	; 191
     302:	81 83       	std	Z+1, r24	; 0x01
     304:	84 e0       	ldi	r24, 0x04	; 4
     306:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 95       	ret

0000030e <ssr1_on>:
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	08 95       	ret

00000318 <ssr1_off>:
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	08 95       	ret

00000322 <ssr2_on>:
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	08 95       	ret

0000032c <ssr2_off>:
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	08 95       	ret

00000336 <ssr3_on>:
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	08 95       	ret

00000340 <ssr3_off>:
     340:	80 e1       	ldi	r24, 0x10	; 16
     342:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	08 95       	ret

0000034a <lock_off>:
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     350:	84 e0       	ldi	r24, 0x04	; 4
     352:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	08 95       	ret

0000035a <relay_on>:
     35a:	88 e0       	ldi	r24, 0x08	; 8
     35c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret

00000364 <relay_off>:
     364:	88 e0       	ldi	r24, 0x08	; 8
     366:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret

0000036e <readCP>:
     36e:	e0 e0       	ldi	r30, 0x00	; 0
     370:	f6 e0       	ldi	r31, 0x06	; 6
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	86 83       	std	Z+6, r24	; 0x06
     376:	80 87       	std	Z+8, r24	; 0x08
     378:	83 85       	ldd	r24, Z+11	; 0x0b
     37a:	80 ff       	sbrs	r24, 0
     37c:	fd cf       	rjmp	.-6      	; 0x378 <readCP+0xa>
     37e:	e0 e0       	ldi	r30, 0x00	; 0
     380:	f6 e0       	ldi	r31, 0x06	; 6
     382:	80 89       	ldd	r24, Z+16	; 0x10
     384:	91 89       	ldd	r25, Z+17	; 0x11
     386:	80 93 48 29 	sts	0x2948, r24	; 0x802948 <cpVal>
     38a:	90 93 49 29 	sts	0x2949, r25	; 0x802949 <cpVal+0x1>
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	23 87       	std	Z+11, r18	; 0x0b
     392:	85 3d       	cpi	r24, 0xD5	; 213
     394:	23 e0       	ldi	r18, 0x03	; 3
     396:	92 07       	cpc	r25, r18
     398:	20 f0       	brcs	.+8      	; 0x3a2 <readCP+0x34>
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <pilot>
     3a0:	1e c0       	rjmp	.+60     	; 0x3de <readCP+0x70>
     3a2:	9c 01       	movw	r18, r24
     3a4:	2d 55       	subi	r18, 0x5D	; 93
     3a6:	33 40       	sbci	r19, 0x03	; 3
     3a8:	26 33       	cpi	r18, 0x36	; 54
     3aa:	31 05       	cpc	r19, r1
     3ac:	20 f4       	brcc	.+8      	; 0x3b6 <readCP+0x48>
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <pilot>
     3b4:	14 c0       	rjmp	.+40     	; 0x3de <readCP+0x70>
     3b6:	9c 01       	movw	r18, r24
     3b8:	21 5d       	subi	r18, 0xD1	; 209
     3ba:	32 40       	sbci	r19, 0x02	; 2
     3bc:	2f 34       	cpi	r18, 0x4F	; 79
     3be:	31 05       	cpc	r19, r1
     3c0:	20 f4       	brcc	.+8      	; 0x3ca <readCP+0x5c>
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <pilot>
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <readCP+0x70>
     3ca:	4a 97       	sbiw	r24, 0x1a	; 26
     3cc:	85 34       	cpi	r24, 0x45	; 69
     3ce:	91 05       	cpc	r25, r1
     3d0:	20 f4       	brcc	.+8      	; 0x3da <readCP+0x6c>
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <pilot>
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <readCP+0x70>
     3da:	10 92 47 29 	sts	0x2947, r1	; 0x802947 <pilot>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	08 95       	ret

000003e2 <readPP>:
     3e2:	e0 e0       	ldi	r30, 0x00	; 0
     3e4:	f6 e0       	ldi	r31, 0x06	; 6
     3e6:	16 82       	std	Z+6, r1	; 0x06
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 87       	std	Z+8, r24	; 0x08
     3ec:	83 85       	ldd	r24, Z+11	; 0x0b
     3ee:	80 ff       	sbrs	r24, 0
     3f0:	fd cf       	rjmp	.-6      	; 0x3ec <readPP+0xa>
     3f2:	e0 e0       	ldi	r30, 0x00	; 0
     3f4:	f6 e0       	ldi	r31, 0x06	; 6
     3f6:	80 89       	ldd	r24, Z+16	; 0x10
     3f8:	91 89       	ldd	r25, Z+17	; 0x11
     3fa:	80 93 4a 29 	sts	0x294A, r24	; 0x80294a <ppVal>
     3fe:	90 93 4b 29 	sts	0x294B, r25	; 0x80294b <ppVal+0x1>
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	23 87       	std	Z+11, r18	; 0x0b
     406:	9c 01       	movw	r18, r24
     408:	2b 58       	subi	r18, 0x8B	; 139
     40a:	31 40       	sbci	r19, 0x01	; 1
     40c:	27 32       	cpi	r18, 0x27	; 39
     40e:	31 05       	cpc	r19, r1
     410:	20 f4       	brcc	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <maxCapacity>
     418:	15 c0       	rjmp	.+42     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     41a:	9c 01       	movw	r18, r24
     41c:	20 5b       	subi	r18, 0xB0	; 176
     41e:	31 09       	sbc	r19, r1
     420:	21 31       	cpi	r18, 0x11	; 17
     422:	31 05       	cpc	r19, r1
     424:	20 f4       	brcc	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     426:	80 e2       	ldi	r24, 0x20	; 32
     428:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <maxCapacity>
     42c:	0b c0       	rjmp	.+22     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     42e:	89 55       	subi	r24, 0x59	; 89
     430:	91 09       	sbc	r25, r1
     432:	09 97       	sbiw	r24, 0x09	; 9
     434:	20 f0       	brcs	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     436:	8d e0       	ldi	r24, 0x0D	; 13
     438:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <maxCapacity>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43e:	8f e3       	ldi	r24, 0x3F	; 63
     440:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <maxCapacity>
     444:	80 91 35 29 	lds	r24, 0x2935	; 0x802935 <cableConf>
     448:	88 23       	and	r24, r24
     44a:	21 f0       	breq	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44c:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <maxCurrent>
     450:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <maxCapacity>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	08 95       	ret

00000458 <readCT>:
     458:	e0 e0       	ldi	r30, 0x00	; 0
     45a:	f6 e0       	ldi	r31, 0x06	; 6
     45c:	85 e0       	ldi	r24, 0x05	; 5
     45e:	86 83       	std	Z+6, r24	; 0x06
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 87       	std	Z+8, r24	; 0x08
     464:	83 85       	ldd	r24, Z+11	; 0x0b
     466:	80 ff       	sbrs	r24, 0
     468:	fd cf       	rjmp	.-6      	; 0x464 <readCT+0xc>
     46a:	e0 e0       	ldi	r30, 0x00	; 0
     46c:	f6 e0       	ldi	r31, 0x06	; 6
     46e:	80 89       	ldd	r24, Z+16	; 0x10
     470:	91 89       	ldd	r25, Z+17	; 0x11
     472:	80 93 52 29 	sts	0x2952, r24	; 0x802952 <ctVal>
     476:	90 93 53 29 	sts	0x2953, r25	; 0x802953 <ctVal+0x1>
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	83 87       	std	Z+11, r24	; 0x0b
     47e:	96 e0       	ldi	r25, 0x06	; 6
     480:	96 83       	std	Z+6, r25	; 0x06
     482:	80 87       	std	Z+8, r24	; 0x08
     484:	83 85       	ldd	r24, Z+11	; 0x0b
     486:	80 ff       	sbrs	r24, 0
     488:	fd cf       	rjmp	.-6      	; 0x484 <readCT+0x2c>
     48a:	e0 e0       	ldi	r30, 0x00	; 0
     48c:	f6 e0       	ldi	r31, 0x06	; 6
     48e:	80 89       	ldd	r24, Z+16	; 0x10
     490:	91 89       	ldd	r25, Z+17	; 0x11
     492:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <ctVal+0x2>
     496:	90 93 55 29 	sts	0x2955, r25	; 0x802955 <ctVal+0x3>
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	83 87       	std	Z+11, r24	; 0x0b
     49e:	97 e0       	ldi	r25, 0x07	; 7
     4a0:	96 83       	std	Z+6, r25	; 0x06
     4a2:	80 87       	std	Z+8, r24	; 0x08
     4a4:	83 85       	ldd	r24, Z+11	; 0x0b
     4a6:	80 ff       	sbrs	r24, 0
     4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <readCT+0x4c>
     4aa:	e0 e0       	ldi	r30, 0x00	; 0
     4ac:	f6 e0       	ldi	r31, 0x06	; 6
     4ae:	80 89       	ldd	r24, Z+16	; 0x10
     4b0:	91 89       	ldd	r25, Z+17	; 0x11
     4b2:	80 93 56 29 	sts	0x2956, r24	; 0x802956 <ctVal+0x4>
     4b6:	90 93 57 29 	sts	0x2957, r25	; 0x802957 <ctVal+0x5>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	83 87       	std	Z+11, r24	; 0x0b
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	08 95       	ret

000004c2 <lock_cable>:
     4c2:	80 e8       	ldi	r24, 0x80	; 128
     4c4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
     4c8:	84 e0       	ldi	r24, 0x04	; 4
     4ca:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     4ce:	2f eb       	ldi	r18, 0xBF	; 191
     4d0:	87 e2       	ldi	r24, 0x27	; 39
     4d2:	99 e0       	ldi	r25, 0x09	; 9
     4d4:	21 50       	subi	r18, 0x01	; 1
     4d6:	80 40       	sbci	r24, 0x00	; 0
     4d8:	90 40       	sbci	r25, 0x00	; 0
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <lock_cable+0x12>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <lock_cable+0x1c>
     4de:	00 00       	nop
     4e0:	0e 94 a5 01 	call	0x34a	; 0x34a <lock_off>
     4e4:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	28 2f       	mov	r18, r24
     4ec:	24 70       	andi	r18, 0x04	; 4
     4ee:	82 ff       	sbrs	r24, 2
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	90 93 37 29 	sts	0x2937, r25	; 0x802937 <lockstate>
     4f6:	21 11       	cpse	r18, r1
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <lock_cable+0x3c>
     4fa:	8e ef       	ldi	r24, 0xFE	; 254
     4fc:	08 95       	ret
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 95       	ret

00000502 <unlock_cable>:
     502:	80 e8       	ldi	r24, 0x80	; 128
     504:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
     50e:	2f eb       	ldi	r18, 0xBF	; 191
     510:	87 e2       	ldi	r24, 0x27	; 39
     512:	99 e0       	ldi	r25, 0x09	; 9
     514:	21 50       	subi	r18, 0x01	; 1
     516:	80 40       	sbci	r24, 0x00	; 0
     518:	90 40       	sbci	r25, 0x00	; 0
     51a:	e1 f7       	brne	.-8      	; 0x514 <unlock_cable+0x12>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <unlock_cable+0x1c>
     51e:	00 00       	nop
     520:	0e 94 a5 01 	call	0x34a	; 0x34a <lock_off>
     524:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	28 2f       	mov	r18, r24
     52c:	24 70       	andi	r18, 0x04	; 4
     52e:	82 ff       	sbrs	r24, 2
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	90 93 37 29 	sts	0x2937, r25	; 0x802937 <lockstate>
     536:	22 23       	and	r18, r18
     538:	11 f0       	breq	.+4      	; 0x53e <unlock_cable+0x3c>
     53a:	8e ef       	ldi	r24, 0xFE	; 254
     53c:	08 95       	ret
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 95       	ret

00000542 <readTemp>:
     542:	e0 e0       	ldi	r30, 0x00	; 0
     544:	f6 e0       	ldi	r31, 0x06	; 6
     546:	80 81       	ld	r24, Z
     548:	8e 7f       	andi	r24, 0xFE	; 254
     54a:	80 83       	st	Z, r24
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	82 83       	std	Z+2, r24	; 0x02
     550:	8e e1       	ldi	r24, 0x1E	; 30
     552:	86 83       	std	Z+6, r24	; 0x06
     554:	83 81       	ldd	r24, Z+3	; 0x03
     556:	80 62       	ori	r24, 0x20	; 32
     558:	83 83       	std	Z+3, r24	; 0x03
     55a:	80 81       	ld	r24, Z
     55c:	81 60       	ori	r24, 0x01	; 1
     55e:	80 83       	st	Z, r24
     560:	89 ef       	ldi	r24, 0xF9	; 249
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <readTemp+0x22>
     568:	00 c0       	rjmp	.+0      	; 0x56a <readTemp+0x28>
     56a:	00 00       	nop
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 87       	std	Z+8, r24	; 0x08
     570:	83 85       	ldd	r24, Z+11	; 0x0b
     572:	80 ff       	sbrs	r24, 0
     574:	fd cf       	rjmp	.-6      	; 0x570 <readTemp+0x2e>
     576:	e0 e0       	ldi	r30, 0x00	; 0
     578:	f6 e0       	ldi	r31, 0x06	; 6
     57a:	20 89       	ldd	r18, Z+16	; 0x10
     57c:	31 89       	ldd	r19, Z+17	; 0x11
     57e:	80 91 2d 29 	lds	r24, 0x292D	; 0x80292d <sigrow_offset>
     582:	28 1b       	sub	r18, r24
     584:	31 09       	sbc	r19, r1
     586:	87 fd       	sbrc	r24, 7
     588:	33 95       	inc	r19
     58a:	a0 91 2c 29 	lds	r26, 0x292C	; 0x80292c <sigrow_gain>
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	0e 94 ca 09 	call	0x1394	; 0x1394 <__umulhisi3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	80 58       	subi	r24, 0x80	; 128
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
     59c:	af 4f       	sbci	r26, 0xFF	; 255
     59e:	bf 4f       	sbci	r27, 0xFF	; 255
     5a0:	89 2f       	mov	r24, r25
     5a2:	9a 2f       	mov	r25, r26
     5a4:	ab 2f       	mov	r26, r27
     5a6:	bb 27       	eor	r27, r27
     5a8:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <temperature>
     5ac:	90 93 46 29 	sts	0x2946, r25	; 0x802946 <temperature+0x1>
     5b0:	80 81       	ld	r24, Z
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	80 83       	st	Z, r24
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
     5b8:	80 61       	ori	r24, 0x10	; 16
     5ba:	82 83       	std	Z+2, r24	; 0x02
     5bc:	83 81       	ldd	r24, Z+3	; 0x03
     5be:	83 83       	std	Z+3, r24	; 0x03
     5c0:	80 81       	ld	r24, Z
     5c2:	81 60       	ori	r24, 0x01	; 1
     5c4:	80 83       	st	Z, r24
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	83 87       	std	Z+11, r24	; 0x0b
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	08 95       	ret

000005ce <all_ssr_off>:
     5ce:	e0 e0       	ldi	r30, 0x00	; 0
     5d0:	f4 e0       	ldi	r31, 0x04	; 4
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	86 83       	std	Z+6, r24	; 0x06
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	86 83       	std	Z+6, r24	; 0x06
     5da:	80 e1       	ldi	r24, 0x10	; 16
     5dc:	86 83       	std	Z+6, r24	; 0x06
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	08 95       	ret

000005e2 <all_ssr_on>:
     5e2:	e0 e0       	ldi	r30, 0x00	; 0
     5e4:	f4 e0       	ldi	r31, 0x04	; 4
     5e6:	80 e4       	ldi	r24, 0x40	; 64
     5e8:	85 83       	std	Z+5, r24	; 0x05
     5ea:	80 e2       	ldi	r24, 0x20	; 32
     5ec:	85 83       	std	Z+5, r24	; 0x05
     5ee:	80 e1       	ldi	r24, 0x10	; 16
     5f0:	85 83       	std	Z+5, r24	; 0x05
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <init>:
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	98 ed       	ldi	r25, 0xD8	; 216
     5fc:	94 bf       	out	0x34, r25	; 52
     5fe:	e0 e1       	ldi	r30, 0x10	; 16
     600:	f1 e0       	ldi	r31, 0x01	; 1
     602:	80 81       	ld	r24, Z
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 83       	st	Z, r24
     608:	94 bf       	out	0x34, r25	; 52
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	9f ef       	ldi	r25, 0xFF	; 255
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <init+0x1e>
     618:	e0 e6       	ldi	r30, 0x60	; 96
     61a:	f4 e0       	ldi	r31, 0x04	; 4
     61c:	88 e0       	ldi	r24, 0x08	; 8
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	90 e1       	ldi	r25, 0x10	; 16
     622:	92 83       	std	Z+2, r25	; 0x02
     624:	94 89       	ldd	r25, Z+20	; 0x14
     626:	98 7f       	andi	r25, 0xF8	; 248
     628:	94 8b       	std	Z+20, r25	; 0x14
     62a:	94 89       	ldd	r25, Z+20	; 0x14
     62c:	92 60       	ori	r25, 0x02	; 2
     62e:	94 8b       	std	Z+20, r25	; 0x14
     630:	94 89       	ldd	r25, Z+20	; 0x14
     632:	97 7f       	andi	r25, 0xF7	; 247
     634:	94 8b       	std	Z+20, r25	; 0x14
     636:	a0 e0       	ldi	r26, 0x00	; 0
     638:	b4 e0       	ldi	r27, 0x04	; 4
     63a:	90 e7       	ldi	r25, 0x70	; 112
     63c:	11 96       	adiw	r26, 0x01	; 1
     63e:	9c 93       	st	X, r25
     640:	11 97       	sbiw	r26, 0x01	; 1
     642:	16 96       	adiw	r26, 0x06	; 6
     644:	9c 93       	st	X, r25
     646:	16 97       	sbiw	r26, 0x06	; 6
     648:	11 96       	adiw	r26, 0x01	; 1
     64a:	8c 93       	st	X, r24
     64c:	11 97       	sbiw	r26, 0x01	; 1
     64e:	16 96       	adiw	r26, 0x06	; 6
     650:	8c 93       	st	X, r24
     652:	16 97       	sbiw	r26, 0x06	; 6
     654:	90 e8       	ldi	r25, 0x80	; 128
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	9c 93       	st	X, r25
     65a:	11 97       	sbiw	r26, 0x01	; 1
     65c:	15 96       	adiw	r26, 0x05	; 5
     65e:	9c 93       	st	X, r25
     660:	15 97       	sbiw	r26, 0x05	; 5
     662:	c0 e4       	ldi	r28, 0x40	; 64
     664:	d4 e0       	ldi	r29, 0x04	; 4
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	89 83       	std	Y+1, r24	; 0x01
     66a:	8d 83       	std	Y+5, r24	; 0x05
     66c:	82 83       	std	Z+2, r24	; 0x02
     66e:	22 89       	ldd	r18, Z+18	; 0x12
     670:	22 8b       	std	Z+18, r18	; 0x12
     672:	20 e2       	ldi	r18, 0x20	; 32
     674:	22 83       	std	Z+2, r18	; 0x02
     676:	25 89       	ldd	r18, Z+21	; 0x15
     678:	28 7f       	andi	r18, 0xF8	; 248
     67a:	25 8b       	std	Z+21, r18	; 0x15
     67c:	25 89       	ldd	r18, Z+21	; 0x15
     67e:	24 60       	ori	r18, 0x04	; 4
     680:	25 8b       	std	Z+21, r18	; 0x15
     682:	25 89       	ldd	r18, Z+21	; 0x15
     684:	27 7f       	andi	r18, 0xF7	; 247
     686:	25 8b       	std	Z+21, r18	; 0x15
     688:	20 e4       	ldi	r18, 0x40	; 64
     68a:	22 83       	std	Z+2, r18	; 0x02
     68c:	26 89       	ldd	r18, Z+22	; 0x16
     68e:	28 7f       	andi	r18, 0xF8	; 248
     690:	26 8b       	std	Z+22, r18	; 0x16
     692:	26 89       	ldd	r18, Z+22	; 0x16
     694:	24 60       	ori	r18, 0x04	; 4
     696:	26 8b       	std	Z+22, r18	; 0x16
     698:	26 89       	ldd	r18, Z+22	; 0x16
     69a:	27 7f       	andi	r18, 0xF7	; 247
     69c:	26 8b       	std	Z+22, r18	; 0x16
     69e:	92 83       	std	Z+2, r25	; 0x02
     6a0:	97 89       	ldd	r25, Z+23	; 0x17
     6a2:	98 7f       	andi	r25, 0xF8	; 248
     6a4:	97 8b       	std	Z+23, r25	; 0x17
     6a6:	97 89       	ldd	r25, Z+23	; 0x17
     6a8:	94 60       	ori	r25, 0x04	; 4
     6aa:	97 8b       	std	Z+23, r25	; 0x17
     6ac:	97 89       	ldd	r25, Z+23	; 0x17
     6ae:	97 7f       	andi	r25, 0xF7	; 247
     6b0:	97 8b       	std	Z+23, r25	; 0x17
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	92 83       	std	Z+2, r25	; 0x02
     6b6:	90 89       	ldd	r25, Z+16	; 0x10
     6b8:	98 7f       	andi	r25, 0xF8	; 248
     6ba:	90 8b       	std	Z+16, r25	; 0x10
     6bc:	90 89       	ldd	r25, Z+16	; 0x10
     6be:	94 60       	ori	r25, 0x04	; 4
     6c0:	90 8b       	std	Z+16, r25	; 0x10
     6c2:	90 89       	ldd	r25, Z+16	; 0x10
     6c4:	97 7f       	andi	r25, 0xF7	; 247
     6c6:	90 8b       	std	Z+16, r25	; 0x10
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	92 83       	std	Z+2, r25	; 0x02
     6cc:	91 89       	ldd	r25, Z+17	; 0x11
     6ce:	98 7f       	andi	r25, 0xF8	; 248
     6d0:	91 8b       	std	Z+17, r25	; 0x11
     6d2:	91 89       	ldd	r25, Z+17	; 0x11
     6d4:	94 60       	ori	r25, 0x04	; 4
     6d6:	91 8b       	std	Z+17, r25	; 0x11
     6d8:	91 89       	ldd	r25, Z+17	; 0x11
     6da:	97 7f       	andi	r25, 0xF7	; 247
     6dc:	91 8b       	std	Z+17, r25	; 0x11
     6de:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
     6e2:	11 96       	adiw	r26, 0x01	; 1
     6e4:	8c 93       	st	X, r24
     6e6:	11 97       	sbiw	r26, 0x01	; 1
     6e8:	15 96       	adiw	r26, 0x05	; 5
     6ea:	8c 93       	st	X, r24
     6ec:	c0 e0       	ldi	r28, 0x00	; 0
     6ee:	da e0       	ldi	r29, 0x0A	; 10
     6f0:	88 81       	ld	r24, Y
     6f2:	87 60       	ori	r24, 0x07	; 7
     6f4:	88 83       	st	Y, r24
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	87 60       	ori	r24, 0x07	; 7
     6fa:	89 83       	std	Y+1, r24	; 0x01
     6fc:	89 85       	ldd	r24, Y+9	; 0x09
     6fe:	8e 7f       	andi	r24, 0xFE	; 254
     700:	89 87       	std	Y+9, r24	; 0x09
     702:	81 e7       	ldi	r24, 0x71	; 113
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	8e ab       	std	Y+54, r24	; 0x36
     708:	9f ab       	std	Y+55, r25	; 0x37
     70a:	60 91 18 29 	lds	r22, 0x2918	; 0x802918 <dutyCycle>
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__floatsisf>
     718:	2a e0       	ldi	r18, 0x0A	; 10
     71a:	37 ed       	ldi	r19, 0xD7	; 215
     71c:	43 e2       	ldi	r20, 0x23	; 35
     71e:	5c e3       	ldi	r21, 0x3C	; 60
     720:	0e 94 35 09 	call	0x126a	; 0x126a <__mulsf3>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e4       	ldi	r19, 0x40	; 64
     728:	4c e1       	ldi	r20, 0x1C	; 28
     72a:	54 e4       	ldi	r21, 0x44	; 68
     72c:	0e 94 35 09 	call	0x126a	; 0x126a <__mulsf3>
     730:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fixunssfsi>
     734:	6c af       	std	Y+60, r22	; 0x3c
     736:	7d af       	std	Y+61, r23	; 0x3d
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	8f 7b       	andi	r24, 0xBF	; 191
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	e0 e8       	ldi	r30, 0x80	; 128
     740:	fa e0       	ldi	r31, 0x0A	; 10
     742:	80 81       	ld	r24, Z
     744:	84 60       	ori	r24, 0x04	; 4
     746:	80 83       	st	Z, r24
     748:	81 81       	ldd	r24, Z+1	; 0x01
     74a:	81 83       	std	Z+1, r24	; 0x01
     74c:	84 81       	ldd	r24, Z+4	; 0x04
     74e:	8e 7f       	andi	r24, 0xFE	; 254
     750:	84 83       	std	Z+4, r24	; 0x04
     752:	85 81       	ldd	r24, Z+5	; 0x05
     754:	81 60       	ori	r24, 0x01	; 1
     756:	85 83       	std	Z+5, r24	; 0x05
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	84 87       	std	Z+12, r24	; 0x0c
     75e:	95 87       	std	Z+13, r25	; 0x0d
     760:	80 81       	ld	r24, Z
     762:	81 60       	ori	r24, 0x01	; 1
     764:	80 83       	st	Z, r24
     766:	e0 e0       	ldi	r30, 0x00	; 0
     768:	f1 e1       	ldi	r31, 0x11	; 17
     76a:	81 a1       	ldd	r24, Z+33	; 0x21
     76c:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <sigrow_offset>
     770:	80 a1       	ldd	r24, Z+32	; 0x20
     772:	80 93 2c 29 	sts	0x292C, r24	; 0x80292c <sigrow_gain>
     776:	e0 ea       	ldi	r30, 0xA0	; 160
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	80 61       	ori	r24, 0x10	; 16
     77e:	80 83       	st	Z, r24
     780:	81 81       	ldd	r24, Z+1	; 0x01
     782:	82 60       	ori	r24, 0x02	; 2
     784:	81 83       	std	Z+1, r24	; 0x01
     786:	e0 e0       	ldi	r30, 0x00	; 0
     788:	f6 e0       	ldi	r31, 0x06	; 6
     78a:	82 81       	ldd	r24, Z+2	; 0x02
     78c:	85 61       	ori	r24, 0x15	; 21
     78e:	82 83       	std	Z+2, r24	; 0x02
     790:	83 81       	ldd	r24, Z+3	; 0x03
     792:	83 83       	std	Z+3, r24	; 0x03
     794:	85 e0       	ldi	r24, 0x05	; 5
     796:	85 83       	std	Z+5, r24	; 0x05
     798:	82 81       	ldd	r24, Z+2	; 0x02
     79a:	80 64       	ori	r24, 0x40	; 64
     79c:	82 83       	std	Z+2, r24	; 0x02
     79e:	80 81       	ld	r24, Z
     7a0:	81 60       	ori	r24, 0x01	; 1
     7a2:	80 83       	st	Z, r24
     7a4:	0e 94 53 08 	call	0x10a6	; 0x10a6 <uart_init>
     7a8:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <rxbuffer+0x40>
     7ac:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <rxbuffer+0x41>
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <__vector_20>:
    ADC0.INTFLAGS = ADC_RESRDY_bm;
    return 0;
}            

/* ISR */
ISR(PORTD_PORT_vect) {    
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	8f 93       	push	r24
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
    rxbuffer.read = 0;
    rxbuffer.write = 0;
}

int8_t led_toggle() {
    PORTD.OUTTGL = LED;
     7c6:	e0 e6       	ldi	r30, 0x60	; 96
     7c8:	f4 e0       	ldi	r31, 0x04	; 4
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	87 83       	std	Z+7, r24	; 0x07
}            

/* ISR */
ISR(PORTD_PORT_vect) {    
    led_toggle();
    PORTD.INTFLAGS = PORT_INT4_bm;
     7ce:	80 e1       	ldi	r24, 0x10	; 16
     7d0:	81 87       	std	Z+9, r24	; 0x09
}
     7d2:	ff 91       	pop	r31
     7d4:	ef 91       	pop	r30
     7d6:	8f 91       	pop	r24
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_12>:

ISR(TCB0_INT_vect) {
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	ef 93       	push	r30
     802:	ff 93       	push	r31
    printf("Interrupt!\r\n");
     804:	82 ec       	ldi	r24, 0xC2	; 194
     806:	9c e5       	ldi	r25, 0x5C	; 92
     808:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
    TCB0.INTFLAGS = TCB_CAPT_bm;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <main>:

/*
    Application
    *************************************************/
int main(void) {
    init();
     834:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <init>
    sei();
     838:	78 94       	sei
            input[0] = '\0';
        }
    }
#endif
#ifdef PRODUCTION
    access = 1;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 2e 29 	sts	0x292E, r24	; 0x80292e <access>
    init();
    sei();
    
    /* Main variables */
    uint8_t count = 0;
    uint8_t diodeCheck = 0;
     840:	91 2c       	mov	r9, r1
int main(void) {
    init();
    sei();
    
    /* Main variables */
    uint8_t count = 0;
     842:	d1 2c       	mov	r13, r1
    while (1) {
        /* EVSE STATE A - No Vehicle connected */
        if (state == STATE_A) {
            /* Turn off PWM and set PWM output to static +12V*/
            pwm_off();
            PORTA.OUTSET = PWM_OUT;
     844:	e1 2c       	mov	r14, r1
     846:	68 94       	set
     848:	ff 24       	eor	r15, r15
     84a:	f2 f8       	bld	r15, 2
     84c:	68 94       	set
     84e:	cc 24       	eor	r12, r12
     850:	c2 f8       	bld	r12, 2
                        pwm_on();
                        DEBUG_PRINT("STATE A -> B\r\n");
                    }
                }
                else {
                    nextState = STATE_B;
     852:	68 94       	set
     854:	aa 24       	eor	r10, r10
     856:	a1 f8       	bld	r10, 1
        /* END OF STATE B */
        
        /* EVSE STATE C - Vehicle connected, ready for charging */
        if (state == STATE_C) {
            /* Measure CP at ~5% of PWM cycle */
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
     858:	c0 e0       	ldi	r28, 0x00	; 0
     85a:	da e0       	ldi	r29, 0x0A	; 10
                            state = STATE_A;
                            DEBUG_PRINT("STATE C -> A\r\n");
                        }
                    }
                    else {
                        nextState = STATE_A;
     85c:	bb 24       	eor	r11, r11
     85e:	b3 94       	inc	r11
                                /* TODO if no current available -> error |= NO_CURRENT */
                            }
                        }
                    }
                    else {
                        nextState = STATE_C;
     860:	0f 2e       	mov	r0, r31
     862:	f3 e0       	ldi	r31, 0x03	; 3
     864:	8f 2e       	mov	r8, r31
     866:	f0 2d       	mov	r31, r0
            rxflag = 0;
            input[0] = '\0';
        }
        
        /* Millisecond timer */
        if (TCB0.CNT >= 625) {
     868:	00 e8       	ldi	r16, 0x80	; 128
     86a:	1a e0       	ldi	r17, 0x0A	; 10
#endif
#ifdef PRODUCTION
    access = 1;
    while (1) {
        /* EVSE STATE A - No Vehicle connected */
        if (state == STATE_A) {
     86c:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <state>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	09 f0       	breq	.+2      	; 0x876 <main+0x42>
     874:	60 c0       	rjmp	.+192    	; 0x936 <main+0x102>
            /* Turn off PWM and set PWM output to static +12V*/
            pwm_off();
     876:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pwm_off>
            PORTA.OUTSET = PWM_OUT;
     87a:	f7 01       	movw	r30, r14
     87c:	c5 82       	std	Z+5, r12	; 0x05
            all_ssr_off();
     87e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <all_ssr_off>
            readCP();
     882:	0e 94 b7 01 	call	0x36e	; 0x36e <readCP>
            
            /* Check if vehicle disconnected / forced to State A and clear errors */
            if (pilot == PILOT_12V) {
     886:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <pilot>
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	41 f4       	brne	.+16     	; 0x89e <main+0x6a>
                error &= ~(LESS_MIN_CURRENT);
     88e:	80 91 34 29 	lds	r24, 0x2934	; 0x802934 <error>
     892:	8e 7f       	andi	r24, 0xFE	; 254
     894:	80 93 34 29 	sts	0x2934, r24	; 0x802934 <error>
                chargeDelay = 0;
     898:	10 92 0e 29 	sts	0x290E, r1	; 0x80290e <chargeDelay>
     89c:	4c c0       	rjmp	.+152    	; 0x936 <main+0x102>
            }
            
            /* Switch to State B? */
            if (pilot == PILOT_9V) {
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <main+0x70>
     8a2:	49 c0       	rjmp	.+146    	; 0x936 <main+0x102>
                /* Access to charging is only permitted if access == 1 */
                if ((nextState == STATE_B) && access) {
     8a4:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	e1 f5       	brne	.+120    	; 0x924 <main+0xf0>
     8ac:	80 91 2e 29 	lds	r24, 0x292E	; 0x80292e <access>
     8b0:	88 23       	and	r24, r24
     8b2:	c1 f1       	breq	.+112    	; 0x924 <main+0xf0>
                    /* Repeat 25 times to ensure all is OK */
                    if ((count++ > 25) && (error == NO_ERROR) && (chargeDelay == 0)) {
     8b4:	77 24       	eor	r7, r7
     8b6:	73 94       	inc	r7
     8b8:	7d 0c       	add	r7, r13
     8ba:	f9 e1       	ldi	r31, 0x19	; 25
     8bc:	fd 15       	cp	r31, r13
     8be:	b0 f5       	brcc	.+108    	; 0x92c <main+0xf8>
     8c0:	80 91 34 29 	lds	r24, 0x2934	; 0x802934 <error>
     8c4:	81 11       	cpse	r24, r1
     8c6:	34 c0       	rjmp	.+104    	; 0x930 <main+0xfc>
     8c8:	80 91 0e 29 	lds	r24, 0x290E	; 0x80290e <chargeDelay>
     8cc:	81 11       	cpse	r24, r1
     8ce:	32 c0       	rjmp	.+100    	; 0x934 <main+0x100>
                        diodeCheck = 0;
                        readPP();
     8d0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <readPP>
                        if (maxCurrent > maxCapacity) {
     8d4:	90 91 14 29 	lds	r25, 0x2914	; 0x802914 <maxCurrent>
     8d8:	80 91 33 29 	lds	r24, 0x2933	; 0x802933 <maxCapacity>
     8dc:	89 17       	cp	r24, r25
     8de:	88 f4       	brcc	.+34     	; 0x902 <main+0xce>
                            chargeCurrent = maxCapacity * 10;
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	9c 01       	movw	r18, r24
     8e4:	22 0f       	add	r18, r18
     8e6:	33 1f       	adc	r19, r19
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	82 0f       	add	r24, r18
     8f6:	93 1f       	adc	r25, r19
     8f8:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <chargeCurrent>
     8fc:	90 93 59 29 	sts	0x2959, r25	; 0x802959 <chargeCurrent+0x1>
     900:	06 c0       	rjmp	.+12     	; 0x90e <main+0xda>
                        }
                        else {
                            chargeCurrent = maxCurrent;
     902:	89 2f       	mov	r24, r25
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <chargeCurrent>
     90a:	90 93 59 29 	sts	0x2959, r25	; 0x802959 <chargeCurrent+0x1>
                        }
                        state = STATE_B;
     90e:	a0 92 10 29 	sts	0x2910, r10	; 0x802910 <state>
                        pwm_on();
     912:	0e 94 76 01 	call	0x2ec	; 0x2ec <pwm_on>
                        DEBUG_PRINT("STATE A -> B\r\n");
     916:	8e ec       	ldi	r24, 0xCE	; 206
     918:	9c e5       	ldi	r25, 0x5C	; 92
     91a:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
            /* Switch to State B? */
            if (pilot == PILOT_9V) {
                /* Access to charging is only permitted if access == 1 */
                if ((nextState == STATE_B) && access) {
                    /* Repeat 25 times to ensure all is OK */
                    if ((count++ > 25) && (error == NO_ERROR) && (chargeDelay == 0)) {
     91e:	d7 2c       	mov	r13, r7
                        diodeCheck = 0;
     920:	91 2c       	mov	r9, r1
     922:	09 c0       	rjmp	.+18     	; 0x936 <main+0x102>
                        pwm_on();
                        DEBUG_PRINT("STATE A -> B\r\n");
                    }
                }
                else {
                    nextState = STATE_B;
     924:	a0 92 0f 29 	sts	0x290F, r10	; 0x80290f <nextState>
                    count = 0;
     928:	d1 2c       	mov	r13, r1
     92a:	05 c0       	rjmp	.+10     	; 0x936 <main+0x102>
            /* Switch to State B? */
            if (pilot == PILOT_9V) {
                /* Access to charging is only permitted if access == 1 */
                if ((nextState == STATE_B) && access) {
                    /* Repeat 25 times to ensure all is OK */
                    if ((count++ > 25) && (error == NO_ERROR) && (chargeDelay == 0)) {
     92c:	d7 2c       	mov	r13, r7
     92e:	03 c0       	rjmp	.+6      	; 0x936 <main+0x102>
     930:	d7 2c       	mov	r13, r7
     932:	01 c0       	rjmp	.+2      	; 0x936 <main+0x102>
     934:	d7 2c       	mov	r13, r7
            } 
        }
        /* END OF STATE A */
        
        /* EVSE STATE B - Vehicle connected, not ready for charging */
        if (state == STATE_B) {
     936:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <state>
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	09 f0       	breq	.+2      	; 0x940 <main+0x10c>
     93e:	76 c0       	rjmp	.+236    	; 0xa2c <main+0x1f8>
            /* Check at beginning of PWM period for high level */
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
     940:	88 a1       	ldd	r24, Y+32	; 0x20
     942:	99 a1       	ldd	r25, Y+33	; 0x21
     944:	02 97       	sbiw	r24, 0x02	; 2
     946:	08 f4       	brcc	.+2      	; 0x94a <main+0x116>
     948:	0b c1       	rjmp	.+534    	; 0xb60 <main+0x32c>
     94a:	88 a1       	ldd	r24, Y+32	; 0x20
     94c:	99 a1       	ldd	r25, Y+33	; 0x21
     94e:	4e 97       	sbiw	r24, 0x1e	; 30
     950:	08 f0       	brcs	.+2      	; 0x954 <main+0x120>
     952:	06 c1       	rjmp	.+524    	; 0xb60 <main+0x32c>
                readCP();
     954:	0e 94 b7 01 	call	0x36e	; 0x36e <readCP>
                /* Disconnected? */
                if (pilot == PILOT_12V) {
     958:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <pilot>
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	b1 f4       	brne	.+44     	; 0x98c <main+0x158>
                    if (nextState == STATE_A) {
     960:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	71 f4       	brne	.+28     	; 0x984 <main+0x150>
                        if (count++ > 25) {
     968:	77 24       	eor	r7, r7
     96a:	73 94       	inc	r7
     96c:	7d 0c       	add	r7, r13
     96e:	29 e1       	ldi	r18, 0x19	; 25
     970:	2d 15       	cp	r18, r13
     972:	c8 f5       	brcc	.+114    	; 0x9e6 <main+0x1b2>
                            state = STATE_A;
     974:	b0 92 10 29 	sts	0x2910, r11	; 0x802910 <state>
                            DEBUG_PRINT("STATE B -> A\r\n");
     978:	8c ed       	ldi	r24, 0xDC	; 220
     97a:	9c e5       	ldi	r25, 0x5C	; 92
     97c:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
                readCP();
                /* Disconnected? */
                if (pilot == PILOT_12V) {
                    if (nextState == STATE_A) {
                        if (count++ > 25) {
     980:	d7 2c       	mov	r13, r7
     982:	38 c0       	rjmp	.+112    	; 0x9f4 <main+0x1c0>
                            state = STATE_A;
                            DEBUG_PRINT("STATE B -> A\r\n");
                        }
                    }
                    else {
                        nextState = STATE_A;
     984:	b0 92 0f 29 	sts	0x290F, r11	; 0x80290f <nextState>
                        count = 0;
     988:	d1 2c       	mov	r13, r1
     98a:	34 c0       	rjmp	.+104    	; 0x9f4 <main+0x1c0>
                    }
                }
                else if (pilot == PILOT_6V) {
     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	21 f5       	brne	.+72     	; 0x9d8 <main+0x1a4>
                    if ((nextState == STATE_C) && (diodeCheck == 1)) {
     990:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	e1 f4       	brne	.+56     	; 0x9d0 <main+0x19c>
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	98 12       	cpse	r9, r24
     99c:	19 c0       	rjmp	.+50     	; 0x9d0 <main+0x19c>
                        if (count++ > 25) {
     99e:	77 24       	eor	r7, r7
     9a0:	73 94       	inc	r7
     9a2:	7d 0c       	add	r7, r13
     9a4:	e9 e1       	ldi	r30, 0x19	; 25
     9a6:	ed 15       	cp	r30, r13
     9a8:	00 f5       	brcc	.+64     	; 0x9ea <main+0x1b6>
                            if ((error == NO_ERROR) && (chargeDelay == 0)) {
     9aa:	80 91 34 29 	lds	r24, 0x2934	; 0x802934 <error>
     9ae:	81 11       	cpse	r24, r1
     9b0:	1e c0       	rjmp	.+60     	; 0x9ee <main+0x1ba>
     9b2:	80 91 0e 29 	lds	r24, 0x290E	; 0x80290e <chargeDelay>
     9b6:	81 11       	cpse	r24, r1
     9b8:	1c c0       	rjmp	.+56     	; 0x9f2 <main+0x1be>
                                /* TODO: check for available current */
                                /* TODO: calculate current */
                                all_ssr_on();
     9ba:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <all_ssr_on>
                                diodeCheck = 0;
                                state = STATE_C;
     9be:	80 92 10 29 	sts	0x2910, r8	; 0x802910 <state>
                                DEBUG_PRINT("STATE B -> C\r\n");
     9c2:	8a ee       	ldi	r24, 0xEA	; 234
     9c4:	9c e5       	ldi	r25, 0x5C	; 92
     9c6:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
                        count = 0;
                    }
                }
                else if (pilot == PILOT_6V) {
                    if ((nextState == STATE_C) && (diodeCheck == 1)) {
                        if (count++ > 25) {
     9ca:	d7 2c       	mov	r13, r7
                            if ((error == NO_ERROR) && (chargeDelay == 0)) {
                                /* TODO: check for available current */
                                /* TODO: calculate current */
                                all_ssr_on();
                                diodeCheck = 0;
     9cc:	91 2c       	mov	r9, r1
     9ce:	12 c0       	rjmp	.+36     	; 0x9f4 <main+0x1c0>
                                /* TODO if no current available -> error |= NO_CURRENT */
                            }
                        }
                    }
                    else {
                        nextState = STATE_C;
     9d0:	80 92 0f 29 	sts	0x290F, r8	; 0x80290f <nextState>
                        count = 0;
     9d4:	d1 2c       	mov	r13, r1
     9d6:	0e c0       	rjmp	.+28     	; 0x9f4 <main+0x1c0>
                    }
                }
                /* PILOT_9V */
                else {
                    if (nextState == STATE_B) {
     9d8:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	51 f0       	breq	.+20     	; 0x9f4 <main+0x1c0>
                        /* Either no current available or charging was finished -> Wait for EV to disconnect */
                    }
                    else {
                        /* No state to switch to */
                        nextState = 0;
     9e0:	10 92 0f 29 	sts	0x290F, r1	; 0x80290f <nextState>
     9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <main+0x1c0>
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
                readCP();
                /* Disconnected? */
                if (pilot == PILOT_12V) {
                    if (nextState == STATE_A) {
                        if (count++ > 25) {
     9e6:	d7 2c       	mov	r13, r7
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <main+0x1c0>
                        count = 0;
                    }
                }
                else if (pilot == PILOT_6V) {
                    if ((nextState == STATE_C) && (diodeCheck == 1)) {
                        if (count++ > 25) {
     9ea:	d7 2c       	mov	r13, r7
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <main+0x1c0>
     9ee:	d7 2c       	mov	r13, r7
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <main+0x1c0>
     9f2:	d7 2c       	mov	r13, r7
                        nextState = 0;
                    }
                }
            }
            /* Check at the end of PWM period for low level */
            if (TCA0.SINGLE.CNT > 550) {
     9f4:	88 a1       	ldd	r24, Y+32	; 0x20
     9f6:	99 a1       	ldd	r25, Y+33	; 0x21
     9f8:	87 32       	cpi	r24, 0x27	; 39
     9fa:	92 40       	sbci	r25, 0x02	; 2
     9fc:	b8 f0       	brcs	.+46     	; 0xa2c <main+0x1f8>
                while (TCA0.SINGLE.CNT < 600);                              // Blocking, so low level is not missed at high duty cycles                  
     9fe:	88 a1       	ldd	r24, Y+32	; 0x20
     a00:	99 a1       	ldd	r25, Y+33	; 0x21
     a02:	88 35       	cpi	r24, 0x58	; 88
     a04:	92 40       	sbci	r25, 0x02	; 2
     a06:	d8 f3       	brcs	.-10     	; 0x9fe <main+0x1ca>
	            if ((TCA0.SINGLE.CNT > 600) && (TCA0.SINGLE.CNT < 620)) {
     a08:	88 a1       	ldd	r24, Y+32	; 0x20
     a0a:	99 a1       	ldd	r25, Y+33	; 0x21
     a0c:	89 35       	cpi	r24, 0x59	; 89
     a0e:	92 40       	sbci	r25, 0x02	; 2
     a10:	68 f0       	brcs	.+26     	; 0xa2c <main+0x1f8>
     a12:	88 a1       	ldd	r24, Y+32	; 0x20
     a14:	99 a1       	ldd	r25, Y+33	; 0x21
     a16:	8c 36       	cpi	r24, 0x6C	; 108
     a18:	92 40       	sbci	r25, 0x02	; 2
     a1a:	40 f4       	brcc	.+16     	; 0xa2c <main+0x1f8>
	                readCP();
     a1c:	0e 94 b7 01 	call	0x36e	; 0x36e <readCP>
     a20:	9b 2c       	mov	r9, r11
     a22:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <pilot>
     a26:	84 30       	cpi	r24, 0x04	; 4
     a28:	09 f0       	breq	.+2      	; 0xa2c <main+0x1f8>
     a2a:	91 2c       	mov	r9, r1
            }
        }
        /* END OF STATE B */
        
        /* EVSE STATE C - Vehicle connected, ready for charging */
        if (state == STATE_C) {
     a2c:	80 91 10 29 	lds	r24, 0x2910	; 0x802910 <state>
     a30:	83 30       	cpi	r24, 0x03	; 3
     a32:	09 f0       	breq	.+2      	; 0xa36 <main+0x202>
     a34:	49 c0       	rjmp	.+146    	; 0xac8 <main+0x294>
            /* Measure CP at ~5% of PWM cycle */
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
     a36:	88 a1       	ldd	r24, Y+32	; 0x20
     a38:	99 a1       	ldd	r25, Y+33	; 0x21
     a3a:	02 97       	sbiw	r24, 0x02	; 2
     a3c:	08 f4       	brcc	.+2      	; 0xa40 <main+0x20c>
     a3e:	44 c0       	rjmp	.+136    	; 0xac8 <main+0x294>
     a40:	88 a1       	ldd	r24, Y+32	; 0x20
     a42:	99 a1       	ldd	r25, Y+33	; 0x21
     a44:	4e 97       	sbiw	r24, 0x1e	; 30
     a46:	08 f0       	brcs	.+2      	; 0xa4a <main+0x216>
     a48:	3f c0       	rjmp	.+126    	; 0xac8 <main+0x294>
                readCP();
     a4a:	0e 94 b7 01 	call	0x36e	; 0x36e <readCP>
                /* Disconnect or Error? */
                if ((pilot == PILOT_12V) || (pilot == PILOT_NOK)) {
     a4e:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <pilot>
     a52:	82 30       	cpi	r24, 0x02	; 2
     a54:	c0 f4       	brcc	.+48     	; 0xa86 <main+0x252>
                    if (nextState == STATE_A) {
     a56:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	81 f4       	brne	.+32     	; 0xa7e <main+0x24a>
                        if (count++ > 25) {
     a5e:	77 24       	eor	r7, r7
     a60:	73 94       	inc	r7
     a62:	7d 0c       	add	r7, r13
     a64:	29 e1       	ldi	r18, 0x19	; 25
     a66:	2d 15       	cp	r18, r13
     a68:	60 f5       	brcc	.+88     	; 0xac2 <main+0x28e>
                            all_ssr_off();
     a6a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <all_ssr_off>
                            state = STATE_A;
     a6e:	b0 92 10 29 	sts	0x2910, r11	; 0x802910 <state>
                            DEBUG_PRINT("STATE C -> A\r\n");
     a72:	88 ef       	ldi	r24, 0xF8	; 248
     a74:	9c e5       	ldi	r25, 0x5C	; 92
     a76:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
                readCP();
                /* Disconnect or Error? */
                if ((pilot == PILOT_12V) || (pilot == PILOT_NOK)) {
                    if (nextState == STATE_A) {
                        if (count++ > 25) {
     a7a:	d7 2c       	mov	r13, r7
     a7c:	25 c0       	rjmp	.+74     	; 0xac8 <main+0x294>
                            state = STATE_A;
                            DEBUG_PRINT("STATE C -> A\r\n");
                        }
                    }
                    else {
                        nextState = STATE_A;
     a7e:	b0 92 0f 29 	sts	0x290F, r11	; 0x80290f <nextState>
                        count = 0;
     a82:	d1 2c       	mov	r13, r1
     a84:	21 c0       	rjmp	.+66     	; 0xac8 <main+0x294>
                    }
                }
                /* No charge requested by EV */
                else if (pilot == PILOT_9V) {
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	c9 f4       	brne	.+50     	; 0xabc <main+0x288>
                    if (nextState == STATE_B) {
     a8a:	80 91 0f 29 	lds	r24, 0x290F	; 0x80290f <nextState>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	89 f4       	brne	.+34     	; 0xab4 <main+0x280>
                        if (count++ > 25) {
     a92:	77 24       	eor	r7, r7
     a94:	73 94       	inc	r7
     a96:	7d 0c       	add	r7, r13
     a98:	89 e1       	ldi	r24, 0x19	; 25
     a9a:	8d 15       	cp	r24, r13
     a9c:	a0 f4       	brcc	.+40     	; 0xac6 <main+0x292>
                            all_ssr_off();
     a9e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <all_ssr_off>
                            state = STATE_B;
     aa2:	a0 92 10 29 	sts	0x2910, r10	; 0x802910 <state>
                            DEBUG_PRINT("STATE C -> B\r\n");
     aa6:	86 e0       	ldi	r24, 0x06	; 6
     aa8:	9d e5       	ldi	r25, 0x5D	; 93
     aaa:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
                    }
                }
                /* No charge requested by EV */
                else if (pilot == PILOT_9V) {
                    if (nextState == STATE_B) {
                        if (count++ > 25) {
     aae:	d7 2c       	mov	r13, r7
                            all_ssr_off();
                            state = STATE_B;
                            DEBUG_PRINT("STATE C -> B\r\n");
                            diodeCheck = 0;
     ab0:	91 2c       	mov	r9, r1
     ab2:	0a c0       	rjmp	.+20     	; 0xac8 <main+0x294>
                        }
                    }
                    else {
                        nextState = STATE_B;
     ab4:	a0 92 0f 29 	sts	0x290F, r10	; 0x80290f <nextState>
                        count = 0;
     ab8:	d1 2c       	mov	r13, r1
     aba:	06 c0       	rjmp	.+12     	; 0xac8 <main+0x294>
                    }
                }
                /* No state to switch to */
                else {
                    nextState = 0; 
     abc:	10 92 0f 29 	sts	0x290F, r1	; 0x80290f <nextState>
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <main+0x294>
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
                readCP();
                /* Disconnect or Error? */
                if ((pilot == PILOT_12V) || (pilot == PILOT_NOK)) {
                    if (nextState == STATE_A) {
                        if (count++ > 25) {
     ac2:	d7 2c       	mov	r13, r7
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <main+0x294>
                    }
                }
                /* No charge requested by EV */
                else if (pilot == PILOT_9V) {
                    if (nextState == STATE_B) {
                        if (count++ > 25) {
     ac6:	d7 2c       	mov	r13, r7
            }
        }
        /* END OF STATE C */
        
        /* UART reading and command parsing section */
        uart0_readLoop();
     ac8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <uart0_readLoop>
        if (rxflag == 1) {
     acc:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <rxflag>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	41 f4       	brne	.+16     	; 0xae4 <main+0x2b0>
            cmd_parse(input);
     ad4:	8a e5       	ldi	r24, 0x5A	; 90
     ad6:	99 e2       	ldi	r25, 0x29	; 41
     ad8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <cmd_parse>
            rxflag = 0;
     adc:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <rxflag>
            input[0] = '\0';
     ae0:	10 92 5a 29 	sts	0x295A, r1	; 0x80295a <input>
        }
        
        /* Millisecond timer */
        if (TCB0.CNT >= 625) {
     ae4:	f8 01       	movw	r30, r16
     ae6:	82 85       	ldd	r24, Z+10	; 0x0a
     ae8:	93 85       	ldd	r25, Z+11	; 0x0b
     aea:	81 37       	cpi	r24, 0x71	; 113
     aec:	92 40       	sbci	r25, 0x02	; 2
     aee:	b0 f0       	brcs	.+44     	; 0xb1c <main+0x2e8>
            systime++;
     af0:	80 91 41 29 	lds	r24, 0x2941	; 0x802941 <systime>
     af4:	90 91 42 29 	lds	r25, 0x2942	; 0x802942 <systime+0x1>
     af8:	a0 91 43 29 	lds	r26, 0x2943	; 0x802943 <systime+0x2>
     afc:	b0 91 44 29 	lds	r27, 0x2944	; 0x802944 <systime+0x3>
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	a1 1d       	adc	r26, r1
     b04:	b1 1d       	adc	r27, r1
     b06:	80 93 41 29 	sts	0x2941, r24	; 0x802941 <systime>
     b0a:	90 93 42 29 	sts	0x2942, r25	; 0x802942 <systime+0x1>
     b0e:	a0 93 43 29 	sts	0x2943, r26	; 0x802943 <systime+0x2>
     b12:	b0 93 44 29 	sts	0x2944, r27	; 0x802944 <systime+0x3>
            TCB0.CNT = 0;
     b16:	f8 01       	movw	r30, r16
     b18:	12 86       	std	Z+10, r1	; 0x0a
     b1a:	13 86       	std	Z+11, r1	; 0x0b
        }
        /* Seconds timer */
        if (systime >= 1000) {
     b1c:	80 91 41 29 	lds	r24, 0x2941	; 0x802941 <systime>
     b20:	90 91 42 29 	lds	r25, 0x2942	; 0x802942 <systime+0x1>
     b24:	a0 91 43 29 	lds	r26, 0x2943	; 0x802943 <systime+0x2>
     b28:	b0 91 44 29 	lds	r27, 0x2944	; 0x802944 <systime+0x3>
     b2c:	88 3e       	cpi	r24, 0xE8	; 232
     b2e:	93 40       	sbci	r25, 0x03	; 3
     b30:	a1 05       	cpc	r26, r1
     b32:	b1 05       	cpc	r27, r1
     b34:	08 f4       	brcc	.+2      	; 0xb38 <main+0x304>
     b36:	9a ce       	rjmp	.-716    	; 0x86c <main+0x38>
            sectime++;
     b38:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <sectime>
     b3c:	90 91 3e 29 	lds	r25, 0x293E	; 0x80293e <sectime+0x1>
     b40:	a0 91 3f 29 	lds	r26, 0x293F	; 0x80293f <sectime+0x2>
     b44:	b0 91 40 29 	lds	r27, 0x2940	; 0x802940 <sectime+0x3>
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	a1 1d       	adc	r26, r1
     b4c:	b1 1d       	adc	r27, r1
     b4e:	80 93 3d 29 	sts	0x293D, r24	; 0x80293d <sectime>
     b52:	90 93 3e 29 	sts	0x293E, r25	; 0x80293e <sectime+0x1>
     b56:	a0 93 3f 29 	sts	0x293F, r26	; 0x80293f <sectime+0x2>
     b5a:	b0 93 40 29 	sts	0x2940, r27	; 0x802940 <sectime+0x3>
     b5e:	86 ce       	rjmp	.-756    	; 0x86c <main+0x38>
                        nextState = 0;
                    }
                }
            }
            /* Check at the end of PWM period for low level */
            if (TCA0.SINGLE.CNT > 550) {
     b60:	88 a1       	ldd	r24, Y+32	; 0x20
     b62:	99 a1       	ldd	r25, Y+33	; 0x21
     b64:	87 32       	cpi	r24, 0x27	; 39
     b66:	92 40       	sbci	r25, 0x02	; 2
     b68:	08 f0       	brcs	.+2      	; 0xb6c <main+0x338>
     b6a:	49 cf       	rjmp	.-366    	; 0x9fe <main+0x1ca>
     b6c:	ad cf       	rjmp	.-166    	; 0xac8 <main+0x294>

00000b6e <cmd_exec>:
 */

int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
    /* Find and execute command from cmd table */
    if (cmd_table[index].cmd_func_ptr != NULL) {       
     b6e:	24 e0       	ldi	r18, 0x04	; 4
     b70:	82 9f       	mul	r24, r18
     b72:	c0 01       	movw	r24, r0
     b74:	11 24       	eor	r1, r1
     b76:	fc 01       	movw	r30, r24
     b78:	e6 55       	subi	r30, 0x56	; 86
     b7a:	f7 4d       	sbci	r31, 0xD7	; 215
     b7c:	02 80       	ldd	r0, Z+2	; 0x02
     b7e:	f3 81       	ldd	r31, Z+3	; 0x03
     b80:	e0 2d       	mov	r30, r0
     b82:	30 97       	sbiw	r30, 0x00	; 0
     b84:	11 f0       	breq	.+4      	; 0xb8a <cmd_exec+0x1c>
        retval = cmd_table[index].cmd_func_ptr();
     b86:	09 95       	icall
     b88:	08 95       	ret
                int8_t cmd_func();
                Excepted are system commands, which are used to deal with parameter get/set operations and status reports.
 */

int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
     b8a:	8e ef       	ldi	r24, 0xFE	; 254
    /* Find and execute command from cmd table */
    if (cmd_table[index].cmd_func_ptr != NULL) {       
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}
     b8c:	08 95       	ret

00000b8e <param_get>:
        return retval;
    }
    return retval;
}

int8_t param_get(char *param_string, uint32_t *param_value) {
     b8e:	af 92       	push	r10
     b90:	bf 92       	push	r11
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	5c 01       	movw	r10, r24
     ba4:	8b 01       	movw	r16, r22
     ba6:	0f 2e       	mov	r0, r31
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	cf 2e       	mov	r12, r31
     bac:	f8 e2       	ldi	r31, 0x28	; 40
     bae:	df 2e       	mov	r13, r31
     bb0:	f0 2d       	mov	r31, r0
     bb2:	e1 2c       	mov	r14, r1
     bb4:	f1 2c       	mov	r15, r1
    int8_t retval = -4;                                         // default return value -4 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        if (strcmp((const char *)param_string, (const char *)param_table[i].param) == 0) {
     bb6:	e7 01       	movw	r28, r14
     bb8:	f6 01       	movw	r30, r12
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	c5 01       	movw	r24, r10
     bc0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <strcmp>
     bc4:	89 2b       	or	r24, r25
     bc6:	09 f0       	breq	.+2      	; 0xbca <param_get+0x3c>
     bc8:	4a c0       	rjmp	.+148    	; 0xc5e <param_get+0xd0>
            cli();
     bca:	f8 94       	cli
            switch (param_table[i].size) {                      // cast pointer to the correct data type according to param table size info
     bcc:	f7 01       	movw	r30, r14
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	ee 0d       	add	r30, r14
     bd8:	ff 1d       	adc	r31, r15
     bda:	e0 50       	subi	r30, 0x00	; 0
     bdc:	f8 4d       	sbci	r31, 0xD8	; 216
     bde:	84 81       	ldd	r24, Z+4	; 0x04
     be0:	80 31       	cpi	r24, 0x10	; 16
     be2:	89 f0       	breq	.+34     	; 0xc06 <param_get+0x78>
     be4:	80 32       	cpi	r24, 0x20	; 32
     be6:	21 f1       	breq	.+72     	; 0xc30 <param_get+0xa2>
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	b1 f5       	brne	.+108    	; 0xc58 <param_get+0xca>
            case 8:
                *param_value = *(uint8_t *)param_table[i].value;
     bec:	02 80       	ldd	r0, Z+2	; 0x02
     bee:	f3 81       	ldd	r31, Z+3	; 0x03
     bf0:	e0 2d       	mov	r30, r0
     bf2:	80 81       	ld	r24, Z
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	f8 01       	movw	r30, r16
     bfc:	80 83       	st	Z, r24
     bfe:	91 83       	std	Z+1, r25	; 0x01
     c00:	a2 83       	std	Z+2, r26	; 0x02
     c02:	b3 83       	std	Z+3, r27	; 0x03
            	break;
     c04:	29 c0       	rjmp	.+82     	; 0xc58 <param_get+0xca>
            case 16:
                *param_value = *(uint16_t *)param_table[i].value;
     c06:	c7 01       	movw	r24, r14
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	c8 0f       	add	r28, r24
     c12:	d9 1f       	adc	r29, r25
     c14:	c0 50       	subi	r28, 0x00	; 0
     c16:	d8 4d       	sbci	r29, 0xD8	; 216
     c18:	ea 81       	ldd	r30, Y+2	; 0x02
     c1a:	fb 81       	ldd	r31, Y+3	; 0x03
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	f8 01       	movw	r30, r16
     c26:	80 83       	st	Z, r24
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	a2 83       	std	Z+2, r26	; 0x02
     c2c:	b3 83       	std	Z+3, r27	; 0x03
                break;
     c2e:	14 c0       	rjmp	.+40     	; 0xc58 <param_get+0xca>
            case 32:
                *param_value = *(uint32_t *)param_table[i].value;
     c30:	c7 01       	movw	r24, r14
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	c8 0f       	add	r28, r24
     c3c:	d9 1f       	adc	r29, r25
     c3e:	c0 50       	subi	r28, 0x00	; 0
     c40:	d8 4d       	sbci	r29, 0xD8	; 216
     c42:	ea 81       	ldd	r30, Y+2	; 0x02
     c44:	fb 81       	ldd	r31, Y+3	; 0x03
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	a2 81       	ldd	r26, Z+2	; 0x02
     c4c:	b3 81       	ldd	r27, Z+3	; 0x03
     c4e:	f8 01       	movw	r30, r16
     c50:	80 83       	st	Z, r24
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	a2 83       	std	Z+2, r26	; 0x02
     c56:	b3 83       	std	Z+3, r27	; 0x03
                break;               
            }
            sei();
     c58:	78 94       	sei
            i = NO_PARAM;                                   // exit loop
            retval = 0;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0c c0       	rjmp	.+24     	; 0xc76 <param_get+0xe8>
     c5e:	ff ef       	ldi	r31, 0xFF	; 255
     c60:	ef 1a       	sub	r14, r31
     c62:	ff 0a       	sbc	r15, r31
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	c8 0e       	add	r12, r24
     c68:	d1 1c       	adc	r13, r1
    return retval;
}

int8_t param_get(char *param_string, uint32_t *param_value) {
    int8_t retval = -4;                                         // default return value -4 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
     c6a:	e2 e2       	ldi	r30, 0x22	; 34
     c6c:	ee 16       	cp	r14, r30
     c6e:	f1 04       	cpc	r15, r1
     c70:	09 f0       	breq	.+2      	; 0xc74 <param_get+0xe6>
     c72:	a1 cf       	rjmp	.-190    	; 0xbb6 <param_get+0x28>
     c74:	8c ef       	ldi	r24, 0xFC	; 252
            i = NO_PARAM;                                   // exit loop
            retval = 0;
        }
    }
    return retval;
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	08 95       	ret

00000c8c <param_set>:

int8_t param_set(char *param_string, void *param_new_val_ptr) {
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	5c 01       	movw	r10, r24
     ca2:	8b 01       	movw	r16, r22
     ca4:	0f 2e       	mov	r0, r31
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	cf 2e       	mov	r12, r31
     caa:	f8 e2       	ldi	r31, 0x28	; 40
     cac:	df 2e       	mov	r13, r31
     cae:	f0 2d       	mov	r31, r0
     cb0:	e1 2c       	mov	r14, r1
     cb2:	f1 2c       	mov	r15, r1
    int8_t retval = -4;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        if (strcmp(param_string, param_table[i].param) == 0) {
     cb4:	e7 01       	movw	r28, r14
     cb6:	d6 01       	movw	r26, r12
     cb8:	6d 91       	ld	r22, X+
     cba:	7c 91       	ld	r23, X
     cbc:	c5 01       	movw	r24, r10
     cbe:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <strcmp>
     cc2:	89 2b       	or	r24, r25
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <param_set+0x3c>
     cc6:	44 c0       	rjmp	.+136    	; 0xd50 <param_set+0xc4>
            cli();
     cc8:	f8 94       	cli
            switch (param_table[i].size) {                                           // cast pointer to the correct data type according to param table size info
     cca:	f7 01       	movw	r30, r14
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	ee 0d       	add	r30, r14
     cd6:	ff 1d       	adc	r31, r15
     cd8:	e0 50       	subi	r30, 0x00	; 0
     cda:	f8 4d       	sbci	r31, 0xD8	; 216
     cdc:	84 81       	ldd	r24, Z+4	; 0x04
     cde:	80 31       	cpi	r24, 0x10	; 16
     ce0:	61 f0       	breq	.+24     	; 0xcfa <param_set+0x6e>
     ce2:	80 32       	cpi	r24, 0x20	; 32
     ce4:	e1 f0       	breq	.+56     	; 0xd1e <param_set+0x92>
     ce6:	88 30       	cpi	r24, 0x08	; 8
     ce8:	81 f5       	brne	.+96     	; 0xd4a <param_set+0xbe>
            case 8:
                *(uint8_t *)param_table[i].value = *(uint8_t *)param_new_val_ptr;
     cea:	02 80       	ldd	r0, Z+2	; 0x02
     cec:	f3 81       	ldd	r31, Z+3	; 0x03
     cee:	e0 2d       	mov	r30, r0
     cf0:	e8 01       	movw	r28, r16
     cf2:	88 81       	ld	r24, Y
     cf4:	80 83       	st	Z, r24
                retval = 0;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
            	break;
     cf8:	29 c0       	rjmp	.+82     	; 0xd4c <param_set+0xc0>
            case 16:
                *(uint16_t *)param_table[i].value = *(uint16_t *)param_new_val_ptr;
     cfa:	c7 01       	movw	r24, r14
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	c8 0f       	add	r28, r24
     d06:	d9 1f       	adc	r29, r25
     d08:	c0 50       	subi	r28, 0x00	; 0
     d0a:	d8 4d       	sbci	r29, 0xD8	; 216
     d0c:	ea 81       	ldd	r30, Y+2	; 0x02
     d0e:	fb 81       	ldd	r31, Y+3	; 0x03
     d10:	d8 01       	movw	r26, r16
     d12:	8d 91       	ld	r24, X+
     d14:	9c 91       	ld	r25, X
     d16:	80 83       	st	Z, r24
     d18:	91 83       	std	Z+1, r25	; 0x01
                retval = 0;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
                break;
     d1c:	17 c0       	rjmp	.+46     	; 0xd4c <param_set+0xc0>
            case 32:
                *(uint32_t *)param_table[i].value = *(uint32_t *)param_new_val_ptr;
     d1e:	c7 01       	movw	r24, r14
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	c8 0f       	add	r28, r24
     d2a:	d9 1f       	adc	r29, r25
     d2c:	c0 50       	subi	r28, 0x00	; 0
     d2e:	d8 4d       	sbci	r29, 0xD8	; 216
     d30:	ea 81       	ldd	r30, Y+2	; 0x02
     d32:	fb 81       	ldd	r31, Y+3	; 0x03
     d34:	e8 01       	movw	r28, r16
     d36:	88 81       	ld	r24, Y
     d38:	99 81       	ldd	r25, Y+1	; 0x01
     d3a:	aa 81       	ldd	r26, Y+2	; 0x02
     d3c:	bb 81       	ldd	r27, Y+3	; 0x03
     d3e:	80 83       	st	Z, r24
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	a2 83       	std	Z+2, r26	; 0x02
     d44:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
     d46:	80 e0       	ldi	r24, 0x00	; 0
                break; 
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <param_set+0xc0>
            default:
                retval = -3;                                                // default return value -3 -> invalid value size               
     d4a:	8d ef       	ldi	r24, 0xFD	; 253
            }
            sei();
     d4c:	78 94       	sei
     d4e:	0c c0       	rjmp	.+24     	; 0xd68 <param_set+0xdc>
     d50:	df ef       	ldi	r29, 0xFF	; 255
     d52:	ed 1a       	sub	r14, r29
     d54:	fd 0a       	sbc	r15, r29
     d56:	e5 e0       	ldi	r30, 0x05	; 5
     d58:	ce 0e       	add	r12, r30
     d5a:	d1 1c       	adc	r13, r1
    return retval;
}

int8_t param_set(char *param_string, void *param_new_val_ptr) {
    int8_t retval = -4;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
     d5c:	f2 e2       	ldi	r31, 0x22	; 34
     d5e:	ef 16       	cp	r14, r31
     d60:	f1 04       	cpc	r15, r1
     d62:	09 f0       	breq	.+2      	; 0xd66 <param_set+0xda>
     d64:	a7 cf       	rjmp	.-178    	; 0xcb4 <param_set+0x28>
     d66:	8c ef       	ldi	r24, 0xFC	; 252
            sei();
            i = NO_PARAM;                                               // exit loop
        }
    }
    return retval;
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	08 95       	ret

00000d7e <cmd_parse>:
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}

int8_t cmd_parse(char *string) {
     d7e:	cf 92       	push	r12
     d80:	df 92       	push	r13
     d82:	ff 92       	push	r15
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	28 97       	sbiw	r28, 0x08	; 8
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	6c 01       	movw	r12, r24
    int8_t retval = -1;                                 // set initial return value to -1 -> no valid command
    char *command = string;
    char *param = NULL;
    uint8_t is_param_op = 0;
    if (strcmp((const char *)string, "??") == 0) {
     d98:	65 e0       	ldi	r22, 0x05	; 5
     d9a:	7f e5       	ldi	r23, 0x5F	; 95
     d9c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <strcmp>
     da0:	89 2b       	or	r24, r25
     da2:	09 f4       	brne	.+2      	; 0xda6 <cmd_parse+0x28>
     da4:	dd c0       	rjmp	.+442    	; 0xf60 <cmd_parse+0x1e2>
        command = "status";
    }
    /* Command is GET ("<param>?")*/
    else if (strchr(string, CMD_GET) != NULL) {                                         
     da6:	6f e3       	ldi	r22, 0x3F	; 63
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	c6 01       	movw	r24, r12
     dac:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <strchr>
     db0:	89 2b       	or	r24, r25
     db2:	61 f1       	breq	.+88     	; 0xe0c <cmd_parse+0x8e>
        command = "param_get";                      
        param = strtok(string, "?");
     db4:	66 e0       	ldi	r22, 0x06	; 6
     db6:	7f e5       	ldi	r23, 0x5F	; 95
     db8:	c6 01       	movw	r24, r12
     dba:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <strtok>
     dbe:	08 2f       	mov	r16, r24
     dc0:	f9 2e       	mov	r15, r25
        is_param_op = 1;
        uint32_t param_val = 0;
     dc2:	19 82       	std	Y+1, r1	; 0x01
     dc4:	1a 82       	std	Y+2, r1	; 0x02
     dc6:	1b 82       	std	Y+3, r1	; 0x03
     dc8:	1c 82       	std	Y+4, r1	; 0x04
        retval = param_get(param, &param_val);
     dca:	be 01       	movw	r22, r28
     dcc:	6f 5f       	subi	r22, 0xFF	; 255
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <param_get>
     dd4:	18 2f       	mov	r17, r24
        if (retval == 0) {
     dd6:	81 11       	cpse	r24, r1
     dd8:	12 c0       	rjmp	.+36     	; 0xdfe <cmd_parse+0x80>
            printf("%s = %"PRIu32"\r\n", param, param_val);               
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	8f 93       	push	r24
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	8f 93       	push	r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	8f 93       	push	r24
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	8f 93       	push	r24
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	90 e6       	ldi	r25, 0x60	; 96
     df2:	9f 93       	push	r25
     df4:	8f 93       	push	r24
     df6:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	de bf       	out	0x3e, r29	; 62
    if (strcmp((const char *)string, "??") == 0) {
        command = "status";
    }
    /* Command is GET ("<param>?")*/
    else if (strchr(string, CMD_GET) != NULL) {                                         
        command = "param_get";                      
     dfe:	0f 2e       	mov	r0, r31
     e00:	f3 e3       	ldi	r31, 0x33	; 51
     e02:	cf 2e       	mov	r12, r31
     e04:	fe e5       	ldi	r31, 0x5E	; 94
     e06:	df 2e       	mov	r13, r31
     e08:	f0 2d       	mov	r31, r0
     e0a:	64 c0       	rjmp	.+200    	; 0xed4 <cmd_parse+0x156>
        if (retval == 0) {
            printf("%s = %"PRIu32"\r\n", param, param_val);               
        }        
    } 
    /* Command is SET ("<param>=<new_value>") */
    else if (strchr(string, CMD_SET) != NULL) {
     e0c:	6d e3       	ldi	r22, 0x3D	; 61
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	c6 01       	movw	r24, r12
     e12:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <strchr>
     e16:	89 2b       	or	r24, r25
     e18:	09 f4       	brne	.+2      	; 0xe1c <cmd_parse+0x9e>
     e1a:	a8 c0       	rjmp	.+336    	; 0xf6c <cmd_parse+0x1ee>
        command = "param_set";
        is_param_op = 1;
        param = strtok(string, "=");
     e1c:	68 e0       	ldi	r22, 0x08	; 8
     e1e:	7f e5       	ldi	r23, 0x5F	; 95
     e20:	c6 01       	movw	r24, r12
     e22:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <strtok>
     e26:	08 2f       	mov	r16, r24
     e28:	f9 2e       	mov	r15, r25
        char *str_value = strtok(NULL, "=");
     e2a:	68 e0       	ldi	r22, 0x08	; 8
     e2c:	7f e5       	ldi	r23, 0x5F	; 95
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <strtok>
        uint32_t value = (uint32_t)strtoul(str_value, NULL, 0);
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <strtoul>
     e42:	6d 83       	std	Y+5, r22	; 0x05
     e44:	7e 83       	std	Y+6, r23	; 0x06
     e46:	8f 83       	std	Y+7, r24	; 0x07
     e48:	98 87       	std	Y+8, r25	; 0x08
        retval = param_set(param, &value);
     e4a:	be 01       	movw	r22, r28
     e4c:	6b 5f       	subi	r22, 0xFB	; 251
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	80 2f       	mov	r24, r16
     e52:	9f 2d       	mov	r25, r15
     e54:	0e 94 46 06 	call	0xc8c	; 0xc8c <param_set>
     e58:	18 2f       	mov	r17, r24
        if (retval == 0) {
     e5a:	81 11       	cpse	r24, r1
     e5c:	1d c0       	rjmp	.+58     	; 0xe98 <cmd_parse+0x11a>
            uint32_t param_val = 0;
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	1a 82       	std	Y+2, r1	; 0x02
     e62:	1b 82       	std	Y+3, r1	; 0x03
     e64:	1c 82       	std	Y+4, r1	; 0x04
            param_get(param, &param_val);        
     e66:	be 01       	movw	r22, r28
     e68:	6f 5f       	subi	r22, 0xFF	; 255
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	80 2f       	mov	r24, r16
     e6e:	9f 2d       	mov	r25, r15
     e70:	0e 94 c7 05 	call	0xb8e	; 0xb8e <param_get>
            printf("%s = %"PRIu32"\r\n", param, param_val);
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	8f 93       	push	r24
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	8f 93       	push	r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	8f 93       	push	r24
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	8f 93       	push	r24
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	85 e0       	ldi	r24, 0x05	; 5
     e8a:	90 e6       	ldi	r25, 0x60	; 96
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	de bf       	out	0x3e, r29	; 62
            printf("%s = %"PRIu32"\r\n", param, param_val);               
        }        
    } 
    /* Command is SET ("<param>=<new_value>") */
    else if (strchr(string, CMD_SET) != NULL) {
        command = "param_set";
     e98:	0f 2e       	mov	r0, r31
     e9a:	fd e3       	ldi	r31, 0x3D	; 61
     e9c:	cf 2e       	mov	r12, r31
     e9e:	fe e5       	ldi	r31, 0x5E	; 94
     ea0:	df 2e       	mov	r13, r31
     ea2:	f0 2d       	mov	r31, r0
     ea4:	17 c0       	rjmp	.+46     	; 0xed4 <cmd_parse+0x156>
            printf("%s = %"PRIu32"\r\n", param, param_val);
        }
    }
    if (is_param_op == 0) {        
	    for (uint8_t i = 0; i < NO_CMD; i++) {
            if (strcmp(command, cmd_table[i].cmd) == 0) {
     ea6:	f8 01       	movw	r30, r16
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	c6 01       	movw	r24, r12
     eae:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <strcmp>
     eb2:	89 2b       	or	r24, r25
     eb4:	39 f4       	brne	.+14     	; 0xec4 <cmd_parse+0x146>
                retval = cmd_exec(i);
     eb6:	8f 2d       	mov	r24, r15
     eb8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <cmd_exec>
     ebc:	18 2f       	mov	r17, r24
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	f1 2c       	mov	r15, r1
     ec2:	08 c0       	rjmp	.+16     	; 0xed4 <cmd_parse+0x156>
            param_get(param, &param_val);        
            printf("%s = %"PRIu32"\r\n", param, param_val);
        }
    }
    if (is_param_op == 0) {        
	    for (uint8_t i = 0; i < NO_CMD; i++) {
     ec4:	f3 94       	inc	r15
     ec6:	0c 5f       	subi	r16, 0xFC	; 252
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	f9 e1       	ldi	r31, 0x19	; 25
     ecc:	ff 12       	cpse	r15, r31
     ece:	eb cf       	rjmp	.-42     	; 0xea6 <cmd_parse+0x128>
     ed0:	1f ef       	ldi	r17, 0xFF	; 255
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <cmd_parse+0x170>
                i = NO_CMD;                             // exit loop
            }
	    } 
    }
    
    switch (retval) {                                   // select appropriate feedback to return
     ed4:	1e 3f       	cpi	r17, 0xFE	; 254
     ed6:	c1 f0       	breq	.+48     	; 0xf08 <cmd_parse+0x18a>
     ed8:	2c f4       	brge	.+10     	; 0xee4 <cmd_parse+0x166>
     eda:	1c 3f       	cpi	r17, 0xFC	; 252
     edc:	79 f1       	breq	.+94     	; 0xf3c <cmd_parse+0x1be>
     ede:	1d 3f       	cpi	r17, 0xFD	; 253
     ee0:	01 f1       	breq	.+64     	; 0xf22 <cmd_parse+0x1a4>
     ee2:	48 c0       	rjmp	.+144    	; 0xf74 <cmd_parse+0x1f6>
     ee4:	1f 3f       	cpi	r17, 0xFF	; 255
     ee6:	19 f0       	breq	.+6      	; 0xeee <cmd_parse+0x170>
     ee8:	11 23       	and	r17, r17
     eea:	a9 f1       	breq	.+106    	; 0xf56 <cmd_parse+0x1d8>
     eec:	43 c0       	rjmp	.+134    	; 0xf74 <cmd_parse+0x1f6>
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", command);
     eee:	df 92       	push	r13
     ef0:	cf 92       	push	r12
     ef2:	8a e0       	ldi	r24, 0x0A	; 10
     ef4:	9f e5       	ldi	r25, 0x5F	; 95
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
    	return retval;
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	36 c0       	rjmp	.+108    	; 0xf74 <cmd_parse+0x1f6>
    case -2:
        printf("FAIL. Failed to execute command %s!\r\n", command);
     f08:	df 92       	push	r13
     f0a:	cf 92       	push	r12
     f0c:	89 e3       	ldi	r24, 0x39	; 57
     f0e:	9f e5       	ldi	r25, 0x5F	; 95
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
        return retval;
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	29 c0       	rjmp	.+82     	; 0xf74 <cmd_parse+0x1f6>
    case -3:
        printf("FAIL. Invalid options/parameters for command %s!\r\n", command);
     f22:	df 92       	push	r13
     f24:	cf 92       	push	r12
     f26:	8f e5       	ldi	r24, 0x5F	; 95
     f28:	9f e5       	ldi	r25, 0x5F	; 95
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
        return retval;
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	1c c0       	rjmp	.+56     	; 0xf74 <cmd_parse+0x1f6>
    case -4:
        printf("FAIL. Parameter %s not found in parameter table!\r\n", param);
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	82 e9       	ldi	r24, 0x92	; 146
     f42:	9f e5       	ldi	r25, 0x5F	; 95
     f44:	9f 93       	push	r25
     f46:	8f 93       	push	r24
     f48:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
        return retval;
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <cmd_parse+0x1f6>
    case 0:
        printf("OK.\r\n");
     f56:	85 ec       	ldi	r24, 0xC5	; 197
     f58:	9f e5       	ldi	r25, 0x5F	; 95
     f5a:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
        return retval;
     f5e:	0a c0       	rjmp	.+20     	; 0xf74 <cmd_parse+0x1f6>
    int8_t retval = -1;                                 // set initial return value to -1 -> no valid command
    char *command = string;
    char *param = NULL;
    uint8_t is_param_op = 0;
    if (strcmp((const char *)string, "??") == 0) {
        command = "status";
     f60:	0f 2e       	mov	r0, r31
     f62:	fc e2       	ldi	r31, 0x2C	; 44
     f64:	cf 2e       	mov	r12, r31
     f66:	fe e5       	ldi	r31, 0x5E	; 94
     f68:	df 2e       	mov	r13, r31
     f6a:	f0 2d       	mov	r31, r0
     f6c:	0a ea       	ldi	r16, 0xAA	; 170
     f6e:	18 e2       	ldi	r17, 0x28	; 40
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}

int8_t cmd_parse(char *string) {
     f70:	f1 2c       	mov	r15, r1
     f72:	99 cf       	rjmp	.-206    	; 0xea6 <cmd_parse+0x128>
    case 0:
        printf("OK.\r\n");
        return retval;
    }
    return retval;
}
     f74:	81 2f       	mov	r24, r17
     f76:	28 96       	adiw	r28, 0x08	; 8
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	08 95       	ret

00000f8c <sys_status>:
        }
    }
    return retval;
}

int8_t sys_status() {
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <sys_status+0x12>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <sys_status+0x14>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
    printf("$ Available commands:\r\n");                      // print all defined commands in cmd table
     fa4:	8a ec       	ldi	r24, 0xCA	; 202
     fa6:	9f e5       	ldi	r25, 0x5F	; 95
     fa8:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
     fac:	0a ea       	ldi	r16, 0xAA	; 170
     fae:	18 e2       	ldi	r17, 0x28	; 40
     fb0:	0f 2e       	mov	r0, r31
     fb2:	fe e0       	ldi	r31, 0x0E	; 14
     fb4:	ef 2e       	mov	r14, r31
     fb6:	f9 e2       	ldi	r31, 0x29	; 41
     fb8:	ff 2e       	mov	r15, r31
     fba:	f0 2d       	mov	r31, r0
    for (uint8_t i = 0; i < NO_CMD; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("$ %s\r\n", cmd);
     fbc:	0f 2e       	mov	r0, r31
     fbe:	f1 ee       	ldi	r31, 0xE1	; 225
     fc0:	cf 2e       	mov	r12, r31
     fc2:	ff e5       	ldi	r31, 0x5F	; 95
     fc4:	df 2e       	mov	r13, r31
     fc6:	f0 2d       	mov	r31, r0
}

int8_t sys_status() {
    printf("$ Available commands:\r\n");                      // print all defined commands in cmd table
    for (uint8_t i = 0; i < NO_CMD; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
     fc8:	d8 01       	movw	r26, r16
     fca:	ed 91       	ld	r30, X+
     fcc:	fc 91       	ld	r31, X
        if (strcmp(cmd, "\0") != 0) {
     fce:	80 81       	ld	r24, Z
     fd0:	88 23       	and	r24, r24
     fd2:	51 f0       	breq	.+20     	; 0xfe8 <sys_status+0x5c>
            printf("$ %s\r\n", cmd);
     fd4:	ff 93       	push	r31
     fd6:	ef 93       	push	r30
     fd8:	df 92       	push	r13
     fda:	cf 92       	push	r12
     fdc:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0c 5f       	subi	r16, 0xFC	; 252
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
    return retval;
}

int8_t sys_status() {
    printf("$ Available commands:\r\n");                      // print all defined commands in cmd table
    for (uint8_t i = 0; i < NO_CMD; i++) {
     fec:	0e 15       	cp	r16, r14
     fee:	1f 05       	cpc	r17, r15
     ff0:	59 f7       	brne	.-42     	; 0xfc8 <sys_status+0x3c>
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("$ %s\r\n", cmd);
        }
    }
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
     ff2:	88 ee       	ldi	r24, 0xE8	; 232
     ff4:	9f e5       	ldi	r25, 0x5F	; 95
     ff6:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
     ffa:	0f 2e       	mov	r0, r31
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ef 2e       	mov	r14, r31
    1000:	f8 e2       	ldi	r31, 0x28	; 40
    1002:	ff 2e       	mov	r15, r31
    1004:	f0 2d       	mov	r31, r0
    1006:	00 e0       	ldi	r16, 0x00	; 0
    1008:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        uint32_t param_value = 0;
        if (strcmp((const char *)param_table[i].param, "\0") != 0) {
            param_get(param_table[i].param, &param_value);
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
    100a:	0f 2e       	mov	r0, r31
    100c:	ff ef       	ldi	r31, 0xFF	; 255
    100e:	cf 2e       	mov	r12, r31
    1010:	ff e5       	ldi	r31, 0x5F	; 95
    1012:	df 2e       	mov	r13, r31
    1014:	f0 2d       	mov	r31, r0
            printf("$ %s\r\n", cmd);
        }
    }
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
    for (uint8_t i = 0; i < NO_PARAM; i++) {
        uint32_t param_value = 0;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	1a 82       	std	Y+2, r1	; 0x02
    101a:	1b 82       	std	Y+3, r1	; 0x03
    101c:	1c 82       	std	Y+4, r1	; 0x04
        if (strcmp((const char *)param_table[i].param, "\0") != 0) {
    101e:	d7 01       	movw	r26, r14
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	80 81       	ld	r24, Z
    1026:	88 23       	and	r24, r24
    1028:	d9 f0       	breq	.+54     	; 0x1060 <sys_status+0xd4>
            param_get(param_table[i].param, &param_value);
    102a:	be 01       	movw	r22, r28
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	cf 01       	movw	r24, r30
    1032:	0e 94 c7 05 	call	0xb8e	; 0xb8e <param_get>
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	8f 93       	push	r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	8f 93       	push	r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	8f 93       	push	r24
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	8f 93       	push	r24
    1046:	f7 01       	movw	r30, r14
    1048:	81 81       	ldd	r24, Z+1	; 0x01
    104a:	8f 93       	push	r24
    104c:	80 81       	ld	r24, Z
    104e:	8f 93       	push	r24
    1050:	1f 93       	push	r17
    1052:	0f 93       	push	r16
    1054:	df 92       	push	r13
    1056:	cf 92       	push	r12
    1058:	0e 94 17 0b 	call	0x162e	; 0x162e <printf>
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f 5f       	subi	r16, 0xFF	; 255
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	95 e0       	ldi	r25, 0x05	; 5
    1066:	e9 0e       	add	r14, r25
    1068:	f1 1c       	adc	r15, r1
        if (strcmp(cmd, "\0") != 0) {
            printf("$ %s\r\n", cmd);
        }
    }
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
    for (uint8_t i = 0; i < NO_PARAM; i++) {
    106a:	02 32       	cpi	r16, 0x22	; 34
    106c:	11 05       	cpc	r17, r1
    106e:	99 f6       	brne	.-90     	; 0x1016 <sys_status+0x8a>
            param_get(param_table[i].param, &param_value);
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
        }

    }
    printf("$ Status message end #\r\n");
    1070:	80 e1       	ldi	r24, 0x10	; 16
    1072:	90 e6       	ldi	r25, 0x60	; 96
    1074:	0e 94 2d 0b 	call	0x165a	; 0x165a <puts>
    return 0;
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	24 96       	adiw	r28, 0x04	; 4
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	08 95       	ret

00001092 <uart0_printChar>:
    USART1.TXDATAL = c;
    while (!(USART1.STATUS & USART_DREIF_bm)) {     // Check for completed transmission
        ;
    }
    /* Return to receiver mode */
    PORTC.OUTCLR = PIN3_bm;
    1092:	e0 e0       	ldi	r30, 0x00	; 0
    1094:	f8 e0       	ldi	r31, 0x08	; 8
    1096:	94 81       	ldd	r25, Z+4	; 0x04
    1098:	95 ff       	sbrs	r25, 5
    109a:	fd cf       	rjmp	.-6      	; 0x1096 <uart0_printChar+0x4>
    109c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	08 95       	ret

000010a6 <uart_init>:
    Function definitions
    *************************************************/
void uart_init() {
    /* Setup stream for printf() */  
    #if USART_SEL == 0
        stdout = &uart0_stream;
    10a6:	89 e1       	ldi	r24, 0x19	; 25
    10a8:	99 e2       	ldi	r25, 0x29	; 41
    10aa:	80 93 1c 2a 	sts	0x2A1C, r24	; 0x802a1c <__iob+0x2>
    10ae:	90 93 1d 2a 	sts	0x2A1D, r25	; 0x802a1d <__iob+0x3>
        stdout = &uart1_stream;
    #endif
    
    /* USART0 Config (Main comms and debug interface) */
    /* Baud rate */
    USART0.BAUD = (uint16_t)USART_BAUD_RATE(BAUD0);
    10b2:	e0 e0       	ldi	r30, 0x00	; 0
    10b4:	f8 e0       	ldi	r31, 0x08	; 8
    10b6:	8b e5       	ldi	r24, 0x5B	; 91
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	80 87       	std	Z+8, r24	; 0x08
    10bc:	91 87       	std	Z+9, r25	; 0x09
    /* Enable interrupts */
    USART0.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm);
    10be:	85 81       	ldd	r24, Z+5	; 0x05
    10c0:	80 6e       	ori	r24, 0xE0	; 224
    10c2:	85 83       	std	Z+5, r24	; 0x05
    /* Enable TX & RX */
    USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);
    10c4:	86 81       	ldd	r24, Z+6	; 0x06
    10c6:	80 6c       	ori	r24, 0xC0	; 192
    10c8:	86 83       	std	Z+6, r24	; 0x06
    /* Set TX(PA0) to output, RX(PA1) to input */
    PORTA.DIRSET = PIN0_bm;
    10ca:	e0 e0       	ldi	r30, 0x00	; 0
    10cc:	f4 e0       	ldi	r31, 0x04	; 4
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	21 83       	std	Z+1, r18	; 0x01
    PORTA.DIRCLR = PIN1_bm;
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	92 83       	std	Z+2, r25	; 0x02
                                               

    
    /* USART1 Config (RS485 interface) */
    /* Baud rate */
    USART1.BAUD = (uint16_t)USART_BAUD_RATE(BAUD1);
    10d6:	e0 e2       	ldi	r30, 0x20	; 32
    10d8:	f8 e0       	ldi	r31, 0x08	; 8
    10da:	47 e4       	ldi	r20, 0x47	; 71
    10dc:	50 e1       	ldi	r21, 0x10	; 16
    10de:	40 87       	std	Z+8, r20	; 0x08
    10e0:	51 87       	std	Z+9, r21	; 0x09
    /* Enable interrupts */
    USART1.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm | USART_RS485_EXT_gc); 
    10e2:	85 81       	ldd	r24, Z+5	; 0x05
    10e4:	81 6e       	ori	r24, 0xE1	; 225
    10e6:	85 83       	std	Z+5, r24	; 0x05
    /* Enable TX & RX */    
    USART1.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);   
    10e8:	86 81       	ldd	r24, Z+6	; 0x06
    10ea:	80 6c       	ori	r24, 0xC0	; 192
    10ec:	86 83       	std	Z+6, r24	; 0x06
    /* Set TX(PC0) and XDIR(PC3) to output, RX(PC1) to input. XDIR low ->  Receiver mode */                     
    PORTC.DIRSET = PIN0_bm;                                              
    10ee:	e0 e4       	ldi	r30, 0x40	; 64
    10f0:	f4 e0       	ldi	r31, 0x04	; 4
    10f2:	21 83       	std	Z+1, r18	; 0x01
    PORTC.DIRCLR = PIN1_bm;                                                
    10f4:	92 83       	std	Z+2, r25	; 0x02
    PORTC.DIRSET = PIN3_bm;                                                
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	81 83       	std	Z+1, r24	; 0x01
    PORTC.OUTCLR = PIN3_bm;
    10fa:	86 83       	std	Z+6, r24	; 0x06
    10fc:	08 95       	ret

000010fe <uart0_readLoop>:
    }
    return USART0.RXDATAL;
}

void uart0_readLoop(){
    if (USART0.STATUS & USART_RXCIF_bm) {
    10fe:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
    1102:	88 23       	and	r24, r24
    1104:	e4 f4       	brge	.+56     	; 0x113e <uart0_readLoop+0x40>
        char c = USART0.RXDATAL;
    1106:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
        if ((c != '\r') && (c != '\n')) {
    110a:	8d 30       	cpi	r24, 0x0D	; 13
    110c:	c1 f0       	breq	.+48     	; 0x113e <uart0_readLoop+0x40>
    110e:	8a 30       	cpi	r24, 0x0A	; 10
    1110:	59 f0       	breq	.+22     	; 0x1128 <uart0_readLoop+0x2a>
            input[idx++] = c;    
    1112:	e0 91 2a 29 	lds	r30, 0x292A	; 0x80292a <idx>
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	9e 0f       	add	r25, r30
    111a:	90 93 2a 29 	sts	0x292A, r25	; 0x80292a <idx>
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	e6 5a       	subi	r30, 0xA6	; 166
    1122:	f6 4d       	sbci	r31, 0xD6	; 214
    1124:	80 83       	st	Z, r24
    1126:	08 95       	ret
        }
        if (c == '\n') {
            input[idx] = '\0';
    1128:	e0 91 2a 29 	lds	r30, 0x292A	; 0x80292a <idx>
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	e6 5a       	subi	r30, 0xA6	; 166
    1130:	f6 4d       	sbci	r31, 0xD6	; 214
    1132:	10 82       	st	Z, r1
            idx = 0;
    1134:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <idx>
            rxflag = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 2b 29 	sts	0x292B, r24	; 0x80292b <rxflag>
    113e:	08 95       	ret

00001140 <__fixunssfsi>:
    1140:	0e 94 14 09 	call	0x1228	; 0x1228 <__fp_splitA>
    1144:	88 f0       	brcs	.+34     	; 0x1168 <__fixunssfsi+0x28>
    1146:	9f 57       	subi	r25, 0x7F	; 127
    1148:	98 f0       	brcs	.+38     	; 0x1170 <__fixunssfsi+0x30>
    114a:	b9 2f       	mov	r27, r25
    114c:	99 27       	eor	r25, r25
    114e:	b7 51       	subi	r27, 0x17	; 23
    1150:	b0 f0       	brcs	.+44     	; 0x117e <__fixunssfsi+0x3e>
    1152:	e1 f0       	breq	.+56     	; 0x118c <__fixunssfsi+0x4c>
    1154:	66 0f       	add	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	1a f0       	brmi	.+6      	; 0x1164 <__fixunssfsi+0x24>
    115e:	ba 95       	dec	r27
    1160:	c9 f7       	brne	.-14     	; 0x1154 <__fixunssfsi+0x14>
    1162:	14 c0       	rjmp	.+40     	; 0x118c <__fixunssfsi+0x4c>
    1164:	b1 30       	cpi	r27, 0x01	; 1
    1166:	91 f0       	breq	.+36     	; 0x118c <__fixunssfsi+0x4c>
    1168:	0e 94 2e 09 	call	0x125c	; 0x125c <__fp_zero>
    116c:	b1 e0       	ldi	r27, 0x01	; 1
    116e:	08 95       	ret
    1170:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__fp_zero>
    1174:	67 2f       	mov	r22, r23
    1176:	78 2f       	mov	r23, r24
    1178:	88 27       	eor	r24, r24
    117a:	b8 5f       	subi	r27, 0xF8	; 248
    117c:	39 f0       	breq	.+14     	; 0x118c <__fixunssfsi+0x4c>
    117e:	b9 3f       	cpi	r27, 0xF9	; 249
    1180:	cc f3       	brlt	.-14     	; 0x1174 <__fixunssfsi+0x34>
    1182:	86 95       	lsr	r24
    1184:	77 95       	ror	r23
    1186:	67 95       	ror	r22
    1188:	b3 95       	inc	r27
    118a:	d9 f7       	brne	.-10     	; 0x1182 <__fixunssfsi+0x42>
    118c:	3e f4       	brtc	.+14     	; 0x119c <__fixunssfsi+0x5c>
    118e:	90 95       	com	r25
    1190:	80 95       	com	r24
    1192:	70 95       	com	r23
    1194:	61 95       	neg	r22
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	8f 4f       	sbci	r24, 0xFF	; 255
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	08 95       	ret

0000119e <__floatunsisf>:
    119e:	e8 94       	clt
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <__floatsisf+0x12>

000011a2 <__floatsisf>:
    11a2:	97 fb       	bst	r25, 7
    11a4:	3e f4       	brtc	.+14     	; 0x11b4 <__floatsisf+0x12>
    11a6:	90 95       	com	r25
    11a8:	80 95       	com	r24
    11aa:	70 95       	com	r23
    11ac:	61 95       	neg	r22
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	99 23       	and	r25, r25
    11b6:	a9 f0       	breq	.+42     	; 0x11e2 <__floatsisf+0x40>
    11b8:	f9 2f       	mov	r31, r25
    11ba:	96 e9       	ldi	r25, 0x96	; 150
    11bc:	bb 27       	eor	r27, r27
    11be:	93 95       	inc	r25
    11c0:	f6 95       	lsr	r31
    11c2:	87 95       	ror	r24
    11c4:	77 95       	ror	r23
    11c6:	67 95       	ror	r22
    11c8:	b7 95       	ror	r27
    11ca:	f1 11       	cpse	r31, r1
    11cc:	f8 cf       	rjmp	.-16     	; 0x11be <__floatsisf+0x1c>
    11ce:	fa f4       	brpl	.+62     	; 0x120e <__floatsisf+0x6c>
    11d0:	bb 0f       	add	r27, r27
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <__floatsisf+0x36>
    11d4:	60 ff       	sbrs	r22, 0
    11d6:	1b c0       	rjmp	.+54     	; 0x120e <__floatsisf+0x6c>
    11d8:	6f 5f       	subi	r22, 0xFF	; 255
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	8f 4f       	sbci	r24, 0xFF	; 255
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	16 c0       	rjmp	.+44     	; 0x120e <__floatsisf+0x6c>
    11e2:	88 23       	and	r24, r24
    11e4:	11 f0       	breq	.+4      	; 0x11ea <__floatsisf+0x48>
    11e6:	96 e9       	ldi	r25, 0x96	; 150
    11e8:	11 c0       	rjmp	.+34     	; 0x120c <__floatsisf+0x6a>
    11ea:	77 23       	and	r23, r23
    11ec:	21 f0       	breq	.+8      	; 0x11f6 <__floatsisf+0x54>
    11ee:	9e e8       	ldi	r25, 0x8E	; 142
    11f0:	87 2f       	mov	r24, r23
    11f2:	76 2f       	mov	r23, r22
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <__floatsisf+0x5e>
    11f6:	66 23       	and	r22, r22
    11f8:	71 f0       	breq	.+28     	; 0x1216 <__floatsisf+0x74>
    11fa:	96 e8       	ldi	r25, 0x86	; 134
    11fc:	86 2f       	mov	r24, r22
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	2a f0       	brmi	.+10     	; 0x120e <__floatsisf+0x6c>
    1204:	9a 95       	dec	r25
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	da f7       	brpl	.-10     	; 0x1204 <__floatsisf+0x62>
    120e:	88 0f       	add	r24, r24
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret

00001218 <__fp_split3>:
    1218:	57 fd       	sbrc	r21, 7
    121a:	90 58       	subi	r25, 0x80	; 128
    121c:	44 0f       	add	r20, r20
    121e:	55 1f       	adc	r21, r21
    1220:	59 f0       	breq	.+22     	; 0x1238 <__fp_splitA+0x10>
    1222:	5f 3f       	cpi	r21, 0xFF	; 255
    1224:	71 f0       	breq	.+28     	; 0x1242 <__fp_splitA+0x1a>
    1226:	47 95       	ror	r20

00001228 <__fp_splitA>:
    1228:	88 0f       	add	r24, r24
    122a:	97 fb       	bst	r25, 7
    122c:	99 1f       	adc	r25, r25
    122e:	61 f0       	breq	.+24     	; 0x1248 <__fp_splitA+0x20>
    1230:	9f 3f       	cpi	r25, 0xFF	; 255
    1232:	79 f0       	breq	.+30     	; 0x1252 <__fp_splitA+0x2a>
    1234:	87 95       	ror	r24
    1236:	08 95       	ret
    1238:	12 16       	cp	r1, r18
    123a:	13 06       	cpc	r1, r19
    123c:	14 06       	cpc	r1, r20
    123e:	55 1f       	adc	r21, r21
    1240:	f2 cf       	rjmp	.-28     	; 0x1226 <__fp_split3+0xe>
    1242:	46 95       	lsr	r20
    1244:	f1 df       	rcall	.-30     	; 0x1228 <__fp_splitA>
    1246:	08 c0       	rjmp	.+16     	; 0x1258 <__fp_splitA+0x30>
    1248:	16 16       	cp	r1, r22
    124a:	17 06       	cpc	r1, r23
    124c:	18 06       	cpc	r1, r24
    124e:	99 1f       	adc	r25, r25
    1250:	f1 cf       	rjmp	.-30     	; 0x1234 <__fp_splitA+0xc>
    1252:	86 95       	lsr	r24
    1254:	71 05       	cpc	r23, r1
    1256:	61 05       	cpc	r22, r1
    1258:	08 94       	sec
    125a:	08 95       	ret

0000125c <__fp_zero>:
    125c:	e8 94       	clt

0000125e <__fp_szero>:
    125e:	bb 27       	eor	r27, r27
    1260:	66 27       	eor	r22, r22
    1262:	77 27       	eor	r23, r23
    1264:	cb 01       	movw	r24, r22
    1266:	97 f9       	bld	r25, 7
    1268:	08 95       	ret

0000126a <__mulsf3>:
    126a:	0e 94 48 09 	call	0x1290	; 0x1290 <__mulsf3x>
    126e:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_round>
    1272:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_pscA>
    1276:	38 f0       	brcs	.+14     	; 0x1286 <__mulsf3+0x1c>
    1278:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_pscB>
    127c:	20 f0       	brcs	.+8      	; 0x1286 <__mulsf3+0x1c>
    127e:	95 23       	and	r25, r21
    1280:	11 f0       	breq	.+4      	; 0x1286 <__mulsf3+0x1c>
    1282:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_inf>
    1286:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__fp_nan>
    128a:	11 24       	eor	r1, r1
    128c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_szero>

00001290 <__mulsf3x>:
    1290:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_split3>
    1294:	70 f3       	brcs	.-36     	; 0x1272 <__mulsf3+0x8>

00001296 <__mulsf3_pse>:
    1296:	95 9f       	mul	r25, r21
    1298:	c1 f3       	breq	.-16     	; 0x128a <__mulsf3+0x20>
    129a:	95 0f       	add	r25, r21
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	55 1f       	adc	r21, r21
    12a0:	62 9f       	mul	r22, r18
    12a2:	f0 01       	movw	r30, r0
    12a4:	72 9f       	mul	r23, r18
    12a6:	bb 27       	eor	r27, r27
    12a8:	f0 0d       	add	r31, r0
    12aa:	b1 1d       	adc	r27, r1
    12ac:	63 9f       	mul	r22, r19
    12ae:	aa 27       	eor	r26, r26
    12b0:	f0 0d       	add	r31, r0
    12b2:	b1 1d       	adc	r27, r1
    12b4:	aa 1f       	adc	r26, r26
    12b6:	64 9f       	mul	r22, r20
    12b8:	66 27       	eor	r22, r22
    12ba:	b0 0d       	add	r27, r0
    12bc:	a1 1d       	adc	r26, r1
    12be:	66 1f       	adc	r22, r22
    12c0:	82 9f       	mul	r24, r18
    12c2:	22 27       	eor	r18, r18
    12c4:	b0 0d       	add	r27, r0
    12c6:	a1 1d       	adc	r26, r1
    12c8:	62 1f       	adc	r22, r18
    12ca:	73 9f       	mul	r23, r19
    12cc:	b0 0d       	add	r27, r0
    12ce:	a1 1d       	adc	r26, r1
    12d0:	62 1f       	adc	r22, r18
    12d2:	83 9f       	mul	r24, r19
    12d4:	a0 0d       	add	r26, r0
    12d6:	61 1d       	adc	r22, r1
    12d8:	22 1f       	adc	r18, r18
    12da:	74 9f       	mul	r23, r20
    12dc:	33 27       	eor	r19, r19
    12de:	a0 0d       	add	r26, r0
    12e0:	61 1d       	adc	r22, r1
    12e2:	23 1f       	adc	r18, r19
    12e4:	84 9f       	mul	r24, r20
    12e6:	60 0d       	add	r22, r0
    12e8:	21 1d       	adc	r18, r1
    12ea:	82 2f       	mov	r24, r18
    12ec:	76 2f       	mov	r23, r22
    12ee:	6a 2f       	mov	r22, r26
    12f0:	11 24       	eor	r1, r1
    12f2:	9f 57       	subi	r25, 0x7F	; 127
    12f4:	50 40       	sbci	r21, 0x00	; 0
    12f6:	9a f0       	brmi	.+38     	; 0x131e <__mulsf3_pse+0x88>
    12f8:	f1 f0       	breq	.+60     	; 0x1336 <__mulsf3_pse+0xa0>
    12fa:	88 23       	and	r24, r24
    12fc:	4a f0       	brmi	.+18     	; 0x1310 <__mulsf3_pse+0x7a>
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	bb 1f       	adc	r27, r27
    1304:	66 1f       	adc	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	88 1f       	adc	r24, r24
    130a:	91 50       	subi	r25, 0x01	; 1
    130c:	50 40       	sbci	r21, 0x00	; 0
    130e:	a9 f7       	brne	.-22     	; 0x12fa <__mulsf3_pse+0x64>
    1310:	9e 3f       	cpi	r25, 0xFE	; 254
    1312:	51 05       	cpc	r21, r1
    1314:	80 f0       	brcs	.+32     	; 0x1336 <__mulsf3_pse+0xa0>
    1316:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_inf>
    131a:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_szero>
    131e:	5f 3f       	cpi	r21, 0xFF	; 255
    1320:	e4 f3       	brlt	.-8      	; 0x131a <__mulsf3_pse+0x84>
    1322:	98 3e       	cpi	r25, 0xE8	; 232
    1324:	d4 f3       	brlt	.-12     	; 0x131a <__mulsf3_pse+0x84>
    1326:	86 95       	lsr	r24
    1328:	77 95       	ror	r23
    132a:	67 95       	ror	r22
    132c:	b7 95       	ror	r27
    132e:	f7 95       	ror	r31
    1330:	e7 95       	ror	r30
    1332:	9f 5f       	subi	r25, 0xFF	; 255
    1334:	c1 f7       	brne	.-16     	; 0x1326 <__mulsf3_pse+0x90>
    1336:	fe 2b       	or	r31, r30
    1338:	88 0f       	add	r24, r24
    133a:	91 1d       	adc	r25, r1
    133c:	96 95       	lsr	r25
    133e:	87 95       	ror	r24
    1340:	97 f9       	bld	r25, 7
    1342:	08 95       	ret

00001344 <__fp_inf>:
    1344:	97 f9       	bld	r25, 7
    1346:	9f 67       	ori	r25, 0x7F	; 127
    1348:	80 e8       	ldi	r24, 0x80	; 128
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	08 95       	ret

00001350 <__fp_nan>:
    1350:	9f ef       	ldi	r25, 0xFF	; 255
    1352:	80 ec       	ldi	r24, 0xC0	; 192
    1354:	08 95       	ret

00001356 <__fp_pscA>:
    1356:	00 24       	eor	r0, r0
    1358:	0a 94       	dec	r0
    135a:	16 16       	cp	r1, r22
    135c:	17 06       	cpc	r1, r23
    135e:	18 06       	cpc	r1, r24
    1360:	09 06       	cpc	r0, r25
    1362:	08 95       	ret

00001364 <__fp_pscB>:
    1364:	00 24       	eor	r0, r0
    1366:	0a 94       	dec	r0
    1368:	12 16       	cp	r1, r18
    136a:	13 06       	cpc	r1, r19
    136c:	14 06       	cpc	r1, r20
    136e:	05 06       	cpc	r0, r21
    1370:	08 95       	ret

00001372 <__fp_round>:
    1372:	09 2e       	mov	r0, r25
    1374:	03 94       	inc	r0
    1376:	00 0c       	add	r0, r0
    1378:	11 f4       	brne	.+4      	; 0x137e <__fp_round+0xc>
    137a:	88 23       	and	r24, r24
    137c:	52 f0       	brmi	.+20     	; 0x1392 <__fp_round+0x20>
    137e:	bb 0f       	add	r27, r27
    1380:	40 f4       	brcc	.+16     	; 0x1392 <__fp_round+0x20>
    1382:	bf 2b       	or	r27, r31
    1384:	11 f4       	brne	.+4      	; 0x138a <__fp_round+0x18>
    1386:	60 ff       	sbrs	r22, 0
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <__fp_round+0x20>
    138a:	6f 5f       	subi	r22, 0xFF	; 255
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	8f 4f       	sbci	r24, 0xFF	; 255
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	08 95       	ret

00001394 <__umulhisi3>:
    1394:	a2 9f       	mul	r26, r18
    1396:	b0 01       	movw	r22, r0
    1398:	b3 9f       	mul	r27, r19
    139a:	c0 01       	movw	r24, r0
    139c:	a3 9f       	mul	r26, r19
    139e:	70 0d       	add	r23, r0
    13a0:	81 1d       	adc	r24, r1
    13a2:	11 24       	eor	r1, r1
    13a4:	91 1d       	adc	r25, r1
    13a6:	b2 9f       	mul	r27, r18
    13a8:	70 0d       	add	r23, r0
    13aa:	81 1d       	adc	r24, r1
    13ac:	11 24       	eor	r1, r1
    13ae:	91 1d       	adc	r25, r1
    13b0:	08 95       	ret

000013b2 <strtoul>:
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ef ed       	ldi	r30, 0xDF	; 223
    13b8:	f9 e0       	ldi	r31, 0x09	; 9
    13ba:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__prologue_saves__+0x2>
    13be:	5c 01       	movw	r10, r24
    13c0:	6b 01       	movw	r12, r22
    13c2:	7a 01       	movw	r14, r20
    13c4:	61 15       	cp	r22, r1
    13c6:	71 05       	cpc	r23, r1
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <strtoul+0x1e>
    13ca:	fb 01       	movw	r30, r22
    13cc:	80 83       	st	Z, r24
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	e1 14       	cp	r14, r1
    13d2:	f1 04       	cpc	r15, r1
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <strtoul+0x2e>
    13d6:	c7 01       	movw	r24, r14
    13d8:	02 97       	sbiw	r24, 0x02	; 2
    13da:	83 97       	sbiw	r24, 0x23	; 35
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <strtoul+0x2e>
    13de:	c9 c0       	rjmp	.+402    	; 0x1572 <strtoul+0x1c0>
    13e0:	e5 01       	movw	r28, r10
    13e2:	21 96       	adiw	r28, 0x01	; 1
    13e4:	f5 01       	movw	r30, r10
    13e6:	10 81       	ld	r17, Z
    13e8:	81 2f       	mov	r24, r17
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 ce 0a 	call	0x159c	; 0x159c <isspace>
    13f0:	89 2b       	or	r24, r25
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <strtoul+0x46>
    13f4:	5e 01       	movw	r10, r28
    13f6:	f4 cf       	rjmp	.-24     	; 0x13e0 <strtoul+0x2e>
    13f8:	1d 32       	cpi	r17, 0x2D	; 45
    13fa:	29 f4       	brne	.+10     	; 0x1406 <strtoul+0x54>
    13fc:	21 96       	adiw	r28, 0x01	; 1
    13fe:	f5 01       	movw	r30, r10
    1400:	11 81       	ldd	r17, Z+1	; 0x01
    1402:	01 e0       	ldi	r16, 0x01	; 1
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <strtoul+0x62>
    1406:	1b 32       	cpi	r17, 0x2B	; 43
    1408:	21 f4       	brne	.+8      	; 0x1412 <strtoul+0x60>
    140a:	e5 01       	movw	r28, r10
    140c:	22 96       	adiw	r28, 0x02	; 2
    140e:	f5 01       	movw	r30, r10
    1410:	11 81       	ldd	r17, Z+1	; 0x01
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	e1 14       	cp	r14, r1
    1416:	f1 04       	cpc	r15, r1
    1418:	b1 f0       	breq	.+44     	; 0x1446 <strtoul+0x94>
    141a:	f0 e1       	ldi	r31, 0x10	; 16
    141c:	ef 16       	cp	r14, r31
    141e:	f1 04       	cpc	r15, r1
    1420:	29 f4       	brne	.+10     	; 0x142c <strtoul+0x7a>
    1422:	b0 c0       	rjmp	.+352    	; 0x1584 <strtoul+0x1d2>
    1424:	10 e3       	ldi	r17, 0x30	; 48
    1426:	e1 14       	cp	r14, r1
    1428:	f1 04       	cpc	r15, r1
    142a:	01 f1       	breq	.+64     	; 0x146c <strtoul+0xba>
    142c:	2a e0       	ldi	r18, 0x0A	; 10
    142e:	e2 16       	cp	r14, r18
    1430:	f1 04       	cpc	r15, r1
    1432:	b1 f1       	breq	.+108    	; 0x14a0 <strtoul+0xee>
    1434:	80 e1       	ldi	r24, 0x10	; 16
    1436:	e8 16       	cp	r14, r24
    1438:	f1 04       	cpc	r15, r1
    143a:	71 f0       	breq	.+28     	; 0x1458 <strtoul+0xa6>
    143c:	e8 e0       	ldi	r30, 0x08	; 8
    143e:	ee 16       	cp	r14, r30
    1440:	f1 04       	cpc	r15, r1
    1442:	f1 f4       	brne	.+60     	; 0x1480 <strtoul+0xce>
    1444:	13 c0       	rjmp	.+38     	; 0x146c <strtoul+0xba>
    1446:	10 33       	cpi	r17, 0x30	; 48
    1448:	41 f5       	brne	.+80     	; 0x149a <strtoul+0xe8>
    144a:	88 81       	ld	r24, Y
    144c:	8f 7d       	andi	r24, 0xDF	; 223
    144e:	88 35       	cpi	r24, 0x58	; 88
    1450:	49 f7       	brne	.-46     	; 0x1424 <strtoul+0x72>
    1452:	19 81       	ldd	r17, Y+1	; 0x01
    1454:	22 96       	adiw	r28, 0x02	; 2
    1456:	02 60       	ori	r16, 0x02	; 2
    1458:	f0 e1       	ldi	r31, 0x10	; 16
    145a:	ef 2e       	mov	r14, r31
    145c:	f1 2c       	mov	r15, r1
    145e:	88 24       	eor	r8, r8
    1460:	8a 94       	dec	r8
    1462:	98 2c       	mov	r9, r8
    1464:	a8 2c       	mov	r10, r8
    1466:	af e0       	ldi	r26, 0x0F	; 15
    1468:	ba 2e       	mov	r11, r26
    146a:	20 c0       	rjmp	.+64     	; 0x14ac <strtoul+0xfa>
    146c:	78 e0       	ldi	r23, 0x08	; 8
    146e:	e7 2e       	mov	r14, r23
    1470:	f1 2c       	mov	r15, r1
    1472:	88 24       	eor	r8, r8
    1474:	8a 94       	dec	r8
    1476:	98 2c       	mov	r9, r8
    1478:	a8 2c       	mov	r10, r8
    147a:	ef e1       	ldi	r30, 0x1F	; 31
    147c:	be 2e       	mov	r11, r30
    147e:	16 c0       	rjmp	.+44     	; 0x14ac <strtoul+0xfa>
    1480:	6f ef       	ldi	r22, 0xFF	; 255
    1482:	7f ef       	ldi	r23, 0xFF	; 255
    1484:	cb 01       	movw	r24, r22
    1486:	97 01       	movw	r18, r14
    1488:	0f 2c       	mov	r0, r15
    148a:	00 0c       	add	r0, r0
    148c:	44 0b       	sbc	r20, r20
    148e:	55 0b       	sbc	r21, r21
    1490:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__udivmodsi4>
    1494:	49 01       	movw	r8, r18
    1496:	5a 01       	movw	r10, r20
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <strtoul+0xfa>
    149a:	8a e0       	ldi	r24, 0x0A	; 10
    149c:	e8 2e       	mov	r14, r24
    149e:	f1 2c       	mov	r15, r1
    14a0:	69 e9       	ldi	r22, 0x99	; 153
    14a2:	86 2e       	mov	r8, r22
    14a4:	98 2c       	mov	r9, r8
    14a6:	a8 2c       	mov	r10, r8
    14a8:	69 e1       	ldi	r22, 0x19	; 25
    14aa:	b6 2e       	mov	r11, r22
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	cb 01       	movw	r24, r22
    14b4:	27 01       	movw	r4, r14
    14b6:	0f 2c       	mov	r0, r15
    14b8:	00 0c       	add	r0, r0
    14ba:	66 08       	sbc	r6, r6
    14bc:	77 08       	sbc	r7, r7
    14be:	fe 01       	movw	r30, r28
    14c0:	50 ed       	ldi	r21, 0xD0	; 208
    14c2:	35 2e       	mov	r3, r21
    14c4:	31 0e       	add	r3, r17
    14c6:	29 e0       	ldi	r18, 0x09	; 9
    14c8:	23 15       	cp	r18, r3
    14ca:	70 f4       	brcc	.+28     	; 0x14e8 <strtoul+0x136>
    14cc:	2f eb       	ldi	r18, 0xBF	; 191
    14ce:	21 0f       	add	r18, r17
    14d0:	2a 31       	cpi	r18, 0x1A	; 26
    14d2:	18 f4       	brcc	.+6      	; 0x14da <strtoul+0x128>
    14d4:	39 ec       	ldi	r19, 0xC9	; 201
    14d6:	33 2e       	mov	r3, r19
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <strtoul+0x134>
    14da:	2f e9       	ldi	r18, 0x9F	; 159
    14dc:	21 0f       	add	r18, r17
    14de:	2a 31       	cpi	r18, 0x1A	; 26
    14e0:	30 f5       	brcc	.+76     	; 0x152e <strtoul+0x17c>
    14e2:	29 ea       	ldi	r18, 0xA9	; 169
    14e4:	32 2e       	mov	r3, r18
    14e6:	31 0e       	add	r3, r17
    14e8:	23 2d       	mov	r18, r3
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	2e 15       	cp	r18, r14
    14ee:	3f 05       	cpc	r19, r15
    14f0:	f4 f4       	brge	.+60     	; 0x152e <strtoul+0x17c>
    14f2:	4f 3f       	cpi	r20, 0xFF	; 255
    14f4:	c9 f0       	breq	.+50     	; 0x1528 <strtoul+0x176>
    14f6:	86 16       	cp	r8, r22
    14f8:	97 06       	cpc	r9, r23
    14fa:	a8 06       	cpc	r10, r24
    14fc:	b9 06       	cpc	r11, r25
    14fe:	88 f0       	brcs	.+34     	; 0x1522 <strtoul+0x170>
    1500:	a3 01       	movw	r20, r6
    1502:	92 01       	movw	r18, r4
    1504:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__mulsi3>
    1508:	23 2d       	mov	r18, r3
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	62 0f       	add	r22, r18
    1512:	73 1f       	adc	r23, r19
    1514:	84 1f       	adc	r24, r20
    1516:	95 1f       	adc	r25, r21
    1518:	62 17       	cp	r22, r18
    151a:	73 07       	cpc	r23, r19
    151c:	84 07       	cpc	r24, r20
    151e:	95 07       	cpc	r25, r21
    1520:	10 f4       	brcc	.+4      	; 0x1526 <strtoul+0x174>
    1522:	4f ef       	ldi	r20, 0xFF	; 255
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <strtoul+0x176>
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	21 96       	adiw	r28, 0x01	; 1
    152a:	10 81       	ld	r17, Z
    152c:	c8 cf       	rjmp	.-112    	; 0x14be <strtoul+0x10c>
    152e:	c1 14       	cp	r12, r1
    1530:	d1 04       	cpc	r13, r1
    1532:	51 f0       	breq	.+20     	; 0x1548 <strtoul+0x196>
    1534:	44 23       	and	r20, r20
    1536:	11 f0       	breq	.+4      	; 0x153c <strtoul+0x18a>
    1538:	21 97       	sbiw	r28, 0x01	; 1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <strtoul+0x190>
    153c:	01 ff       	sbrs	r16, 1
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <strtoul+0x196>
    1540:	22 97       	sbiw	r28, 0x02	; 2
    1542:	f6 01       	movw	r30, r12
    1544:	c0 83       	st	Z, r28
    1546:	d1 83       	std	Z+1, r29	; 0x01
    1548:	00 ff       	sbrs	r16, 0
    154a:	07 c0       	rjmp	.+14     	; 0x155a <strtoul+0x1a8>
    154c:	90 95       	com	r25
    154e:	80 95       	com	r24
    1550:	70 95       	com	r23
    1552:	61 95       	neg	r22
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	4f 3f       	cpi	r20, 0xFF	; 255
    155c:	79 f4       	brne	.+30     	; 0x157c <strtoul+0x1ca>
    155e:	82 e2       	ldi	r24, 0x22	; 34
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	80 93 20 2a 	sts	0x2A20, r24	; 0x802a20 <errno>
    1566:	90 93 21 2a 	sts	0x2A21, r25	; 0x802a21 <errno+0x1>
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	2f ef       	ldi	r18, 0xFF	; 255
    156e:	9f ef       	ldi	r25, 0xFF	; 255
    1570:	0d c0       	rjmp	.+26     	; 0x158c <strtoul+0x1da>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	08 c0       	rjmp	.+16     	; 0x158c <strtoul+0x1da>
    157c:	46 2f       	mov	r20, r22
    157e:	37 2f       	mov	r19, r23
    1580:	28 2f       	mov	r18, r24
    1582:	04 c0       	rjmp	.+8      	; 0x158c <strtoul+0x1da>
    1584:	10 33       	cpi	r17, 0x30	; 48
    1586:	09 f0       	breq	.+2      	; 0x158a <strtoul+0x1d8>
    1588:	67 cf       	rjmp	.-306    	; 0x1458 <strtoul+0xa6>
    158a:	5f cf       	rjmp	.-322    	; 0x144a <strtoul+0x98>
    158c:	64 2f       	mov	r22, r20
    158e:	73 2f       	mov	r23, r19
    1590:	82 2f       	mov	r24, r18
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	e1 e1       	ldi	r30, 0x11	; 17
    1598:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__epilogue_restores__+0x2>

0000159c <isspace>:
    159c:	91 11       	cpse	r25, r1
    159e:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__ctype_isfalse>
    15a2:	80 32       	cpi	r24, 0x20	; 32
    15a4:	19 f0       	breq	.+6      	; 0x15ac <isspace+0x10>
    15a6:	89 50       	subi	r24, 0x09	; 9
    15a8:	85 50       	subi	r24, 0x05	; 5
    15aa:	c8 f7       	brcc	.-14     	; 0x159e <isspace+0x2>
    15ac:	08 95       	ret

000015ae <strtok>:
    15ae:	48 e2       	ldi	r20, 0x28	; 40
    15b0:	59 e2       	ldi	r21, 0x29	; 41
    15b2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <strtok_r>
    15b6:	08 95       	ret

000015b8 <strchr>:
    15b8:	fc 01       	movw	r30, r24
    15ba:	81 91       	ld	r24, Z+
    15bc:	86 17       	cp	r24, r22
    15be:	21 f0       	breq	.+8      	; 0x15c8 <strchr+0x10>
    15c0:	88 23       	and	r24, r24
    15c2:	d9 f7       	brne	.-10     	; 0x15ba <strchr+0x2>
    15c4:	99 27       	eor	r25, r25
    15c6:	08 95       	ret
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	cf 01       	movw	r24, r30
    15cc:	08 95       	ret

000015ce <strcmp>:
    15ce:	fb 01       	movw	r30, r22
    15d0:	dc 01       	movw	r26, r24
    15d2:	8d 91       	ld	r24, X+
    15d4:	01 90       	ld	r0, Z+
    15d6:	80 19       	sub	r24, r0
    15d8:	01 10       	cpse	r0, r1
    15da:	d9 f3       	breq	.-10     	; 0x15d2 <strcmp+0x4>
    15dc:	99 0b       	sbc	r25, r25
    15de:	08 95       	ret

000015e0 <strtok_r>:
    15e0:	fa 01       	movw	r30, r20
    15e2:	a1 91       	ld	r26, Z+
    15e4:	b0 81       	ld	r27, Z
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	19 f4       	brne	.+6      	; 0x15f0 <strtok_r+0x10>
    15ea:	10 97       	sbiw	r26, 0x00	; 0
    15ec:	e1 f0       	breq	.+56     	; 0x1626 <strtok_r+0x46>
    15ee:	cd 01       	movw	r24, r26
    15f0:	dc 01       	movw	r26, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	0d 90       	ld	r0, X+
    15f6:	00 20       	and	r0, r0
    15f8:	11 f4       	brne	.+4      	; 0x15fe <strtok_r+0x1e>
    15fa:	c0 01       	movw	r24, r0
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <strtok_r+0x44>
    15fe:	fb 01       	movw	r30, r22
    1600:	21 91       	ld	r18, Z+
    1602:	22 23       	and	r18, r18
    1604:	19 f0       	breq	.+6      	; 0x160c <strtok_r+0x2c>
    1606:	20 15       	cp	r18, r0
    1608:	d9 f7       	brne	.-10     	; 0x1600 <strtok_r+0x20>
    160a:	f3 cf       	rjmp	.-26     	; 0x15f2 <strtok_r+0x12>
    160c:	fb 01       	movw	r30, r22
    160e:	21 91       	ld	r18, Z+
    1610:	20 15       	cp	r18, r0
    1612:	19 f4       	brne	.+6      	; 0x161a <strtok_r+0x3a>
    1614:	1e 92       	st	-X, r1
    1616:	11 96       	adiw	r26, 0x01	; 1
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <strtok_r+0x46>
    161a:	22 23       	and	r18, r18
    161c:	c1 f7       	brne	.-16     	; 0x160e <strtok_r+0x2e>
    161e:	0d 90       	ld	r0, X+
    1620:	00 20       	and	r0, r0
    1622:	a1 f7       	brne	.-24     	; 0x160c <strtok_r+0x2c>
    1624:	d0 01       	movw	r26, r0
    1626:	fa 01       	movw	r30, r20
    1628:	a1 93       	st	Z+, r26
    162a:	b0 83       	st	Z, r27
    162c:	08 95       	ret

0000162e <printf>:
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ed e1       	ldi	r30, 0x1D	; 29
    1634:	fb e0       	ldi	r31, 0x0B	; 11
    1636:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__prologue_saves__+0x20>
    163a:	ae 01       	movw	r20, r28
    163c:	4b 5f       	subi	r20, 0xFB	; 251
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
    1640:	fa 01       	movw	r30, r20
    1642:	61 91       	ld	r22, Z+
    1644:	71 91       	ld	r23, Z+
    1646:	af 01       	movw	r20, r30
    1648:	80 91 1c 2a 	lds	r24, 0x2A1C	; 0x802a1c <__iob+0x2>
    164c:	90 91 1d 2a 	lds	r25, 0x2A1D	; 0x802a1d <__iob+0x3>
    1650:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <vfprintf>
    1654:	e2 e0       	ldi	r30, 0x02	; 2
    1656:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__epilogue_restores__+0x20>

0000165a <puts>:
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	e0 91 1c 2a 	lds	r30, 0x2A1C	; 0x802a1c <__iob+0x2>
    1666:	f0 91 1d 2a 	lds	r31, 0x2A1D	; 0x802a1d <__iob+0x3>
    166a:	23 81       	ldd	r18, Z+3	; 0x03
    166c:	21 ff       	sbrs	r18, 1
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <puts+0x4c>
    1670:	8c 01       	movw	r16, r24
    1672:	d0 e0       	ldi	r29, 0x00	; 0
    1674:	c0 e0       	ldi	r28, 0x00	; 0
    1676:	f8 01       	movw	r30, r16
    1678:	81 91       	ld	r24, Z+
    167a:	8f 01       	movw	r16, r30
    167c:	60 91 1c 2a 	lds	r22, 0x2A1C	; 0x802a1c <__iob+0x2>
    1680:	70 91 1d 2a 	lds	r23, 0x2A1D	; 0x802a1d <__iob+0x3>
    1684:	db 01       	movw	r26, r22
    1686:	18 96       	adiw	r26, 0x08	; 8
    1688:	ed 91       	ld	r30, X+
    168a:	fc 91       	ld	r31, X
    168c:	19 97       	sbiw	r26, 0x09	; 9
    168e:	88 23       	and	r24, r24
    1690:	31 f0       	breq	.+12     	; 0x169e <puts+0x44>
    1692:	09 95       	icall
    1694:	89 2b       	or	r24, r25
    1696:	79 f3       	breq	.-34     	; 0x1676 <puts+0x1c>
    1698:	df ef       	ldi	r29, 0xFF	; 255
    169a:	cf ef       	ldi	r28, 0xFF	; 255
    169c:	ec cf       	rjmp	.-40     	; 0x1676 <puts+0x1c>
    169e:	8a e0       	ldi	r24, 0x0A	; 10
    16a0:	09 95       	icall
    16a2:	89 2b       	or	r24, r25
    16a4:	19 f0       	breq	.+6      	; 0x16ac <puts+0x52>
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <puts+0x56>
    16ac:	8d 2f       	mov	r24, r29
    16ae:	9c 2f       	mov	r25, r28
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <vfprintf>:
    16ba:	ab e0       	ldi	r26, 0x0B	; 11
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e3 e6       	ldi	r30, 0x63	; 99
    16c0:	fb e0       	ldi	r31, 0x0B	; 11
    16c2:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__>
    16c6:	6c 01       	movw	r12, r24
    16c8:	7b 01       	movw	r14, r22
    16ca:	8a 01       	movw	r16, r20
    16cc:	fc 01       	movw	r30, r24
    16ce:	16 82       	std	Z+6, r1	; 0x06
    16d0:	17 82       	std	Z+7, r1	; 0x07
    16d2:	83 81       	ldd	r24, Z+3	; 0x03
    16d4:	81 ff       	sbrs	r24, 1
    16d6:	cc c1       	rjmp	.+920    	; 0x1a70 <__DATA_REGION_LENGTH__+0x270>
    16d8:	ce 01       	movw	r24, r28
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	3c 01       	movw	r6, r24
    16de:	f6 01       	movw	r30, r12
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	f7 01       	movw	r30, r14
    16e4:	93 fd       	sbrc	r25, 3
    16e6:	85 91       	lpm	r24, Z+
    16e8:	93 ff       	sbrs	r25, 3
    16ea:	81 91       	ld	r24, Z+
    16ec:	7f 01       	movw	r14, r30
    16ee:	88 23       	and	r24, r24
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <vfprintf+0x3a>
    16f2:	ba c1       	rjmp	.+884    	; 0x1a68 <__DATA_REGION_LENGTH__+0x268>
    16f4:	85 32       	cpi	r24, 0x25	; 37
    16f6:	39 f4       	brne	.+14     	; 0x1706 <vfprintf+0x4c>
    16f8:	93 fd       	sbrc	r25, 3
    16fa:	85 91       	lpm	r24, Z+
    16fc:	93 ff       	sbrs	r25, 3
    16fe:	81 91       	ld	r24, Z+
    1700:	7f 01       	movw	r14, r30
    1702:	85 32       	cpi	r24, 0x25	; 37
    1704:	29 f4       	brne	.+10     	; 0x1710 <vfprintf+0x56>
    1706:	b6 01       	movw	r22, r12
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    170e:	e7 cf       	rjmp	.-50     	; 0x16de <vfprintf+0x24>
    1710:	91 2c       	mov	r9, r1
    1712:	21 2c       	mov	r2, r1
    1714:	31 2c       	mov	r3, r1
    1716:	ff e1       	ldi	r31, 0x1F	; 31
    1718:	f3 15       	cp	r31, r3
    171a:	d8 f0       	brcs	.+54     	; 0x1752 <vfprintf+0x98>
    171c:	8b 32       	cpi	r24, 0x2B	; 43
    171e:	79 f0       	breq	.+30     	; 0x173e <vfprintf+0x84>
    1720:	38 f4       	brcc	.+14     	; 0x1730 <vfprintf+0x76>
    1722:	80 32       	cpi	r24, 0x20	; 32
    1724:	79 f0       	breq	.+30     	; 0x1744 <vfprintf+0x8a>
    1726:	83 32       	cpi	r24, 0x23	; 35
    1728:	a1 f4       	brne	.+40     	; 0x1752 <vfprintf+0x98>
    172a:	23 2d       	mov	r18, r3
    172c:	20 61       	ori	r18, 0x10	; 16
    172e:	1d c0       	rjmp	.+58     	; 0x176a <vfprintf+0xb0>
    1730:	8d 32       	cpi	r24, 0x2D	; 45
    1732:	61 f0       	breq	.+24     	; 0x174c <vfprintf+0x92>
    1734:	80 33       	cpi	r24, 0x30	; 48
    1736:	69 f4       	brne	.+26     	; 0x1752 <vfprintf+0x98>
    1738:	23 2d       	mov	r18, r3
    173a:	21 60       	ori	r18, 0x01	; 1
    173c:	16 c0       	rjmp	.+44     	; 0x176a <vfprintf+0xb0>
    173e:	83 2d       	mov	r24, r3
    1740:	82 60       	ori	r24, 0x02	; 2
    1742:	38 2e       	mov	r3, r24
    1744:	e3 2d       	mov	r30, r3
    1746:	e4 60       	ori	r30, 0x04	; 4
    1748:	3e 2e       	mov	r3, r30
    174a:	2a c0       	rjmp	.+84     	; 0x17a0 <vfprintf+0xe6>
    174c:	f3 2d       	mov	r31, r3
    174e:	f8 60       	ori	r31, 0x08	; 8
    1750:	1d c0       	rjmp	.+58     	; 0x178c <vfprintf+0xd2>
    1752:	37 fc       	sbrc	r3, 7
    1754:	2d c0       	rjmp	.+90     	; 0x17b0 <vfprintf+0xf6>
    1756:	20 ed       	ldi	r18, 0xD0	; 208
    1758:	28 0f       	add	r18, r24
    175a:	2a 30       	cpi	r18, 0x0A	; 10
    175c:	40 f0       	brcs	.+16     	; 0x176e <vfprintf+0xb4>
    175e:	8e 32       	cpi	r24, 0x2E	; 46
    1760:	b9 f4       	brne	.+46     	; 0x1790 <vfprintf+0xd6>
    1762:	36 fc       	sbrc	r3, 6
    1764:	81 c1       	rjmp	.+770    	; 0x1a68 <__DATA_REGION_LENGTH__+0x268>
    1766:	23 2d       	mov	r18, r3
    1768:	20 64       	ori	r18, 0x40	; 64
    176a:	32 2e       	mov	r3, r18
    176c:	19 c0       	rjmp	.+50     	; 0x17a0 <vfprintf+0xe6>
    176e:	36 fe       	sbrs	r3, 6
    1770:	06 c0       	rjmp	.+12     	; 0x177e <vfprintf+0xc4>
    1772:	8a e0       	ldi	r24, 0x0A	; 10
    1774:	98 9e       	mul	r9, r24
    1776:	20 0d       	add	r18, r0
    1778:	11 24       	eor	r1, r1
    177a:	92 2e       	mov	r9, r18
    177c:	11 c0       	rjmp	.+34     	; 0x17a0 <vfprintf+0xe6>
    177e:	ea e0       	ldi	r30, 0x0A	; 10
    1780:	2e 9e       	mul	r2, r30
    1782:	20 0d       	add	r18, r0
    1784:	11 24       	eor	r1, r1
    1786:	22 2e       	mov	r2, r18
    1788:	f3 2d       	mov	r31, r3
    178a:	f0 62       	ori	r31, 0x20	; 32
    178c:	3f 2e       	mov	r3, r31
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <vfprintf+0xe6>
    1790:	8c 36       	cpi	r24, 0x6C	; 108
    1792:	21 f4       	brne	.+8      	; 0x179c <vfprintf+0xe2>
    1794:	83 2d       	mov	r24, r3
    1796:	80 68       	ori	r24, 0x80	; 128
    1798:	38 2e       	mov	r3, r24
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <vfprintf+0xe6>
    179c:	88 36       	cpi	r24, 0x68	; 104
    179e:	41 f4       	brne	.+16     	; 0x17b0 <vfprintf+0xf6>
    17a0:	f7 01       	movw	r30, r14
    17a2:	93 fd       	sbrc	r25, 3
    17a4:	85 91       	lpm	r24, Z+
    17a6:	93 ff       	sbrs	r25, 3
    17a8:	81 91       	ld	r24, Z+
    17aa:	7f 01       	movw	r14, r30
    17ac:	81 11       	cpse	r24, r1
    17ae:	b3 cf       	rjmp	.-154    	; 0x1716 <vfprintf+0x5c>
    17b0:	98 2f       	mov	r25, r24
    17b2:	9f 7d       	andi	r25, 0xDF	; 223
    17b4:	95 54       	subi	r25, 0x45	; 69
    17b6:	93 30       	cpi	r25, 0x03	; 3
    17b8:	28 f4       	brcc	.+10     	; 0x17c4 <vfprintf+0x10a>
    17ba:	0c 5f       	subi	r16, 0xFC	; 252
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	9f e3       	ldi	r25, 0x3F	; 63
    17c0:	99 83       	std	Y+1, r25	; 0x01
    17c2:	0d c0       	rjmp	.+26     	; 0x17de <vfprintf+0x124>
    17c4:	83 36       	cpi	r24, 0x63	; 99
    17c6:	31 f0       	breq	.+12     	; 0x17d4 <vfprintf+0x11a>
    17c8:	83 37       	cpi	r24, 0x73	; 115
    17ca:	71 f0       	breq	.+28     	; 0x17e8 <vfprintf+0x12e>
    17cc:	83 35       	cpi	r24, 0x53	; 83
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <vfprintf+0x118>
    17d0:	59 c0       	rjmp	.+178    	; 0x1884 <__DATA_REGION_LENGTH__+0x84>
    17d2:	21 c0       	rjmp	.+66     	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
    17d4:	f8 01       	movw	r30, r16
    17d6:	80 81       	ld	r24, Z
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	0e 5f       	subi	r16, 0xFE	; 254
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	88 24       	eor	r8, r8
    17e0:	83 94       	inc	r8
    17e2:	91 2c       	mov	r9, r1
    17e4:	53 01       	movw	r10, r6
    17e6:	13 c0       	rjmp	.+38     	; 0x180e <__DATA_REGION_LENGTH__+0xe>
    17e8:	28 01       	movw	r4, r16
    17ea:	f2 e0       	ldi	r31, 0x02	; 2
    17ec:	4f 0e       	add	r4, r31
    17ee:	51 1c       	adc	r5, r1
    17f0:	f8 01       	movw	r30, r16
    17f2:	a0 80       	ld	r10, Z
    17f4:	b1 80       	ldd	r11, Z+1	; 0x01
    17f6:	36 fe       	sbrs	r3, 6
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <__DATA_REGION_LENGTH__>
    17fa:	69 2d       	mov	r22, r9
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <__DATA_REGION_LENGTH__+0x4>
    1800:	6f ef       	ldi	r22, 0xFF	; 255
    1802:	7f ef       	ldi	r23, 0xFF	; 255
    1804:	c5 01       	movw	r24, r10
    1806:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <strnlen>
    180a:	4c 01       	movw	r8, r24
    180c:	82 01       	movw	r16, r4
    180e:	f3 2d       	mov	r31, r3
    1810:	ff 77       	andi	r31, 0x7F	; 127
    1812:	3f 2e       	mov	r3, r31
    1814:	16 c0       	rjmp	.+44     	; 0x1842 <__DATA_REGION_LENGTH__+0x42>
    1816:	28 01       	movw	r4, r16
    1818:	22 e0       	ldi	r18, 0x02	; 2
    181a:	42 0e       	add	r4, r18
    181c:	51 1c       	adc	r5, r1
    181e:	f8 01       	movw	r30, r16
    1820:	a0 80       	ld	r10, Z
    1822:	b1 80       	ldd	r11, Z+1	; 0x01
    1824:	36 fe       	sbrs	r3, 6
    1826:	03 c0       	rjmp	.+6      	; 0x182e <__DATA_REGION_LENGTH__+0x2e>
    1828:	69 2d       	mov	r22, r9
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <__DATA_REGION_LENGTH__+0x32>
    182e:	6f ef       	ldi	r22, 0xFF	; 255
    1830:	7f ef       	ldi	r23, 0xFF	; 255
    1832:	c5 01       	movw	r24, r10
    1834:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <strnlen_P>
    1838:	4c 01       	movw	r8, r24
    183a:	f3 2d       	mov	r31, r3
    183c:	f0 68       	ori	r31, 0x80	; 128
    183e:	3f 2e       	mov	r3, r31
    1840:	82 01       	movw	r16, r4
    1842:	33 fc       	sbrc	r3, 3
    1844:	1b c0       	rjmp	.+54     	; 0x187c <__DATA_REGION_LENGTH__+0x7c>
    1846:	82 2d       	mov	r24, r2
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	88 16       	cp	r8, r24
    184c:	99 06       	cpc	r9, r25
    184e:	b0 f4       	brcc	.+44     	; 0x187c <__DATA_REGION_LENGTH__+0x7c>
    1850:	b6 01       	movw	r22, r12
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    185a:	2a 94       	dec	r2
    185c:	f4 cf       	rjmp	.-24     	; 0x1846 <__DATA_REGION_LENGTH__+0x46>
    185e:	f5 01       	movw	r30, r10
    1860:	37 fc       	sbrc	r3, 7
    1862:	85 91       	lpm	r24, Z+
    1864:	37 fe       	sbrs	r3, 7
    1866:	81 91       	ld	r24, Z+
    1868:	5f 01       	movw	r10, r30
    186a:	b6 01       	movw	r22, r12
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1872:	21 10       	cpse	r2, r1
    1874:	2a 94       	dec	r2
    1876:	21 e0       	ldi	r18, 0x01	; 1
    1878:	82 1a       	sub	r8, r18
    187a:	91 08       	sbc	r9, r1
    187c:	81 14       	cp	r8, r1
    187e:	91 04       	cpc	r9, r1
    1880:	71 f7       	brne	.-36     	; 0x185e <__DATA_REGION_LENGTH__+0x5e>
    1882:	e8 c0       	rjmp	.+464    	; 0x1a54 <__DATA_REGION_LENGTH__+0x254>
    1884:	84 36       	cpi	r24, 0x64	; 100
    1886:	11 f0       	breq	.+4      	; 0x188c <__DATA_REGION_LENGTH__+0x8c>
    1888:	89 36       	cpi	r24, 0x69	; 105
    188a:	41 f5       	brne	.+80     	; 0x18dc <__DATA_REGION_LENGTH__+0xdc>
    188c:	f8 01       	movw	r30, r16
    188e:	37 fe       	sbrs	r3, 7
    1890:	07 c0       	rjmp	.+14     	; 0x18a0 <__DATA_REGION_LENGTH__+0xa0>
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	0c 5f       	subi	r16, 0xFC	; 252
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <__DATA_REGION_LENGTH__+0xb0>
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	07 2e       	mov	r0, r23
    18a6:	00 0c       	add	r0, r0
    18a8:	88 0b       	sbc	r24, r24
    18aa:	99 0b       	sbc	r25, r25
    18ac:	0e 5f       	subi	r16, 0xFE	; 254
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	f3 2d       	mov	r31, r3
    18b2:	ff 76       	andi	r31, 0x6F	; 111
    18b4:	3f 2e       	mov	r3, r31
    18b6:	97 ff       	sbrs	r25, 7
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <__DATA_REGION_LENGTH__+0xcc>
    18ba:	90 95       	com	r25
    18bc:	80 95       	com	r24
    18be:	70 95       	com	r23
    18c0:	61 95       	neg	r22
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	8f 4f       	sbci	r24, 0xFF	; 255
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	f0 68       	ori	r31, 0x80	; 128
    18ca:	3f 2e       	mov	r3, r31
    18cc:	2a e0       	ldi	r18, 0x0A	; 10
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	a3 01       	movw	r20, r6
    18d2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__ultoa_invert>
    18d6:	88 2e       	mov	r8, r24
    18d8:	86 18       	sub	r8, r6
    18da:	45 c0       	rjmp	.+138    	; 0x1966 <__DATA_REGION_LENGTH__+0x166>
    18dc:	85 37       	cpi	r24, 0x75	; 117
    18de:	31 f4       	brne	.+12     	; 0x18ec <__DATA_REGION_LENGTH__+0xec>
    18e0:	23 2d       	mov	r18, r3
    18e2:	2f 7e       	andi	r18, 0xEF	; 239
    18e4:	b2 2e       	mov	r11, r18
    18e6:	2a e0       	ldi	r18, 0x0A	; 10
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	25 c0       	rjmp	.+74     	; 0x1936 <__DATA_REGION_LENGTH__+0x136>
    18ec:	93 2d       	mov	r25, r3
    18ee:	99 7f       	andi	r25, 0xF9	; 249
    18f0:	b9 2e       	mov	r11, r25
    18f2:	8f 36       	cpi	r24, 0x6F	; 111
    18f4:	c1 f0       	breq	.+48     	; 0x1926 <__DATA_REGION_LENGTH__+0x126>
    18f6:	18 f4       	brcc	.+6      	; 0x18fe <__DATA_REGION_LENGTH__+0xfe>
    18f8:	88 35       	cpi	r24, 0x58	; 88
    18fa:	79 f0       	breq	.+30     	; 0x191a <__DATA_REGION_LENGTH__+0x11a>
    18fc:	b5 c0       	rjmp	.+362    	; 0x1a68 <__DATA_REGION_LENGTH__+0x268>
    18fe:	80 37       	cpi	r24, 0x70	; 112
    1900:	19 f0       	breq	.+6      	; 0x1908 <__DATA_REGION_LENGTH__+0x108>
    1902:	88 37       	cpi	r24, 0x78	; 120
    1904:	21 f0       	breq	.+8      	; 0x190e <__DATA_REGION_LENGTH__+0x10e>
    1906:	b0 c0       	rjmp	.+352    	; 0x1a68 <__DATA_REGION_LENGTH__+0x268>
    1908:	e9 2f       	mov	r30, r25
    190a:	e0 61       	ori	r30, 0x10	; 16
    190c:	be 2e       	mov	r11, r30
    190e:	b4 fe       	sbrs	r11, 4
    1910:	0d c0       	rjmp	.+26     	; 0x192c <__DATA_REGION_LENGTH__+0x12c>
    1912:	fb 2d       	mov	r31, r11
    1914:	f4 60       	ori	r31, 0x04	; 4
    1916:	bf 2e       	mov	r11, r31
    1918:	09 c0       	rjmp	.+18     	; 0x192c <__DATA_REGION_LENGTH__+0x12c>
    191a:	34 fe       	sbrs	r3, 4
    191c:	0a c0       	rjmp	.+20     	; 0x1932 <__DATA_REGION_LENGTH__+0x132>
    191e:	29 2f       	mov	r18, r25
    1920:	26 60       	ori	r18, 0x06	; 6
    1922:	b2 2e       	mov	r11, r18
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <__DATA_REGION_LENGTH__+0x132>
    1926:	28 e0       	ldi	r18, 0x08	; 8
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <__DATA_REGION_LENGTH__+0x136>
    192c:	20 e1       	ldi	r18, 0x10	; 16
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <__DATA_REGION_LENGTH__+0x136>
    1932:	20 e1       	ldi	r18, 0x10	; 16
    1934:	32 e0       	ldi	r19, 0x02	; 2
    1936:	f8 01       	movw	r30, r16
    1938:	b7 fe       	sbrs	r11, 7
    193a:	07 c0       	rjmp	.+14     	; 0x194a <__DATA_REGION_LENGTH__+0x14a>
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	0c 5f       	subi	r16, 0xFC	; 252
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <__DATA_REGION_LENGTH__+0x156>
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 5f       	subi	r16, 0xFE	; 254
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
    1956:	a3 01       	movw	r20, r6
    1958:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__ultoa_invert>
    195c:	88 2e       	mov	r8, r24
    195e:	86 18       	sub	r8, r6
    1960:	fb 2d       	mov	r31, r11
    1962:	ff 77       	andi	r31, 0x7F	; 127
    1964:	3f 2e       	mov	r3, r31
    1966:	36 fe       	sbrs	r3, 6
    1968:	0d c0       	rjmp	.+26     	; 0x1984 <__DATA_REGION_LENGTH__+0x184>
    196a:	23 2d       	mov	r18, r3
    196c:	2e 7f       	andi	r18, 0xFE	; 254
    196e:	a2 2e       	mov	r10, r18
    1970:	89 14       	cp	r8, r9
    1972:	58 f4       	brcc	.+22     	; 0x198a <__DATA_REGION_LENGTH__+0x18a>
    1974:	34 fe       	sbrs	r3, 4
    1976:	0b c0       	rjmp	.+22     	; 0x198e <__DATA_REGION_LENGTH__+0x18e>
    1978:	32 fc       	sbrc	r3, 2
    197a:	09 c0       	rjmp	.+18     	; 0x198e <__DATA_REGION_LENGTH__+0x18e>
    197c:	83 2d       	mov	r24, r3
    197e:	8e 7e       	andi	r24, 0xEE	; 238
    1980:	a8 2e       	mov	r10, r24
    1982:	05 c0       	rjmp	.+10     	; 0x198e <__DATA_REGION_LENGTH__+0x18e>
    1984:	b8 2c       	mov	r11, r8
    1986:	a3 2c       	mov	r10, r3
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <__DATA_REGION_LENGTH__+0x190>
    198a:	b8 2c       	mov	r11, r8
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <__DATA_REGION_LENGTH__+0x190>
    198e:	b9 2c       	mov	r11, r9
    1990:	a4 fe       	sbrs	r10, 4
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <__DATA_REGION_LENGTH__+0x1b2>
    1994:	fe 01       	movw	r30, r28
    1996:	e8 0d       	add	r30, r8
    1998:	f1 1d       	adc	r31, r1
    199a:	80 81       	ld	r24, Z
    199c:	80 33       	cpi	r24, 0x30	; 48
    199e:	21 f4       	brne	.+8      	; 0x19a8 <__DATA_REGION_LENGTH__+0x1a8>
    19a0:	9a 2d       	mov	r25, r10
    19a2:	99 7e       	andi	r25, 0xE9	; 233
    19a4:	a9 2e       	mov	r10, r25
    19a6:	09 c0       	rjmp	.+18     	; 0x19ba <__DATA_REGION_LENGTH__+0x1ba>
    19a8:	a2 fe       	sbrs	r10, 2
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <__DATA_REGION_LENGTH__+0x1b8>
    19ac:	b3 94       	inc	r11
    19ae:	b3 94       	inc	r11
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <__DATA_REGION_LENGTH__+0x1ba>
    19b2:	8a 2d       	mov	r24, r10
    19b4:	86 78       	andi	r24, 0x86	; 134
    19b6:	09 f0       	breq	.+2      	; 0x19ba <__DATA_REGION_LENGTH__+0x1ba>
    19b8:	b3 94       	inc	r11
    19ba:	a3 fc       	sbrc	r10, 3
    19bc:	11 c0       	rjmp	.+34     	; 0x19e0 <__DATA_REGION_LENGTH__+0x1e0>
    19be:	a0 fe       	sbrs	r10, 0
    19c0:	06 c0       	rjmp	.+12     	; 0x19ce <__DATA_REGION_LENGTH__+0x1ce>
    19c2:	b2 14       	cp	r11, r2
    19c4:	88 f4       	brcc	.+34     	; 0x19e8 <__DATA_REGION_LENGTH__+0x1e8>
    19c6:	28 0c       	add	r2, r8
    19c8:	92 2c       	mov	r9, r2
    19ca:	9b 18       	sub	r9, r11
    19cc:	0e c0       	rjmp	.+28     	; 0x19ea <__DATA_REGION_LENGTH__+0x1ea>
    19ce:	b2 14       	cp	r11, r2
    19d0:	60 f4       	brcc	.+24     	; 0x19ea <__DATA_REGION_LENGTH__+0x1ea>
    19d2:	b6 01       	movw	r22, r12
    19d4:	80 e2       	ldi	r24, 0x20	; 32
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    19dc:	b3 94       	inc	r11
    19de:	f7 cf       	rjmp	.-18     	; 0x19ce <__DATA_REGION_LENGTH__+0x1ce>
    19e0:	b2 14       	cp	r11, r2
    19e2:	18 f4       	brcc	.+6      	; 0x19ea <__DATA_REGION_LENGTH__+0x1ea>
    19e4:	2b 18       	sub	r2, r11
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <__DATA_REGION_LENGTH__+0x1ec>
    19e8:	98 2c       	mov	r9, r8
    19ea:	21 2c       	mov	r2, r1
    19ec:	a4 fe       	sbrs	r10, 4
    19ee:	10 c0       	rjmp	.+32     	; 0x1a10 <__DATA_REGION_LENGTH__+0x210>
    19f0:	b6 01       	movw	r22, r12
    19f2:	80 e3       	ldi	r24, 0x30	; 48
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    19fa:	a2 fe       	sbrs	r10, 2
    19fc:	17 c0       	rjmp	.+46     	; 0x1a2c <__DATA_REGION_LENGTH__+0x22c>
    19fe:	a1 fc       	sbrc	r10, 1
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <__DATA_REGION_LENGTH__+0x208>
    1a02:	88 e7       	ldi	r24, 0x78	; 120
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <__DATA_REGION_LENGTH__+0x20c>
    1a08:	88 e5       	ldi	r24, 0x58	; 88
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	0c c0       	rjmp	.+24     	; 0x1a28 <__DATA_REGION_LENGTH__+0x228>
    1a10:	8a 2d       	mov	r24, r10
    1a12:	86 78       	andi	r24, 0x86	; 134
    1a14:	59 f0       	breq	.+22     	; 0x1a2c <__DATA_REGION_LENGTH__+0x22c>
    1a16:	a1 fe       	sbrs	r10, 1
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <__DATA_REGION_LENGTH__+0x21e>
    1a1a:	8b e2       	ldi	r24, 0x2B	; 43
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <__DATA_REGION_LENGTH__+0x220>
    1a1e:	80 e2       	ldi	r24, 0x20	; 32
    1a20:	a7 fc       	sbrc	r10, 7
    1a22:	8d e2       	ldi	r24, 0x2D	; 45
    1a24:	b6 01       	movw	r22, r12
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a2c:	89 14       	cp	r8, r9
    1a2e:	38 f4       	brcc	.+14     	; 0x1a3e <__DATA_REGION_LENGTH__+0x23e>
    1a30:	b6 01       	movw	r22, r12
    1a32:	80 e3       	ldi	r24, 0x30	; 48
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a3a:	9a 94       	dec	r9
    1a3c:	f7 cf       	rjmp	.-18     	; 0x1a2c <__DATA_REGION_LENGTH__+0x22c>
    1a3e:	8a 94       	dec	r8
    1a40:	f3 01       	movw	r30, r6
    1a42:	e8 0d       	add	r30, r8
    1a44:	f1 1d       	adc	r31, r1
    1a46:	80 81       	ld	r24, Z
    1a48:	b6 01       	movw	r22, r12
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a50:	81 10       	cpse	r8, r1
    1a52:	f5 cf       	rjmp	.-22     	; 0x1a3e <__DATA_REGION_LENGTH__+0x23e>
    1a54:	22 20       	and	r2, r2
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <__DATA_REGION_LENGTH__+0x25a>
    1a58:	42 ce       	rjmp	.-892    	; 0x16de <vfprintf+0x24>
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	80 e2       	ldi	r24, 0x20	; 32
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 57 0d 	call	0x1aae	; 0x1aae <fputc>
    1a64:	2a 94       	dec	r2
    1a66:	f6 cf       	rjmp	.-20     	; 0x1a54 <__DATA_REGION_LENGTH__+0x254>
    1a68:	f6 01       	movw	r30, r12
    1a6a:	86 81       	ldd	r24, Z+6	; 0x06
    1a6c:	97 81       	ldd	r25, Z+7	; 0x07
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <__DATA_REGION_LENGTH__+0x274>
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	9f ef       	ldi	r25, 0xFF	; 255
    1a74:	2b 96       	adiw	r28, 0x0b	; 11
    1a76:	e2 e1       	ldi	r30, 0x12	; 18
    1a78:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__epilogue_restores__>

00001a7c <__ctype_isfalse>:
    1a7c:	99 27       	eor	r25, r25
    1a7e:	88 27       	eor	r24, r24

00001a80 <__ctype_istrue>:
    1a80:	08 95       	ret

00001a82 <strnlen_P>:
    1a82:	fc 01       	movw	r30, r24
    1a84:	05 90       	lpm	r0, Z+
    1a86:	61 50       	subi	r22, 0x01	; 1
    1a88:	70 40       	sbci	r23, 0x00	; 0
    1a8a:	01 10       	cpse	r0, r1
    1a8c:	d8 f7       	brcc	.-10     	; 0x1a84 <strnlen_P+0x2>
    1a8e:	80 95       	com	r24
    1a90:	90 95       	com	r25
    1a92:	8e 0f       	add	r24, r30
    1a94:	9f 1f       	adc	r25, r31
    1a96:	08 95       	ret

00001a98 <strnlen>:
    1a98:	fc 01       	movw	r30, r24
    1a9a:	61 50       	subi	r22, 0x01	; 1
    1a9c:	70 40       	sbci	r23, 0x00	; 0
    1a9e:	01 90       	ld	r0, Z+
    1aa0:	01 10       	cpse	r0, r1
    1aa2:	d8 f7       	brcc	.-10     	; 0x1a9a <strnlen+0x2>
    1aa4:	80 95       	com	r24
    1aa6:	90 95       	com	r25
    1aa8:	8e 0f       	add	r24, r30
    1aaa:	9f 1f       	adc	r25, r31
    1aac:	08 95       	ret

00001aae <fputc>:
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	fb 01       	movw	r30, r22
    1ab8:	23 81       	ldd	r18, Z+3	; 0x03
    1aba:	21 fd       	sbrc	r18, 1
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <fputc+0x16>
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	9f ef       	ldi	r25, 0xFF	; 255
    1ac2:	2c c0       	rjmp	.+88     	; 0x1b1c <fputc+0x6e>
    1ac4:	22 ff       	sbrs	r18, 2
    1ac6:	16 c0       	rjmp	.+44     	; 0x1af4 <fputc+0x46>
    1ac8:	46 81       	ldd	r20, Z+6	; 0x06
    1aca:	57 81       	ldd	r21, Z+7	; 0x07
    1acc:	24 81       	ldd	r18, Z+4	; 0x04
    1ace:	35 81       	ldd	r19, Z+5	; 0x05
    1ad0:	42 17       	cp	r20, r18
    1ad2:	53 07       	cpc	r21, r19
    1ad4:	44 f4       	brge	.+16     	; 0x1ae6 <fputc+0x38>
    1ad6:	a0 81       	ld	r26, Z
    1ad8:	b1 81       	ldd	r27, Z+1	; 0x01
    1ada:	9d 01       	movw	r18, r26
    1adc:	2f 5f       	subi	r18, 0xFF	; 255
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	20 83       	st	Z, r18
    1ae2:	31 83       	std	Z+1, r19	; 0x01
    1ae4:	8c 93       	st	X, r24
    1ae6:	26 81       	ldd	r18, Z+6	; 0x06
    1ae8:	37 81       	ldd	r19, Z+7	; 0x07
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
    1aee:	26 83       	std	Z+6, r18	; 0x06
    1af0:	37 83       	std	Z+7, r19	; 0x07
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <fputc+0x6e>
    1af4:	8b 01       	movw	r16, r22
    1af6:	ec 01       	movw	r28, r24
    1af8:	fb 01       	movw	r30, r22
    1afa:	00 84       	ldd	r0, Z+8	; 0x08
    1afc:	f1 85       	ldd	r31, Z+9	; 0x09
    1afe:	e0 2d       	mov	r30, r0
    1b00:	09 95       	icall
    1b02:	89 2b       	or	r24, r25
    1b04:	e1 f6       	brne	.-72     	; 0x1abe <fputc+0x10>
    1b06:	d8 01       	movw	r26, r16
    1b08:	16 96       	adiw	r26, 0x06	; 6
    1b0a:	8d 91       	ld	r24, X+
    1b0c:	9c 91       	ld	r25, X
    1b0e:	17 97       	sbiw	r26, 0x07	; 7
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	16 96       	adiw	r26, 0x06	; 6
    1b14:	8d 93       	st	X+, r24
    1b16:	9c 93       	st	X, r25
    1b18:	17 97       	sbiw	r26, 0x07	; 7
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <__ultoa_invert>:
    1b26:	fa 01       	movw	r30, r20
    1b28:	aa 27       	eor	r26, r26
    1b2a:	28 30       	cpi	r18, 0x08	; 8
    1b2c:	51 f1       	breq	.+84     	; 0x1b82 <__ultoa_invert+0x5c>
    1b2e:	20 31       	cpi	r18, 0x10	; 16
    1b30:	81 f1       	breq	.+96     	; 0x1b92 <__ultoa_invert+0x6c>
    1b32:	e8 94       	clt
    1b34:	6f 93       	push	r22
    1b36:	6e 7f       	andi	r22, 0xFE	; 254
    1b38:	6e 5f       	subi	r22, 0xFE	; 254
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	af 4f       	sbci	r26, 0xFF	; 255
    1b42:	b1 e0       	ldi	r27, 0x01	; 1
    1b44:	3e d0       	rcall	.+124    	; 0x1bc2 <__ultoa_invert+0x9c>
    1b46:	b4 e0       	ldi	r27, 0x04	; 4
    1b48:	3c d0       	rcall	.+120    	; 0x1bc2 <__ultoa_invert+0x9c>
    1b4a:	67 0f       	add	r22, r23
    1b4c:	78 1f       	adc	r23, r24
    1b4e:	89 1f       	adc	r24, r25
    1b50:	9a 1f       	adc	r25, r26
    1b52:	a1 1d       	adc	r26, r1
    1b54:	68 0f       	add	r22, r24
    1b56:	79 1f       	adc	r23, r25
    1b58:	8a 1f       	adc	r24, r26
    1b5a:	91 1d       	adc	r25, r1
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	6a 0f       	add	r22, r26
    1b60:	71 1d       	adc	r23, r1
    1b62:	81 1d       	adc	r24, r1
    1b64:	91 1d       	adc	r25, r1
    1b66:	a1 1d       	adc	r26, r1
    1b68:	20 d0       	rcall	.+64     	; 0x1baa <__ultoa_invert+0x84>
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <__ultoa_invert+0x48>
    1b6c:	68 94       	set
    1b6e:	3f 91       	pop	r19
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	26 9f       	mul	r18, r22
    1b74:	11 24       	eor	r1, r1
    1b76:	30 19       	sub	r19, r0
    1b78:	30 5d       	subi	r19, 0xD0	; 208
    1b7a:	31 93       	st	Z+, r19
    1b7c:	de f6       	brtc	.-74     	; 0x1b34 <__ultoa_invert+0xe>
    1b7e:	cf 01       	movw	r24, r30
    1b80:	08 95       	ret
    1b82:	46 2f       	mov	r20, r22
    1b84:	47 70       	andi	r20, 0x07	; 7
    1b86:	40 5d       	subi	r20, 0xD0	; 208
    1b88:	41 93       	st	Z+, r20
    1b8a:	b3 e0       	ldi	r27, 0x03	; 3
    1b8c:	0f d0       	rcall	.+30     	; 0x1bac <__ultoa_invert+0x86>
    1b8e:	c9 f7       	brne	.-14     	; 0x1b82 <__ultoa_invert+0x5c>
    1b90:	f6 cf       	rjmp	.-20     	; 0x1b7e <__ultoa_invert+0x58>
    1b92:	46 2f       	mov	r20, r22
    1b94:	4f 70       	andi	r20, 0x0F	; 15
    1b96:	40 5d       	subi	r20, 0xD0	; 208
    1b98:	4a 33       	cpi	r20, 0x3A	; 58
    1b9a:	18 f0       	brcs	.+6      	; 0x1ba2 <__ultoa_invert+0x7c>
    1b9c:	49 5d       	subi	r20, 0xD9	; 217
    1b9e:	31 fd       	sbrc	r19, 1
    1ba0:	40 52       	subi	r20, 0x20	; 32
    1ba2:	41 93       	st	Z+, r20
    1ba4:	02 d0       	rcall	.+4      	; 0x1baa <__ultoa_invert+0x84>
    1ba6:	a9 f7       	brne	.-22     	; 0x1b92 <__ultoa_invert+0x6c>
    1ba8:	ea cf       	rjmp	.-44     	; 0x1b7e <__ultoa_invert+0x58>
    1baa:	b4 e0       	ldi	r27, 0x04	; 4
    1bac:	a6 95       	lsr	r26
    1bae:	97 95       	ror	r25
    1bb0:	87 95       	ror	r24
    1bb2:	77 95       	ror	r23
    1bb4:	67 95       	ror	r22
    1bb6:	ba 95       	dec	r27
    1bb8:	c9 f7       	brne	.-14     	; 0x1bac <__ultoa_invert+0x86>
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	61 05       	cpc	r22, r1
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	08 95       	ret
    1bc2:	9b 01       	movw	r18, r22
    1bc4:	ac 01       	movw	r20, r24
    1bc6:	0a 2e       	mov	r0, r26
    1bc8:	06 94       	lsr	r0
    1bca:	57 95       	ror	r21
    1bcc:	47 95       	ror	r20
    1bce:	37 95       	ror	r19
    1bd0:	27 95       	ror	r18
    1bd2:	ba 95       	dec	r27
    1bd4:	c9 f7       	brne	.-14     	; 0x1bc8 <__ultoa_invert+0xa2>
    1bd6:	62 0f       	add	r22, r18
    1bd8:	73 1f       	adc	r23, r19
    1bda:	84 1f       	adc	r24, r20
    1bdc:	95 1f       	adc	r25, r21
    1bde:	a0 1d       	adc	r26, r0
    1be0:	08 95       	ret

00001be2 <__mulsi3>:
    1be2:	db 01       	movw	r26, r22
    1be4:	8f 93       	push	r24
    1be6:	9f 93       	push	r25
    1be8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__muluhisi3>
    1bec:	bf 91       	pop	r27
    1bee:	af 91       	pop	r26
    1bf0:	a2 9f       	mul	r26, r18
    1bf2:	80 0d       	add	r24, r0
    1bf4:	91 1d       	adc	r25, r1
    1bf6:	a3 9f       	mul	r26, r19
    1bf8:	90 0d       	add	r25, r0
    1bfa:	b2 9f       	mul	r27, r18
    1bfc:	90 0d       	add	r25, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	08 95       	ret

00001c02 <__udivmodsi4>:
    1c02:	a1 e2       	ldi	r26, 0x21	; 33
    1c04:	1a 2e       	mov	r1, r26
    1c06:	aa 1b       	sub	r26, r26
    1c08:	bb 1b       	sub	r27, r27
    1c0a:	fd 01       	movw	r30, r26
    1c0c:	0d c0       	rjmp	.+26     	; 0x1c28 <__udivmodsi4_ep>

00001c0e <__udivmodsi4_loop>:
    1c0e:	aa 1f       	adc	r26, r26
    1c10:	bb 1f       	adc	r27, r27
    1c12:	ee 1f       	adc	r30, r30
    1c14:	ff 1f       	adc	r31, r31
    1c16:	a2 17       	cp	r26, r18
    1c18:	b3 07       	cpc	r27, r19
    1c1a:	e4 07       	cpc	r30, r20
    1c1c:	f5 07       	cpc	r31, r21
    1c1e:	20 f0       	brcs	.+8      	; 0x1c28 <__udivmodsi4_ep>
    1c20:	a2 1b       	sub	r26, r18
    1c22:	b3 0b       	sbc	r27, r19
    1c24:	e4 0b       	sbc	r30, r20
    1c26:	f5 0b       	sbc	r31, r21

00001c28 <__udivmodsi4_ep>:
    1c28:	66 1f       	adc	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	88 1f       	adc	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	1a 94       	dec	r1
    1c32:	69 f7       	brne	.-38     	; 0x1c0e <__udivmodsi4_loop>
    1c34:	60 95       	com	r22
    1c36:	70 95       	com	r23
    1c38:	80 95       	com	r24
    1c3a:	90 95       	com	r25
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	ac 01       	movw	r20, r24
    1c40:	bd 01       	movw	r22, r26
    1c42:	cf 01       	movw	r24, r30
    1c44:	08 95       	ret

00001c46 <__muluhisi3>:
    1c46:	0e 94 ca 09 	call	0x1394	; 0x1394 <__umulhisi3>
    1c4a:	a5 9f       	mul	r26, r21
    1c4c:	90 0d       	add	r25, r0
    1c4e:	b4 9f       	mul	r27, r20
    1c50:	90 0d       	add	r25, r0
    1c52:	a4 9f       	mul	r26, r20
    1c54:	80 0d       	add	r24, r0
    1c56:	91 1d       	adc	r25, r1
    1c58:	11 24       	eor	r1, r1
    1c5a:	08 95       	ret

00001c5c <__prologue_saves__>:
    1c5c:	2f 92       	push	r2
    1c5e:	3f 92       	push	r3
    1c60:	4f 92       	push	r4
    1c62:	5f 92       	push	r5
    1c64:	6f 92       	push	r6
    1c66:	7f 92       	push	r7
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	ca 1b       	sub	r28, r26
    1c86:	db 0b       	sbc	r29, r27
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	09 94       	ijmp

00001c8e <__epilogue_restores__>:
    1c8e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c90:	39 88       	ldd	r3, Y+17	; 0x11
    1c92:	48 88       	ldd	r4, Y+16	; 0x10
    1c94:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c96:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c98:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ca0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ca2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ca4:	df 80       	ldd	r13, Y+7	; 0x07
    1ca6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca8:	fd 80       	ldd	r15, Y+5	; 0x05
    1caa:	0c 81       	ldd	r16, Y+4	; 0x04
    1cac:	1b 81       	ldd	r17, Y+3	; 0x03
    1cae:	aa 81       	ldd	r26, Y+2	; 0x02
    1cb0:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb2:	ce 0f       	add	r28, r30
    1cb4:	d1 1d       	adc	r29, r1
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	ed 01       	movw	r28, r26
    1cbc:	08 95       	ret

00001cbe <_exit>:
    1cbe:	f8 94       	cli

00001cc0 <__stop_program>:
    1cc0:	ff cf       	rjmp	.-2      	; 0x1cc0 <__stop_program>
