
atmevse_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00802800  000014be  00001572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001300  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001be  00005300  00001300  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000ff  00802810  00802810  00001582  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000036e8  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026af  00000000  00000000  00004de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ab8  00000000  00000000  0000748f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c4  00000000  00000000  00007f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000014a8  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d74  00000000  00000000  000096b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000128  00000000  00000000  0000a428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_17>
      48:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_18>
      4c:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_19>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	18 e2       	ldi	r17, 0x28	; 40
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b8 e2       	ldi	r27, 0x28	; 40
      a2:	ee eb       	ldi	r30, 0xBE	; 190
      a4:	f4 e1       	ldi	r31, 0x14	; 20
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 31       	cpi	r26, 0x10	; 16
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	29 e2       	ldi	r18, 0x29	; 41
      b4:	a0 e1       	ldi	r26, 0x10	; 16
      b6:	b8 e2       	ldi	r27, 0x28	; 40
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 30       	cpi	r26, 0x0F	; 15
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
      c6:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <led_toggle>:
        cmd_init();     
    #endif
}

int8_t led_toggle() {
    PORTA.OUTTGL |= PIN6_bm;
      ce:	e0 e0       	ldi	r30, 0x00	; 0
      d0:	f4 e0       	ldi	r31, 0x04	; 4
      d2:	87 81       	ldd	r24, Z+7	; 0x07
      d4:	80 64       	ori	r24, 0x40	; 64
      d6:	87 83       	std	Z+7, r24	; 0x07
    return 0;
}
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	08 95       	ret

000000dc <led_on>:

int8_t led_on() {
    PORTA.OUT &= ~PIN6_bm;
      dc:	e0 e0       	ldi	r30, 0x00	; 0
      de:	f4 e0       	ldi	r31, 0x04	; 4
      e0:	84 81       	ldd	r24, Z+4	; 0x04
      e2:	8f 7b       	andi	r24, 0xBF	; 191
      e4:	84 83       	std	Z+4, r24	; 0x04
    return 0;
}
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	08 95       	ret

000000ea <led_off>:

int8_t led_off() {
    PORTA.OUT |= PIN6_bm;
      ea:	e0 e0       	ldi	r30, 0x00	; 0
      ec:	f4 e0       	ldi	r31, 0x04	; 4
      ee:	84 81       	ldd	r24, Z+4	; 0x04
      f0:	80 64       	ori	r24, 0x40	; 64
      f2:	84 83       	std	Z+4, r24	; 0x04
    return 0;
}
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	08 95       	ret

000000f8 <main>:

/*
    Application
    *************************************************/
int main(void) {
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	27 97       	sbiw	r28, 0x07	; 7
     102:	cd bf       	out	0x3d, r28	; 61
     104:	de bf       	out	0x3e, r29	; 62
static void init() {
    /* System init */
    
    
    /* control LED init */
    PORTA.DIRSET |= PIN6_bm;
     106:	e0 e0       	ldi	r30, 0x00	; 0
     108:	f4 e0       	ldi	r31, 0x04	; 4
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	80 64       	ori	r24, 0x40	; 64
     10e:	81 83       	std	Z+1, r24	; 0x01
    
    /* uart init */
    #ifdef ATMEVSE_UART
        uart_init();
     110:	0e 94 6d 04 	call	0x8da	; 0x8da <uart_init>
    #endif
    
    /* cmd init */
    #ifdef ATMEVSE_CMD
        cmd_init();     
     114:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cmd_init>
/*
    Application
    *************************************************/
int main(void) {
    init();
    uint8_t test8 = 16;
     118:	80 e1       	ldi	r24, 0x10	; 16
     11a:	89 83       	std	Y+1, r24	; 0x01
    uint16_t test16 = 4096;
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e1       	ldi	r25, 0x10	; 16
     120:	8a 83       	std	Y+2, r24	; 0x02
     122:	9b 83       	std	Y+3, r25	; 0x03
    uint32_t test32 = 100512;
     124:	80 ea       	ldi	r24, 0xA0	; 160
     126:	98 e8       	ldi	r25, 0x88	; 136
     128:	a1 e0       	ldi	r26, 0x01	; 1
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	8c 83       	std	Y+4, r24	; 0x04
     12e:	9d 83       	std	Y+5, r25	; 0x05
     130:	ae 83       	std	Y+6, r26	; 0x06
     132:	bf 83       	std	Y+7, r27	; 0x07
    cmd_add("led_on", *led_on);
     134:	6e e6       	ldi	r22, 0x6E	; 110
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	93 e5       	ldi	r25, 0x53	; 83
     13c:	0e 94 a6 02 	call	0x54c	; 0x54c <cmd_add>
    cmd_add("led_off", *led_off);
     140:	65 e7       	ldi	r22, 0x75	; 117
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	89 e0       	ldi	r24, 0x09	; 9
     146:	93 e5       	ldi	r25, 0x53	; 83
     148:	0e 94 a6 02 	call	0x54c	; 0x54c <cmd_add>
    cmd_add("led_toggle", *led_toggle);
     14c:	67 e6       	ldi	r22, 0x67	; 103
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	81 e1       	ldi	r24, 0x11	; 17
     152:	93 e5       	ldi	r25, 0x53	; 83
     154:	0e 94 a6 02 	call	0x54c	; 0x54c <cmd_add>
    param_add("test8", &test8, 8);
     158:	48 e0       	ldi	r20, 0x08	; 8
     15a:	be 01       	movw	r22, r28
     15c:	6f 5f       	subi	r22, 0xFF	; 255
     15e:	7f 4f       	sbci	r23, 0xFF	; 255
     160:	8c e1       	ldi	r24, 0x1C	; 28
     162:	93 e5       	ldi	r25, 0x53	; 83
     164:	0e 94 29 04 	call	0x852	; 0x852 <param_add>
    param_add("test16", &test16, 16);
     168:	40 e1       	ldi	r20, 0x10	; 16
     16a:	be 01       	movw	r22, r28
     16c:	6e 5f       	subi	r22, 0xFE	; 254
     16e:	7f 4f       	sbci	r23, 0xFF	; 255
     170:	82 e2       	ldi	r24, 0x22	; 34
     172:	93 e5       	ldi	r25, 0x53	; 83
     174:	0e 94 29 04 	call	0x852	; 0x852 <param_add>
    param_add("test32", &test32, 32);
     178:	40 e2       	ldi	r20, 0x20	; 32
     17a:	be 01       	movw	r22, r28
     17c:	6c 5f       	subi	r22, 0xFC	; 252
     17e:	7f 4f       	sbci	r23, 0xFF	; 255
     180:	89 e2       	ldi	r24, 0x29	; 41
     182:	93 e5       	ldi	r25, 0x53	; 83
     184:	0e 94 29 04 	call	0x852	; 0x852 <param_add>
    sys_status();
     188:	0e 94 ca 01 	call	0x394	; 0x394 <sys_status>
    led_off();
     18c:	0e 94 75 00 	call	0xea	; 0xea <led_off>
    while (1) {
        char* input = uart0_readLine();
     190:	0e 94 88 04 	call	0x910	; 0x910 <uart0_readLine>
        cmd_parse(input);
     194:	0e 94 be 02 	call	0x57c	; 0x57c <cmd_parse>
     198:	fb cf       	rjmp	.-10     	; 0x190 <main+0x98>

0000019a <param_set>:
        }
    }
    return retval;
}

static int8_t param_set(char *param_string, void *param_new_val_ptr, uint8_t param_size) {
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	5c 01       	movw	r10, r24
     1ae:	7b 01       	movw	r14, r22
     1b0:	14 2f       	mov	r17, r20
     1b2:	c1 2c       	mov	r12, r1
     1b4:	d1 2c       	mov	r13, r1
    int8_t retval = -2;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        if (strcmp(param_string, param_table[i].param) == 0) {
     1b6:	e6 01       	movw	r28, r12
     1b8:	f6 01       	movw	r30, r12
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	ec 0d       	add	r30, r12
     1c4:	fd 1d       	adc	r31, r13
     1c6:	e9 5e       	subi	r30, 0xE9	; 233
     1c8:	f7 4d       	sbci	r31, 0xD7	; 215
     1ca:	60 81       	ld	r22, Z
     1cc:	71 81       	ldd	r23, Z+1	; 0x01
     1ce:	c5 01       	movw	r24, r10
     1d0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strcmp>
     1d4:	89 2b       	or	r24, r25
     1d6:	09 f0       	breq	.+2      	; 0x1da <param_set+0x40>
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <param_set+0xc4>
            cli();
     1da:	f8 94       	cli
            switch (param_size) {                                           // cast pointer to the correct data type according to param table size info
     1dc:	10 31       	cpi	r17, 0x10	; 16
     1de:	a1 f0       	breq	.+40     	; 0x208 <param_set+0x6e>
     1e0:	10 32       	cpi	r17, 0x20	; 32
     1e2:	21 f1       	breq	.+72     	; 0x22c <param_set+0x92>
     1e4:	18 30       	cpi	r17, 0x08	; 8
     1e6:	c1 f5       	brne	.+112    	; 0x258 <param_set+0xbe>
            case 8:
                *(uint8_t *)param_table[i].value = *(uint8_t *)param_new_val_ptr;
     1e8:	c6 01       	movw	r24, r12
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	c8 0f       	add	r28, r24
     1f4:	d9 1f       	adc	r29, r25
     1f6:	c9 5e       	subi	r28, 0xE9	; 233
     1f8:	d7 4d       	sbci	r29, 0xD7	; 215
     1fa:	ea 81       	ldd	r30, Y+2	; 0x02
     1fc:	fb 81       	ldd	r31, Y+3	; 0x03
     1fe:	d7 01       	movw	r26, r14
     200:	8c 91       	ld	r24, X
     202:	80 83       	st	Z, r24
                retval = 0;
     204:	80 e0       	ldi	r24, 0x00	; 0
            	break;
     206:	29 c0       	rjmp	.+82     	; 0x25a <param_set+0xc0>
            case 16:
                *(uint16_t *)param_table[i].value = *(uint16_t *)param_new_val_ptr;
     208:	c6 01       	movw	r24, r12
     20a:	88 0f       	add	r24, r24
     20c:	99 1f       	adc	r25, r25
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	c8 0f       	add	r28, r24
     214:	d9 1f       	adc	r29, r25
     216:	c9 5e       	subi	r28, 0xE9	; 233
     218:	d7 4d       	sbci	r29, 0xD7	; 215
     21a:	ea 81       	ldd	r30, Y+2	; 0x02
     21c:	fb 81       	ldd	r31, Y+3	; 0x03
     21e:	e7 01       	movw	r28, r14
     220:	88 81       	ld	r24, Y
     222:	99 81       	ldd	r25, Y+1	; 0x01
     224:	80 83       	st	Z, r24
     226:	91 83       	std	Z+1, r25	; 0x01
                retval = 0;
     228:	80 e0       	ldi	r24, 0x00	; 0
                break;
     22a:	17 c0       	rjmp	.+46     	; 0x25a <param_set+0xc0>
            case 32:
                *(uint32_t *)param_table[i].value = *(uint32_t *)param_new_val_ptr;
     22c:	c6 01       	movw	r24, r12
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	c8 0f       	add	r28, r24
     238:	d9 1f       	adc	r29, r25
     23a:	c9 5e       	subi	r28, 0xE9	; 233
     23c:	d7 4d       	sbci	r29, 0xD7	; 215
     23e:	ea 81       	ldd	r30, Y+2	; 0x02
     240:	fb 81       	ldd	r31, Y+3	; 0x03
     242:	e7 01       	movw	r28, r14
     244:	88 81       	ld	r24, Y
     246:	99 81       	ldd	r25, Y+1	; 0x01
     248:	aa 81       	ldd	r26, Y+2	; 0x02
     24a:	bb 81       	ldd	r27, Y+3	; 0x03
     24c:	80 83       	st	Z, r24
     24e:	91 83       	std	Z+1, r25	; 0x01
     250:	a2 83       	std	Z+2, r26	; 0x02
     252:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
     254:	80 e0       	ldi	r24, 0x00	; 0
                break; 
     256:	01 c0       	rjmp	.+2      	; 0x25a <param_set+0xc0>
            default:
                retval = -3;                                                // default return value -3 -> invalid value size               
     258:	8d ef       	ldi	r24, 0xFD	; 253
            }
            sei();
     25a:	78 94       	sei
     25c:	09 c0       	rjmp	.+18     	; 0x270 <param_set+0xd6>
     25e:	df ef       	ldi	r29, 0xFF	; 255
     260:	cd 1a       	sub	r12, r29
     262:	dd 0a       	sbc	r13, r29
    return retval;
}

static int8_t param_set(char *param_string, void *param_new_val_ptr, uint8_t param_size) {
    int8_t retval = -2;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     264:	84 e1       	ldi	r24, 0x14	; 20
     266:	c8 16       	cp	r12, r24
     268:	d1 04       	cpc	r13, r1
     26a:	09 f0       	breq	.+2      	; 0x26e <param_set+0xd4>
     26c:	a4 cf       	rjmp	.-184    	; 0x1b6 <param_set+0x1c>
     26e:	8e ef       	ldi	r24, 0xFE	; 254
            sei();
            i = MAX_PARAM_NO;                                               // exit loop
        }
    }
    return retval;
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	bf 90       	pop	r11
     280:	af 90       	pop	r10
     282:	08 95       	ret

00000284 <param_get>:
    }
    
    return retval;
}

static int8_t param_get(char *param_string, uint32_t *param_value) {
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	8c 01       	movw	r16, r24
     296:	7b 01       	movw	r14, r22
     298:	c1 2c       	mov	r12, r1
     29a:	d1 2c       	mov	r13, r1
    int8_t retval = -2;                                         // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        if (strcmp(param_string, param_table[i].param) == 0) {
     29c:	e6 01       	movw	r28, r12
     29e:	f6 01       	movw	r30, r12
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	ee 0f       	add	r30, r30
     2a6:	ff 1f       	adc	r31, r31
     2a8:	ec 0d       	add	r30, r12
     2aa:	fd 1d       	adc	r31, r13
     2ac:	e9 5e       	subi	r30, 0xE9	; 233
     2ae:	f7 4d       	sbci	r31, 0xD7	; 215
     2b0:	60 81       	ld	r22, Z
     2b2:	71 81       	ldd	r23, Z+1	; 0x01
     2b4:	c8 01       	movw	r24, r16
     2b6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strcmp>
     2ba:	89 2b       	or	r24, r25
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <param_get+0x3c>
     2be:	4a c0       	rjmp	.+148    	; 0x354 <param_get+0xd0>
            cli();
     2c0:	f8 94       	cli
            switch (param_table[i].size) {                      // cast pointer to the correct data type according to param table size info
     2c2:	f6 01       	movw	r30, r12
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	ec 0d       	add	r30, r12
     2ce:	fd 1d       	adc	r31, r13
     2d0:	e9 5e       	subi	r30, 0xE9	; 233
     2d2:	f7 4d       	sbci	r31, 0xD7	; 215
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
     2d6:	80 31       	cpi	r24, 0x10	; 16
     2d8:	89 f0       	breq	.+34     	; 0x2fc <param_get+0x78>
     2da:	80 32       	cpi	r24, 0x20	; 32
     2dc:	21 f1       	breq	.+72     	; 0x326 <param_get+0xa2>
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	b1 f5       	brne	.+108    	; 0x34e <param_get+0xca>
            case 8:
                *param_value = *(uint8_t *)param_table[i].value;
     2e2:	02 80       	ldd	r0, Z+2	; 0x02
     2e4:	f3 81       	ldd	r31, Z+3	; 0x03
     2e6:	e0 2d       	mov	r30, r0
     2e8:	80 81       	ld	r24, Z
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	f7 01       	movw	r30, r14
     2f2:	80 83       	st	Z, r24
     2f4:	91 83       	std	Z+1, r25	; 0x01
     2f6:	a2 83       	std	Z+2, r26	; 0x02
     2f8:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
            	break;
     2fa:	29 c0       	rjmp	.+82     	; 0x34e <param_get+0xca>
            case 16:
                *param_value = *(uint16_t *)param_table[i].value;
     2fc:	c6 01       	movw	r24, r12
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	c8 0f       	add	r28, r24
     308:	d9 1f       	adc	r29, r25
     30a:	c9 5e       	subi	r28, 0xE9	; 233
     30c:	d7 4d       	sbci	r29, 0xD7	; 215
     30e:	ea 81       	ldd	r30, Y+2	; 0x02
     310:	fb 81       	ldd	r31, Y+3	; 0x03
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	a0 e0       	ldi	r26, 0x00	; 0
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	f7 01       	movw	r30, r14
     31c:	80 83       	st	Z, r24
     31e:	91 83       	std	Z+1, r25	; 0x01
     320:	a2 83       	std	Z+2, r26	; 0x02
     322:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
                break;
     324:	14 c0       	rjmp	.+40     	; 0x34e <param_get+0xca>
            case 32:
                *param_value = *(uint32_t *)param_table[i].value;
     326:	c6 01       	movw	r24, r12
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	c8 0f       	add	r28, r24
     332:	d9 1f       	adc	r29, r25
     334:	c9 5e       	subi	r28, 0xE9	; 233
     336:	d7 4d       	sbci	r29, 0xD7	; 215
     338:	ea 81       	ldd	r30, Y+2	; 0x02
     33a:	fb 81       	ldd	r31, Y+3	; 0x03
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	a2 81       	ldd	r26, Z+2	; 0x02
     342:	b3 81       	ldd	r27, Z+3	; 0x03
     344:	f7 01       	movw	r30, r14
     346:	80 83       	st	Z, r24
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	a2 83       	std	Z+2, r26	; 0x02
     34c:	b3 83       	std	Z+3, r27	; 0x03
                retval = 0;
                break;               
            }
            sei();
     34e:	78 94       	sei
            i = MAX_PARAM_NO;                                   // exit loop
            retval = 0;
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	09 c0       	rjmp	.+18     	; 0x366 <param_get+0xe2>
     354:	ff ef       	ldi	r31, 0xFF	; 255
     356:	cf 1a       	sub	r12, r31
     358:	df 0a       	sbc	r13, r31
    return retval;
}

static int8_t param_get(char *param_string, uint32_t *param_value) {
    int8_t retval = -2;                                         // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     35a:	84 e1       	ldi	r24, 0x14	; 20
     35c:	c8 16       	cp	r12, r24
     35e:	d1 04       	cpc	r13, r1
     360:	09 f0       	breq	.+2      	; 0x364 <param_get+0xe0>
     362:	9c cf       	rjmp	.-200    	; 0x29c <param_get+0x18>
     364:	8e ef       	ldi	r24, 0xFE	; 254
            i = MAX_PARAM_NO;                                   // exit loop
            retval = 0;
        }
    }
    return retval;
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	08 95       	ret

00000378 <sys_echo>:
    }
    return retval;
}

static int8_t sys_echo(char *string) {
    printf("%s", string);
     378:	9f 93       	push	r25
     37a:	8f 93       	push	r24
     37c:	80 e3       	ldi	r24, 0x30	; 48
     37e:	93 e5       	ldi	r25, 0x53	; 83
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
    return 0;
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
}
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret

00000394 <sys_status>:

int8_t sys_status() {
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
    printf("Available commands:\r\n");                      // print all defined commands in cmd table
     3a2:	83 e3       	ldi	r24, 0x33	; 51
     3a4:	93 e5       	ldi	r25, 0x53	; 83
     3a6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <puts>
     3aa:	c0 e0       	ldi	r28, 0x00	; 0
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t cmd_cnt = 0;
     3ae:	f1 2c       	mov	r15, r1
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("%s\r\n", cmd);
     3b0:	08 e4       	ldi	r16, 0x48	; 72
     3b2:	13 e5       	ldi	r17, 0x53	; 83

int8_t sys_status() {
    printf("Available commands:\r\n");                      // print all defined commands in cmd table
    uint8_t cmd_cnt = 0;
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
        const char* cmd = (const char*)cmd_table[i].cmd;
     3b4:	fe 01       	movw	r30, r28
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	e5 58       	subi	r30, 0x85	; 133
     3c0:	f7 4d       	sbci	r31, 0xD7	; 215
     3c2:	01 90       	ld	r0, Z+
     3c4:	f0 81       	ld	r31, Z
     3c6:	e0 2d       	mov	r30, r0
        if (strcmp(cmd, "\0") != 0) {
     3c8:	80 81       	ld	r24, Z
     3ca:	88 23       	and	r24, r24
     3cc:	59 f0       	breq	.+22     	; 0x3e4 <sys_status+0x50>
            printf("%s\r\n", cmd);
     3ce:	ff 93       	push	r31
     3d0:	ef 93       	push	r30
     3d2:	1f 93       	push	r17
     3d4:	0f 93       	push	r16
     3d6:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
            cmd_cnt++;
     3da:	f3 94       	inc	r15
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	21 96       	adiw	r28, 0x01	; 1
}

int8_t sys_status() {
    printf("Available commands:\r\n");                      // print all defined commands in cmd table
    uint8_t cmd_cnt = 0;
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
     3e6:	c4 31       	cpi	r28, 0x14	; 20
     3e8:	d1 05       	cpc	r29, r1
     3ea:	21 f7       	brne	.-56     	; 0x3b4 <sys_status+0x20>
        if (strcmp(cmd, "\0") != 0) {
            printf("%s\r\n", cmd);
            cmd_cnt++;
        }
    }
    printf("No. of registered commands: %d/%d\r\n", cmd_cnt, MAX_CMD_NO);
     3ec:	1f 92       	push	r1
     3ee:	84 e1       	ldi	r24, 0x14	; 20
     3f0:	8f 93       	push	r24
     3f2:	1f 92       	push	r1
     3f4:	ff 92       	push	r15
     3f6:	8d e4       	ldi	r24, 0x4D	; 77
     3f8:	93 e5       	ldi	r25, 0x53	; 83
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
    printf("Defined parameters:\r\n");                      // print all defined parameters in param table
     402:	81 e7       	ldi	r24, 0x71	; 113
     404:	93 e5       	ldi	r25, 0x53	; 83
     406:	0e 94 0d 06 	call	0xc1a	; 0xc1a <puts>
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	c0 e0       	ldi	r28, 0x00	; 0
     418:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t param_cnt = 0;
     41a:	d1 2c       	mov	r13, r1
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        static uint32_t param_val = 0;
        const char* param = (const char*)param_table[i].param;
        if (strcmp(param, "\0") != 0) {
            param_get((char *)param, &param_val);
            printf("%s = %+"PRIu32"\r\n", param, param_val);
     41c:	06 e8       	ldi	r16, 0x86	; 134
     41e:	13 e5       	ldi	r17, 0x53	; 83
    printf("No. of registered commands: %d/%d\r\n", cmd_cnt, MAX_CMD_NO);
    printf("Defined parameters:\r\n");                      // print all defined parameters in param table
    uint8_t param_cnt = 0;
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
        static uint32_t param_val = 0;
        const char* param = (const char*)param_table[i].param;
     420:	fe 01       	movw	r30, r28
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	ee 0f       	add	r30, r30
     428:	ff 1f       	adc	r31, r31
     42a:	ec 0f       	add	r30, r28
     42c:	fd 1f       	adc	r31, r29
     42e:	e9 5e       	subi	r30, 0xE9	; 233
     430:	f7 4d       	sbci	r31, 0xD7	; 215
     432:	e0 80       	ld	r14, Z
     434:	f1 80       	ldd	r15, Z+1	; 0x01
        if (strcmp(param, "\0") != 0) {
     436:	f7 01       	movw	r30, r14
     438:	80 81       	ld	r24, Z
     43a:	88 23       	and	r24, r24
     43c:	e9 f0       	breq	.+58     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
            param_get((char *)param, &param_val);
     43e:	62 e1       	ldi	r22, 0x12	; 18
     440:	78 e2       	ldi	r23, 0x28	; 40
     442:	c7 01       	movw	r24, r14
     444:	0e 94 42 01 	call	0x284	; 0x284 <param_get>
            printf("%s = %+"PRIu32"\r\n", param, param_val);
     448:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <param_val.3833+0x3>
     44c:	8f 93       	push	r24
     44e:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <param_val.3833+0x2>
     452:	8f 93       	push	r24
     454:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <param_val.3833+0x1>
     458:	8f 93       	push	r24
     45a:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <param_val.3833>
     45e:	8f 93       	push	r24
     460:	ff 92       	push	r15
     462:	ef 92       	push	r14
     464:	1f 93       	push	r17
     466:	0f 93       	push	r16
     468:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
            param_cnt++;
     46c:	d3 94       	inc	r13
     46e:	8d b7       	in	r24, 0x3d	; 61
     470:	9e b7       	in	r25, 0x3e	; 62
     472:	08 96       	adiw	r24, 0x08	; 8
     474:	8d bf       	out	0x3d, r24	; 61
     476:	9e bf       	out	0x3e, r25	; 62
     478:	21 96       	adiw	r28, 0x01	; 1
        }
    }
    printf("No. of registered commands: %d/%d\r\n", cmd_cnt, MAX_CMD_NO);
    printf("Defined parameters:\r\n");                      // print all defined parameters in param table
    uint8_t param_cnt = 0;
    for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     47a:	c4 31       	cpi	r28, 0x14	; 20
     47c:	d1 05       	cpc	r29, r1
     47e:	81 f6       	brne	.-96     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
            param_get((char *)param, &param_val);
            printf("%s = %+"PRIu32"\r\n", param, param_val);
            param_cnt++;
        }
    }
    printf("No. of registered parameters: %d/%d\r\n", param_cnt, MAX_PARAM_NO);
     480:	1f 92       	push	r1
     482:	84 e1       	ldi	r24, 0x14	; 20
     484:	8f 93       	push	r24
     486:	1f 92       	push	r1
     488:	df 92       	push	r13
     48a:	82 e9       	ldi	r24, 0x92	; 146
     48c:	93 e5       	ldi	r25, 0x53	; 83
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
    return 0;
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	08 95       	ret

000004b4 <cmd_init>:
/*
    Function definitions
    *************************************************/
void cmd_init() {                                       // Init command and parameter table
    /* initialize system commands */
    cmd_table[0].cmd = "echo";
     4b4:	eb e7       	ldi	r30, 0x7B	; 123
     4b6:	f8 e2       	ldi	r31, 0x28	; 40
     4b8:	88 eb       	ldi	r24, 0xB8	; 184
     4ba:	93 e5       	ldi	r25, 0x53	; 83
     4bc:	80 83       	st	Z, r24
     4be:	91 83       	std	Z+1, r25	; 0x01
    cmd_table[0].cmd_func_ptr = *sys_echo;
     4c0:	8c eb       	ldi	r24, 0xBC	; 188
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	82 83       	std	Z+2, r24	; 0x02
     4c6:	93 83       	std	Z+3, r25	; 0x03
    cmd_table[1].cmd = "status";
     4c8:	8d eb       	ldi	r24, 0xBD	; 189
     4ca:	93 e5       	ldi	r25, 0x53	; 83
     4cc:	84 83       	std	Z+4, r24	; 0x04
     4ce:	95 83       	std	Z+5, r25	; 0x05
    cmd_table[1].cmd_func_ptr = *sys_status;
     4d0:	8a ec       	ldi	r24, 0xCA	; 202
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	86 83       	std	Z+6, r24	; 0x06
     4d6:	97 83       	std	Z+7, r25	; 0x07
    cmd_table[2].cmd = "param_get";
     4d8:	84 ec       	ldi	r24, 0xC4	; 196
     4da:	93 e5       	ldi	r25, 0x53	; 83
     4dc:	80 87       	std	Z+8, r24	; 0x08
     4de:	91 87       	std	Z+9, r25	; 0x09
    cmd_table[2].cmd_func_ptr = *param_get;
     4e0:	82 e4       	ldi	r24, 0x42	; 66
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	82 87       	std	Z+10, r24	; 0x0a
     4e6:	93 87       	std	Z+11, r25	; 0x0b
    cmd_table[3].cmd = "param_set";
     4e8:	8e ec       	ldi	r24, 0xCE	; 206
     4ea:	93 e5       	ldi	r25, 0x53	; 83
     4ec:	84 87       	std	Z+12, r24	; 0x0c
     4ee:	95 87       	std	Z+13, r25	; 0x0d
    cmd_table[3].cmd_func_ptr = *param_set;
     4f0:	8d ec       	ldi	r24, 0xCD	; 205
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	86 87       	std	Z+14, r24	; 0x0e
     4f6:	97 87       	std	Z+15, r25	; 0x0f
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	90 e0       	ldi	r25, 0x00	; 0
    
    for (uint8_t cnt = NO_SYS_CMD; cnt < MAX_CMD_NO; cnt++) {   // fill up cmd table with empty placeholders
        cmd_table[cnt].cmd = "\0";
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	33 e5       	ldi	r19, 0x53	; 83
     500:	fc 01       	movw	r30, r24
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	e5 58       	subi	r30, 0x85	; 133
     50c:	f7 4d       	sbci	r31, 0xD7	; 215
     50e:	20 83       	st	Z, r18
     510:	31 83       	std	Z+1, r19	; 0x01
        cmd_table[cnt].cmd_func_ptr = NULL;
     512:	12 82       	std	Z+2, r1	; 0x02
     514:	13 82       	std	Z+3, r1	; 0x03
     516:	01 96       	adiw	r24, 0x01	; 1
    cmd_table[2].cmd = "param_get";
    cmd_table[2].cmd_func_ptr = *param_get;
    cmd_table[3].cmd = "param_set";
    cmd_table[3].cmd_func_ptr = *param_set;
    
    for (uint8_t cnt = NO_SYS_CMD; cnt < MAX_CMD_NO; cnt++) {   // fill up cmd table with empty placeholders
     518:	84 31       	cpi	r24, 0x14	; 20
     51a:	91 05       	cpc	r25, r1
     51c:	89 f7       	brne	.-30     	; 0x500 <cmd_init+0x4c>
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
        cmd_table[cnt].cmd = "\0";
        cmd_table[cnt].cmd_func_ptr = NULL;
    }
    for (uint8_t cnt = 0; cnt < MAX_PARAM_NO; cnt++) {
        param_table[cnt].param = "\0";
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	33 e5       	ldi	r19, 0x53	; 83
     526:	fc 01       	movw	r30, r24
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	e8 0f       	add	r30, r24
     532:	f9 1f       	adc	r31, r25
     534:	e9 5e       	subi	r30, 0xE9	; 233
     536:	f7 4d       	sbci	r31, 0xD7	; 215
     538:	20 83       	st	Z, r18
     53a:	31 83       	std	Z+1, r19	; 0x01
        param_table[cnt].value = NULL;
     53c:	12 82       	std	Z+2, r1	; 0x02
     53e:	13 82       	std	Z+3, r1	; 0x03
        param_table[cnt].size = 0;
     540:	14 82       	std	Z+4, r1	; 0x04
     542:	01 96       	adiw	r24, 0x01	; 1
    
    for (uint8_t cnt = NO_SYS_CMD; cnt < MAX_CMD_NO; cnt++) {   // fill up cmd table with empty placeholders
        cmd_table[cnt].cmd = "\0";
        cmd_table[cnt].cmd_func_ptr = NULL;
    }
    for (uint8_t cnt = 0; cnt < MAX_PARAM_NO; cnt++) {
     544:	84 31       	cpi	r24, 0x14	; 20
     546:	91 05       	cpc	r25, r1
     548:	71 f7       	brne	.-36     	; 0x526 <cmd_init+0x72>
        param_table[cnt].param = "\0";
        param_table[cnt].value = NULL;
        param_table[cnt].size = 0;
    }
}
     54a:	08 95       	ret

0000054c <cmd_add>:

int8_t cmd_add(char *cmd_string, int8_t (*cmd_func_ptr)()) {
     54c:	9c 01       	movw	r18, r24
    static uint8_t cmd_cnt = NO_SYS_CMD;                // Keep track of registered commands
    int8_t retval = -1;                                 // ERROR: Return value == -1 -> cmd_table is full
    if (cmd_cnt < MAX_CMD_NO) {
     54e:	90 91 00 28 	lds	r25, 0x2800	; 0x802800 <__data_start>
     552:	94 31       	cpi	r25, 0x14	; 20
     554:	88 f4       	brcc	.+34     	; 0x578 <cmd_add+0x2c>
        cmd_table[cmd_cnt].cmd = cmd_string;            // add command to table
     556:	e9 2f       	mov	r30, r25
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	ee 0f       	add	r30, r30
     55c:	ff 1f       	adc	r31, r31
     55e:	ee 0f       	add	r30, r30
     560:	ff 1f       	adc	r31, r31
     562:	e5 58       	subi	r30, 0x85	; 133
     564:	f7 4d       	sbci	r31, 0xD7	; 215
     566:	20 83       	st	Z, r18
     568:	31 83       	std	Z+1, r19	; 0x01
        cmd_table[cmd_cnt].cmd_func_ptr = cmd_func_ptr;
     56a:	62 83       	std	Z+2, r22	; 0x02
     56c:	73 83       	std	Z+3, r23	; 0x03
        cmd_cnt++;                                      // increment command counter
     56e:	9f 5f       	subi	r25, 0xFF	; 255
     570:	90 93 00 28 	sts	0x2800, r25	; 0x802800 <__data_start>
        retval = 0;                                     // set retval to 0 -> success
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	08 95       	ret
    }
}

int8_t cmd_add(char *cmd_string, int8_t (*cmd_func_ptr)()) {
    static uint8_t cmd_cnt = NO_SYS_CMD;                // Keep track of registered commands
    int8_t retval = -1;                                 // ERROR: Return value == -1 -> cmd_table is full
     578:	8f ef       	ldi	r24, 0xFF	; 255
        cmd_cnt++;                                      // increment command counter
        retval = 0;                                     // set retval to 0 -> success
    }
    
    return retval;    
}
     57a:	08 95       	ret

0000057c <cmd_parse>:
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}

int8_t cmd_parse(char *string) {
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	00 d0       	rcall	.+0      	; 0x592 <cmd_parse+0x16>
     592:	00 d0       	rcall	.+0      	; 0x594 <cmd_parse+0x18>
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	6c 01       	movw	r12, r24
    int8_t retval = -1;                                 // set initial return value to -1 -> no valid command
    char *command = string;
    char *set_ptr = strchr(string, CMD_SET);
     59a:	6d e3       	ldi	r22, 0x3D	; 61
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	0e 94 bc 05 	call	0xb78	; 0xb78 <strchr>
     5a2:	8c 01       	movw	r16, r24
    char *get_ptr = strchr(string, CMD_GET);
     5a4:	6f e3       	ldi	r22, 0x3F	; 63
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	c6 01       	movw	r24, r12
     5aa:	0e 94 bc 05 	call	0xb78	; 0xb78 <strchr>
    uint8_t is_param_op = 0;
    
    if (get_ptr != NULL) {
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <cmd_parse+0x38>
     5b2:	4e c0       	rjmp	.+156    	; 0x650 <cmd_parse+0xd4>
        if (strcmp(string, CMD_STATUS) == 0) {                // "??" is alias for "status"
     5b4:	68 ed       	ldi	r22, 0xD8	; 216
     5b6:	73 e5       	ldi	r23, 0x53	; 83
     5b8:	c6 01       	movw	r24, r12
     5ba:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strcmp>
     5be:	89 2b       	or	r24, r25
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <cmd_parse+0x48>
     5c2:	2f c1       	rjmp	.+606    	; 0x822 <cmd_parse+0x2a6>
            command = "status";
        }
        else {                                          
            command = "param_get";                      
            char *param = strtok(string, "?");          // get param name
     5c4:	69 ed       	ldi	r22, 0xD9	; 217
     5c6:	73 e5       	ldi	r23, 0x53	; 83
     5c8:	c6 01       	movw	r24, r12
     5ca:	0e 94 b7 05 	call	0xb6e	; 0xb6e <strtok>
     5ce:	f8 2e       	mov	r15, r24
     5d0:	e9 2e       	mov	r14, r25
            is_param_op = 1;                            // skip standard cmd parse
            uint32_t param_val = 0;
     5d2:	19 82       	std	Y+1, r1	; 0x01
     5d4:	1a 82       	std	Y+2, r1	; 0x02
     5d6:	1b 82       	std	Y+3, r1	; 0x03
     5d8:	1c 82       	std	Y+4, r1	; 0x04
     5da:	00 e0       	ldi	r16, 0x00	; 0
     5dc:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
                if (strcmp(param, param_table[i].param) == 0) {
     5de:	f8 01       	movw	r30, r16
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	e0 0f       	add	r30, r16
     5ea:	f1 1f       	adc	r31, r17
     5ec:	e9 5e       	subi	r30, 0xE9	; 233
     5ee:	f7 4d       	sbci	r31, 0xD7	; 215
     5f0:	60 81       	ld	r22, Z
     5f2:	71 81       	ldd	r23, Z+1	; 0x01
     5f4:	8f 2d       	mov	r24, r15
     5f6:	9e 2d       	mov	r25, r14
     5f8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strcmp>
     5fc:	89 2b       	or	r24, r25
     5fe:	d9 f4       	brne	.+54     	; 0x636 <cmd_parse+0xba>
                    param_get((char *)param, &param_val);               // get param value
     600:	be 01       	movw	r22, r28
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	8f 2d       	mov	r24, r15
     608:	9e 2d       	mov	r25, r14
     60a:	0e 94 42 01 	call	0x284	; 0x284 <param_get>
                    printf("%s = %+"PRIu32"\r\n", param, param_val);    // return value to serial
     60e:	8c 81       	ldd	r24, Y+4	; 0x04
     610:	8f 93       	push	r24
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	8f 93       	push	r24
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	8f 93       	push	r24
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	8f 93       	push	r24
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	86 e8       	ldi	r24, 0x86	; 134
     624:	93 e5       	ldi	r25, 0x53	; 83
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	de bf       	out	0x3e, r29	; 62
                    i = MAX_PARAM_NO;                                   // exit loop
                    retval = 0;
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	06 c0       	rjmp	.+12     	; 0x642 <cmd_parse+0xc6>
     636:	0f 5f       	subi	r16, 0xFF	; 255
     638:	1f 4f       	sbci	r17, 0xFF	; 255
        else {                                          
            command = "param_get";                      
            char *param = strtok(string, "?");          // get param name
            is_param_op = 1;                            // skip standard cmd parse
            uint32_t param_val = 0;
            for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     63a:	04 31       	cpi	r16, 0x14	; 20
     63c:	11 05       	cpc	r17, r1
     63e:	79 f6       	brne	.-98     	; 0x5de <cmd_parse+0x62>
     640:	1f ef       	ldi	r17, 0xFF	; 255
    if (get_ptr != NULL) {
        if (strcmp(string, CMD_STATUS) == 0) {                // "??" is alias for "status"
            command = "status";
        }
        else {                                          
            command = "param_get";                      
     642:	0f 2e       	mov	r0, r31
     644:	f4 ec       	ldi	r31, 0xC4	; 196
     646:	cf 2e       	mov	r12, r31
     648:	f3 e5       	ldi	r31, 0x53	; 83
     64a:	df 2e       	mov	r13, r31
     64c:	f0 2d       	mov	r31, r0
     64e:	a9 c0       	rjmp	.+338    	; 0x7a2 <cmd_parse+0x226>
                    retval = 0;
                }
	        }
        }        
    } 
    else if (set_ptr != NULL) {
     650:	01 2b       	or	r16, r17
     652:	09 f4       	brne	.+2      	; 0x656 <cmd_parse+0xda>
     654:	ec c0       	rjmp	.+472    	; 0x82e <cmd_parse+0x2b2>
        command = "param_set";
        is_param_op = 1;
        char *param = strtok(string, "=");
     656:	6b ed       	ldi	r22, 0xDB	; 219
     658:	73 e5       	ldi	r23, 0x53	; 83
     65a:	c6 01       	movw	r24, r12
     65c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <strtok>
     660:	6c 01       	movw	r12, r24
        char *str_value = strtok(NULL, "=");
     662:	6b ed       	ldi	r22, 0xDB	; 219
     664:	73 e5       	ldi	r23, 0x53	; 83
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <strtok>
     66e:	5c 01       	movw	r10, r24
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
            if (strcmp(param, param_table[i].param) == 0) {
     674:	f8 01       	movw	r30, r16
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e0 0f       	add	r30, r16
     680:	f1 1f       	adc	r31, r17
     682:	e9 5e       	subi	r30, 0xE9	; 233
     684:	f7 4d       	sbci	r31, 0xD7	; 215
     686:	60 81       	ld	r22, Z
     688:	71 81       	ldd	r23, Z+1	; 0x01
     68a:	c6 01       	movw	r24, r12
     68c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strcmp>
     690:	89 2b       	or	r24, r25
     692:	09 f0       	breq	.+2      	; 0x696 <cmd_parse+0x11a>
     694:	4b c0       	rjmp	.+150    	; 0x72c <cmd_parse+0x1b0>
                uint8_t size = param_table[i].size;                         // get param size
     696:	f8 01       	movw	r30, r16
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	e0 0f       	add	r30, r16
     6a2:	f1 1f       	adc	r31, r17
     6a4:	e9 5e       	subi	r30, 0xE9	; 233
     6a6:	f7 4d       	sbci	r31, 0xD7	; 215
     6a8:	84 81       	ldd	r24, Z+4	; 0x04
                uint8_t value8;
                uint16_t value16;
                uint32_t value32;
                switch (size) {                                             // cast value to the correct data type according to param table size info
     6aa:	80 31       	cpi	r24, 0x10	; 16
     6ac:	a1 f0       	breq	.+40     	; 0x6d6 <cmd_parse+0x15a>
     6ae:	80 32       	cpi	r24, 0x20	; 32
     6b0:	19 f1       	breq	.+70     	; 0x6f8 <cmd_parse+0x17c>
     6b2:	88 30       	cpi	r24, 0x08	; 8
     6b4:	99 f5       	brne	.+102    	; 0x71c <cmd_parse+0x1a0>
                case 8:
                    value8 = (uint8_t)strtoul(str_value, NULL, 0);
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	c5 01       	movw	r24, r10
     6c0:	0e 94 b9 04 	call	0x972	; 0x972 <strtoul>
     6c4:	69 83       	std	Y+1, r22	; 0x01
                    param_set(param, &value8, 8);
     6c6:	48 e0       	ldi	r20, 0x08	; 8
     6c8:	be 01       	movw	r22, r28
     6ca:	6f 5f       	subi	r22, 0xFF	; 255
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	c6 01       	movw	r24, r12
     6d0:	0e 94 cd 00 	call	0x19a	; 0x19a <param_set>
                    retval = 0;
            	    break;
     6d4:	23 c0       	rjmp	.+70     	; 0x71c <cmd_parse+0x1a0>
                case 16:
                    value16 = (uint16_t)strtoul(str_value, NULL, 0);
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	c5 01       	movw	r24, r10
     6e0:	0e 94 b9 04 	call	0x972	; 0x972 <strtoul>
     6e4:	69 83       	std	Y+1, r22	; 0x01
     6e6:	7a 83       	std	Y+2, r23	; 0x02
                    param_set(param, &value16, 16);
     6e8:	40 e1       	ldi	r20, 0x10	; 16
     6ea:	be 01       	movw	r22, r28
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	c6 01       	movw	r24, r12
     6f2:	0e 94 cd 00 	call	0x19a	; 0x19a <param_set>
                    retval = 0;
                    break;
     6f6:	12 c0       	rjmp	.+36     	; 0x71c <cmd_parse+0x1a0>
                case 32:
                    value32 = (uint32_t)strtoul(str_value, NULL, 0);
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	c5 01       	movw	r24, r10
     702:	0e 94 b9 04 	call	0x972	; 0x972 <strtoul>
     706:	69 83       	std	Y+1, r22	; 0x01
     708:	7a 83       	std	Y+2, r23	; 0x02
     70a:	8b 83       	std	Y+3, r24	; 0x03
     70c:	9c 83       	std	Y+4, r25	; 0x04
                    param_set(param, &value32, 32);
     70e:	40 e2       	ldi	r20, 0x20	; 32
     710:	be 01       	movw	r22, r28
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	c6 01       	movw	r24, r12
     718:	0e 94 cd 00 	call	0x19a	; 0x19a <param_set>
                }
	        }
        }        
    } 
    else if (set_ptr != NULL) {
        command = "param_set";
     71c:	0f 2e       	mov	r0, r31
     71e:	fe ec       	ldi	r31, 0xCE	; 206
     720:	cf 2e       	mov	r12, r31
     722:	f3 e5       	ldi	r31, 0x53	; 83
     724:	df 2e       	mov	r13, r31
     726:	f0 2d       	mov	r31, r0
                    param_set(param, &value32, 32);
                    retval = 0;
                    break;
                }                    
                i = MAX_PARAM_NO;                                   // exit loop
                retval = 0;
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	6e c0       	rjmp	.+220    	; 0x808 <cmd_parse+0x28c>
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
    else if (set_ptr != NULL) {
        command = "param_set";
        is_param_op = 1;
        char *param = strtok(string, "=");
        char *str_value = strtok(NULL, "=");
        for (uint8_t i = 0; i < MAX_PARAM_NO; i++) {
     730:	04 31       	cpi	r16, 0x14	; 20
     732:	11 05       	cpc	r17, r1
     734:	09 f0       	breq	.+2      	; 0x738 <cmd_parse+0x1bc>
     736:	9e cf       	rjmp	.-196    	; 0x674 <cmd_parse+0xf8>
                }
	        }
        }        
    } 
    else if (set_ptr != NULL) {
        command = "param_set";
     738:	0f 2e       	mov	r0, r31
     73a:	fe ec       	ldi	r31, 0xCE	; 206
     73c:	cf 2e       	mov	r12, r31
     73e:	f3 e5       	ldi	r31, 0x53	; 83
     740:	df 2e       	mov	r13, r31
     742:	f0 2d       	mov	r31, r0
     744:	1f ef       	ldi	r17, 0xFF	; 255
     746:	38 c0       	rjmp	.+112    	; 0x7b8 <cmd_parse+0x23c>
            }
	    }
    }
    if (is_param_op == 0) {
	    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
            if (strcmp(command, cmd_table[i].cmd) == 0) {
     748:	f8 01       	movw	r30, r16
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	ee 0f       	add	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	e5 58       	subi	r30, 0x85	; 133
     754:	f7 4d       	sbci	r31, 0xD7	; 215
     756:	60 81       	ld	r22, Z
     758:	71 81       	ldd	r23, Z+1	; 0x01
     75a:	c6 01       	movw	r24, r12
     75c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strcmp>
     760:	89 2b       	or	r24, r25
     762:	c1 f4       	brne	.+48     	; 0x794 <cmd_parse+0x218>
    return retval;    
}

static int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
    if (cmd_table[index].cmd_func_ptr != NULL) {
     764:	f8 01       	movw	r30, r16
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	e5 58       	subi	r30, 0x85	; 133
     770:	f7 4d       	sbci	r31, 0xD7	; 215
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	93 81       	ldd	r25, Z+3	; 0x03
     776:	89 2b       	or	r24, r25
     778:	61 f1       	breq	.+88     	; 0x7d2 <cmd_parse+0x256>
        retval = cmd_table[index].cmd_func_ptr();
     77a:	f8 01       	movw	r30, r16
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	e5 58       	subi	r30, 0x85	; 133
     786:	f7 4d       	sbci	r31, 0xD7	; 215
     788:	02 80       	ldd	r0, Z+2	; 0x02
     78a:	f3 81       	ldd	r31, Z+3	; 0x03
     78c:	e0 2d       	mov	r30, r0
     78e:	09 95       	icall
     790:	18 2f       	mov	r17, r24
     792:	07 c0       	rjmp	.+14     	; 0x7a2 <cmd_parse+0x226>
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	1f 4f       	sbci	r17, 0xFF	; 255
                retval = 0;
            }
	    }
    }
    if (is_param_op == 0) {
	    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
     798:	04 31       	cpi	r16, 0x14	; 20
     79a:	11 05       	cpc	r17, r1
     79c:	a9 f6       	brne	.-86     	; 0x748 <cmd_parse+0x1cc>
     79e:	1f ef       	ldi	r17, 0xFF	; 255
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <cmd_parse+0x23c>
                i = MAX_CMD_NO;                             // exit loop
            }
	    } 
    }
    
    switch (retval) {                                   // select appropriate feedback to return
     7a2:	1e 3f       	cpi	r17, 0xFE	; 254
     7a4:	b9 f0       	breq	.+46     	; 0x7d4 <cmd_parse+0x258>
     7a6:	1c f4       	brge	.+6      	; 0x7ae <cmd_parse+0x232>
     7a8:	1d 3f       	cpi	r17, 0xFD	; 253
     7aa:	09 f1       	breq	.+66     	; 0x7ee <cmd_parse+0x272>
     7ac:	43 c0       	rjmp	.+134    	; 0x834 <cmd_parse+0x2b8>
     7ae:	1f 3f       	cpi	r17, 0xFF	; 255
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <cmd_parse+0x23c>
     7b2:	11 11       	cpse	r17, r1
     7b4:	3f c0       	rjmp	.+126    	; 0x834 <cmd_parse+0x2b8>
     7b6:	28 c0       	rjmp	.+80     	; 0x808 <cmd_parse+0x28c>
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", command);
     7b8:	df 92       	push	r13
     7ba:	cf 92       	push	r12
     7bc:	8d ed       	ldi	r24, 0xDD	; 221
     7be:	93 e5       	ldi	r25, 0x53	; 83
     7c0:	9f 93       	push	r25
     7c2:	8f 93       	push	r24
     7c4:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
    	return retval;
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	31 c0       	rjmp	.+98     	; 0x834 <cmd_parse+0x2b8>
    
    return retval;    
}

static int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
     7d2:	1e ef       	ldi	r17, 0xFE	; 254
    switch (retval) {                                   // select appropriate feedback to return
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", command);
    	return retval;
    case -2:
        printf("FAIL. Failed to execute command %s!\r\n", command);
     7d4:	df 92       	push	r13
     7d6:	cf 92       	push	r12
     7d8:	8c e0       	ldi	r24, 0x0C	; 12
     7da:	94 e5       	ldi	r25, 0x54	; 84
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
     7e0:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
        return retval;
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	23 c0       	rjmp	.+70     	; 0x834 <cmd_parse+0x2b8>
    case -3:
        printf("FAIL. Invalid options/parameters for command %s!\r\n", command);
     7ee:	df 92       	push	r13
     7f0:	cf 92       	push	r12
     7f2:	82 e3       	ldi	r24, 0x32	; 50
     7f4:	94 e5       	ldi	r25, 0x54	; 84
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
        return retval;
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	16 c0       	rjmp	.+44     	; 0x834 <cmd_parse+0x2b8>
    case 0:
        printf("OK. Command %s executed successfully!\r\n", command);
     808:	df 92       	push	r13
     80a:	cf 92       	push	r12
     80c:	85 e6       	ldi	r24, 0x65	; 101
     80e:	94 e5       	ldi	r25, 0x54	; 84
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	0e 94 f7 05 	call	0xbee	; 0xbee <printf>
        return retval;
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	09 c0       	rjmp	.+18     	; 0x834 <cmd_parse+0x2b8>
    char *get_ptr = strchr(string, CMD_GET);
    uint8_t is_param_op = 0;
    
    if (get_ptr != NULL) {
        if (strcmp(string, CMD_STATUS) == 0) {                // "??" is alias for "status"
            command = "status";
     822:	0f 2e       	mov	r0, r31
     824:	fd eb       	ldi	r31, 0xBD	; 189
     826:	cf 2e       	mov	r12, r31
     828:	f3 e5       	ldi	r31, 0x53	; 83
     82a:	df 2e       	mov	r13, r31
     82c:	f0 2d       	mov	r31, r0
    } 
    else if (set_ptr != NULL) {
        command = "param_set";
        is_param_op = 1;
        char *param = strtok(string, "=");
        char *str_value = strtok(NULL, "=");
     82e:	00 e0       	ldi	r16, 0x00	; 0
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	8a cf       	rjmp	.-236    	; 0x748 <cmd_parse+0x1cc>
    case 0:
        printf("OK. Command %s executed successfully!\r\n", command);
        return retval;
    }
    return retval;
}
     834:	81 2f       	mov	r24, r17
     836:	24 96       	adiw	r28, 0x04	; 4
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	08 95       	ret

00000852 <param_add>:

int8_t param_add(char *param_string, void *param_value_ptr, uint8_t size) {
     852:	9c 01       	movw	r18, r24
    static uint8_t param_cnt = 0;
    int8_t retval = -1;                                     // ERROR: Return value == -1 -> cmd_table is full
    if (param_cnt < MAX_CMD_NO) {
     854:	90 91 16 28 	lds	r25, 0x2816	; 0x802816 <param_cnt.3790>
     858:	94 31       	cpi	r25, 0x14	; 20
     85a:	a8 f4       	brcc	.+42     	; 0x886 <param_add+0x34>
        param_table[param_cnt].param = param_string;        // add parameter to table
     85c:	e9 2f       	mov	r30, r25
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	df 01       	movw	r26, r30
     862:	aa 0f       	add	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	aa 0f       	add	r26, r26
     868:	bb 1f       	adc	r27, r27
     86a:	ea 0f       	add	r30, r26
     86c:	fb 1f       	adc	r31, r27
     86e:	e9 5e       	subi	r30, 0xE9	; 233
     870:	f7 4d       	sbci	r31, 0xD7	; 215
     872:	20 83       	st	Z, r18
     874:	31 83       	std	Z+1, r19	; 0x01
        param_table[param_cnt].value = param_value_ptr;
     876:	62 83       	std	Z+2, r22	; 0x02
     878:	73 83       	std	Z+3, r23	; 0x03
        param_table[param_cnt].size = size;
     87a:	44 83       	std	Z+4, r20	; 0x04
        param_cnt++;                                        // increment parameter counter
     87c:	9f 5f       	subi	r25, 0xFF	; 255
     87e:	90 93 16 28 	sts	0x2816, r25	; 0x802816 <param_cnt.3790>
        retval = 0;                                         // set retval to 0 -> success
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret
    return retval;
}

int8_t param_add(char *param_string, void *param_value_ptr, uint8_t size) {
    static uint8_t param_cnt = 0;
    int8_t retval = -1;                                     // ERROR: Return value == -1 -> cmd_table is full
     886:	8f ef       	ldi	r24, 0xFF	; 255
        param_cnt++;                                        // increment parameter counter
        retval = 0;                                         // set retval to 0 -> success
    }
    
    return retval;
}
     888:	08 95       	ret

0000088a <uart0_printChar>:
    stdout = &uart0_stream;
}

static void uart0_sendChar(char c) {
    /* Send char c to TX0 pin */
    while (!(USART0.STATUS & USART_DREIF_bm)) {     // Check for completed transmission
     88a:	e0 e0       	ldi	r30, 0x00	; 0
     88c:	f8 e0       	ldi	r31, 0x08	; 8
     88e:	94 81       	ldd	r25, Z+4	; 0x04
     890:	95 ff       	sbrs	r25, 5
     892:	fd cf       	rjmp	.-6      	; 0x88e <uart0_printChar+0x4>
        ;
    }
    USART0.TXDATAL = c;
     894:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
}

int uart0_printChar(char c, FILE *stream) {         // Wrapper for uart0_sendChar() using printf()
    uart0_sendChar(c);
    return 0;
}
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	08 95       	ret

0000089e <__vector_17>:
static ringbuffer_t rxbuffer;

/*
    ISR definitions
    *************************************************/
ISR(USART0_RXC_vect) {
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	0f 92       	push	r0
     8a6:	11 24       	eor	r1, r1
    return;
}
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <__vector_19>:

ISR(USART0_TXC_vect) {
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
    return;
}
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <__vector_18>:

ISR(USART0_DRE_vect) {
     8c6:	1f 92       	push	r1
     8c8:	0f 92       	push	r0
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
    return;
}
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	0f 90       	pop	r0
     8d6:	1f 90       	pop	r1
     8d8:	18 95       	reti

000008da <uart_init>:
/*
    Function definitions
    *************************************************/
void uart_init() {
    /* USART0 Config */
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200);                       // set uart0 baud rate
     8da:	e0 e0       	ldi	r30, 0x00	; 0
     8dc:	f8 e0       	ldi	r31, 0x08	; 8
     8de:	84 e7       	ldi	r24, 0x74	; 116
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	80 87       	std	Z+8, r24	; 0x08
     8e4:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm);     // enable RXC, TXC, DRE interrupts
     8e6:	85 81       	ldd	r24, Z+5	; 0x05
     8e8:	80 6e       	ori	r24, 0xE0	; 224
     8ea:	85 83       	std	Z+5, r24	; 0x05
    USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);                        // enable uart0 TX & RX
     8ec:	86 81       	ldd	r24, Z+6	; 0x06
     8ee:	80 6c       	ori	r24, 0xC0	; 192
     8f0:	86 83       	std	Z+6, r24	; 0x06
    PORTA.DIRSET |= PIN0_bm;                                                // set uart0 TX (PA0) to output
     8f2:	e0 e0       	ldi	r30, 0x00	; 0
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	81 81       	ldd	r24, Z+1	; 0x01
     8f8:	81 60       	ori	r24, 0x01	; 1
     8fa:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRSET &= ~PIN1_bm;                                               // set uart0 RX (PA1) to input
     8fc:	81 81       	ldd	r24, Z+1	; 0x01
     8fe:	8d 7f       	andi	r24, 0xFD	; 253
     900:	81 83       	std	Z+1, r24	; 0x01
    stdout = &uart0_stream;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	98 e2       	ldi	r25, 0x28	; 40
     906:	80 93 09 29 	sts	0x2909, r24	; 0x802909 <__iob+0x2>
     90a:	90 93 0a 29 	sts	0x290A, r25	; 0x80290a <__iob+0x3>
     90e:	08 95       	ret

00000910 <uart0_readLine>:
    }
    return USART0.RXDATAL;
}

char * uart0_readLine() {                             // Read a single line from uart0 rx
    uint8_t index = 0;
     910:	a0 e0       	ldi	r26, 0x00	; 0
    uart0_sendChar(c);
    return 0;
}

static uint8_t uart0_readChar() {
    while (!(USART0.STATUS & USART_RXCIF_bm)) {
     912:	e0 e0       	ldi	r30, 0x00	; 0
     914:	f8 e0       	ldi	r31, 0x08	; 8
     916:	84 81       	ldd	r24, Z+4	; 0x04
     918:	88 23       	and	r24, r24
     91a:	ec f7       	brge	.-6      	; 0x916 <uart0_readLine+0x6>
        ;
    }
    return USART0.RXDATAL;
     91c:	80 81       	ld	r24, Z
    uint8_t index = 0;
    char c;
      
    while (1) {
        c = uart0_readChar();
        if ((c != '\n') && (c != '\r')) {
     91e:	8a 30       	cpi	r24, 0x0A	; 10
     920:	09 f1       	breq	.+66     	; 0x964 <uart0_readLine+0x54>
     922:	8d 30       	cpi	r24, 0x0D	; 13
     924:	c1 f3       	breq	.-16     	; 0x916 <uart0_readLine+0x6>
            buffer[index++] = c;
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	9a 0f       	add	r25, r26
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	a5 53       	subi	r26, 0x35	; 53
     92e:	b7 4d       	sbci	r27, 0xD7	; 215
     930:	8c 93       	st	X, r24
            if (index > MAX_LINE_LEN) {
     932:	9d 33       	cpi	r25, 0x3D	; 61
     934:	a8 f0       	brcs	.+42     	; 0x960 <uart0_readLine+0x50>
                snprintf(buffer, sizeof(buffer), "Input too long, maximum no. of chars allowed: %d", MAX_LINE_LEN);
     936:	1f 92       	push	r1
     938:	8c e3       	ldi	r24, 0x3C	; 60
     93a:	8f 93       	push	r24
     93c:	2d e8       	ldi	r18, 0x8D	; 141
     93e:	34 e5       	ldi	r19, 0x54	; 84
     940:	3f 93       	push	r19
     942:	2f 93       	push	r18
     944:	1f 92       	push	r1
     946:	8f 93       	push	r24
     948:	8b ec       	ldi	r24, 0xCB	; 203
     94a:	98 e2       	ldi	r25, 0x28	; 40
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	0e 94 3d 06 	call	0xc7a	; 0xc7a <snprintf>
                return buffer;
     954:	8d b7       	in	r24, 0x3d	; 61
     956:	9e b7       	in	r25, 0x3e	; 62
     958:	08 96       	adiw	r24, 0x08	; 8
     95a:	8d bf       	out	0x3d, r24	; 61
     95c:	9e bf       	out	0x3e, r25	; 62
     95e:	06 c0       	rjmp	.+12     	; 0x96c <uart0_readLine+0x5c>
    char c;
      
    while (1) {
        c = uart0_readChar();
        if ((c != '\n') && (c != '\r')) {
            buffer[index++] = c;
     960:	a9 2f       	mov	r26, r25
     962:	d9 cf       	rjmp	.-78     	; 0x916 <uart0_readLine+0x6>
                snprintf(buffer, sizeof(buffer), "Input too long, maximum no. of chars allowed: %d", MAX_LINE_LEN);
                return buffer;
            }
        }        
        if (c == '\n') {
            buffer[index] = '\0';
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	a5 53       	subi	r26, 0x35	; 53
     968:	b7 4d       	sbci	r27, 0xD7	; 215
     96a:	1c 92       	st	X, r1
            index = 0;
            return buffer;
        }
    }
}     
     96c:	8b ec       	ldi	r24, 0xCB	; 203
     96e:	98 e2       	ldi	r25, 0x28	; 40
     970:	08 95       	ret

00000972 <strtoul>:
     972:	a0 e0       	ldi	r26, 0x00	; 0
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	ef eb       	ldi	r30, 0xBF	; 191
     978:	f4 e0       	ldi	r31, 0x04	; 4
     97a:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__prologue_saves__+0x2>
     97e:	5c 01       	movw	r10, r24
     980:	6b 01       	movw	r12, r22
     982:	7a 01       	movw	r14, r20
     984:	61 15       	cp	r22, r1
     986:	71 05       	cpc	r23, r1
     988:	19 f0       	breq	.+6      	; 0x990 <strtoul+0x1e>
     98a:	fb 01       	movw	r30, r22
     98c:	80 83       	st	Z, r24
     98e:	91 83       	std	Z+1, r25	; 0x01
     990:	e1 14       	cp	r14, r1
     992:	f1 04       	cpc	r15, r1
     994:	29 f0       	breq	.+10     	; 0x9a0 <strtoul+0x2e>
     996:	c7 01       	movw	r24, r14
     998:	02 97       	sbiw	r24, 0x02	; 2
     99a:	83 97       	sbiw	r24, 0x23	; 35
     99c:	08 f0       	brcs	.+2      	; 0x9a0 <strtoul+0x2e>
     99e:	c9 c0       	rjmp	.+402    	; 0xb32 <strtoul+0x1c0>
     9a0:	e5 01       	movw	r28, r10
     9a2:	21 96       	adiw	r28, 0x01	; 1
     9a4:	f5 01       	movw	r30, r10
     9a6:	10 81       	ld	r17, Z
     9a8:	81 2f       	mov	r24, r17
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 ae 05 	call	0xb5c	; 0xb5c <isspace>
     9b0:	89 2b       	or	r24, r25
     9b2:	11 f0       	breq	.+4      	; 0x9b8 <strtoul+0x46>
     9b4:	5e 01       	movw	r10, r28
     9b6:	f4 cf       	rjmp	.-24     	; 0x9a0 <strtoul+0x2e>
     9b8:	1d 32       	cpi	r17, 0x2D	; 45
     9ba:	29 f4       	brne	.+10     	; 0x9c6 <strtoul+0x54>
     9bc:	21 96       	adiw	r28, 0x01	; 1
     9be:	f5 01       	movw	r30, r10
     9c0:	11 81       	ldd	r17, Z+1	; 0x01
     9c2:	01 e0       	ldi	r16, 0x01	; 1
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <strtoul+0x62>
     9c6:	1b 32       	cpi	r17, 0x2B	; 43
     9c8:	21 f4       	brne	.+8      	; 0x9d2 <strtoul+0x60>
     9ca:	e5 01       	movw	r28, r10
     9cc:	22 96       	adiw	r28, 0x02	; 2
     9ce:	f5 01       	movw	r30, r10
     9d0:	11 81       	ldd	r17, Z+1	; 0x01
     9d2:	00 e0       	ldi	r16, 0x00	; 0
     9d4:	e1 14       	cp	r14, r1
     9d6:	f1 04       	cpc	r15, r1
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <strtoul+0x94>
     9da:	f0 e1       	ldi	r31, 0x10	; 16
     9dc:	ef 16       	cp	r14, r31
     9de:	f1 04       	cpc	r15, r1
     9e0:	29 f4       	brne	.+10     	; 0x9ec <strtoul+0x7a>
     9e2:	b0 c0       	rjmp	.+352    	; 0xb44 <strtoul+0x1d2>
     9e4:	10 e3       	ldi	r17, 0x30	; 48
     9e6:	e1 14       	cp	r14, r1
     9e8:	f1 04       	cpc	r15, r1
     9ea:	01 f1       	breq	.+64     	; 0xa2c <strtoul+0xba>
     9ec:	2a e0       	ldi	r18, 0x0A	; 10
     9ee:	e2 16       	cp	r14, r18
     9f0:	f1 04       	cpc	r15, r1
     9f2:	b1 f1       	breq	.+108    	; 0xa60 <strtoul+0xee>
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	e8 16       	cp	r14, r24
     9f8:	f1 04       	cpc	r15, r1
     9fa:	71 f0       	breq	.+28     	; 0xa18 <strtoul+0xa6>
     9fc:	e8 e0       	ldi	r30, 0x08	; 8
     9fe:	ee 16       	cp	r14, r30
     a00:	f1 04       	cpc	r15, r1
     a02:	f1 f4       	brne	.+60     	; 0xa40 <strtoul+0xce>
     a04:	13 c0       	rjmp	.+38     	; 0xa2c <strtoul+0xba>
     a06:	10 33       	cpi	r17, 0x30	; 48
     a08:	41 f5       	brne	.+80     	; 0xa5a <strtoul+0xe8>
     a0a:	88 81       	ld	r24, Y
     a0c:	8f 7d       	andi	r24, 0xDF	; 223
     a0e:	88 35       	cpi	r24, 0x58	; 88
     a10:	49 f7       	brne	.-46     	; 0x9e4 <strtoul+0x72>
     a12:	19 81       	ldd	r17, Y+1	; 0x01
     a14:	22 96       	adiw	r28, 0x02	; 2
     a16:	02 60       	ori	r16, 0x02	; 2
     a18:	f0 e1       	ldi	r31, 0x10	; 16
     a1a:	ef 2e       	mov	r14, r31
     a1c:	f1 2c       	mov	r15, r1
     a1e:	88 24       	eor	r8, r8
     a20:	8a 94       	dec	r8
     a22:	98 2c       	mov	r9, r8
     a24:	a8 2c       	mov	r10, r8
     a26:	af e0       	ldi	r26, 0x0F	; 15
     a28:	ba 2e       	mov	r11, r26
     a2a:	20 c0       	rjmp	.+64     	; 0xa6c <strtoul+0xfa>
     a2c:	78 e0       	ldi	r23, 0x08	; 8
     a2e:	e7 2e       	mov	r14, r23
     a30:	f1 2c       	mov	r15, r1
     a32:	88 24       	eor	r8, r8
     a34:	8a 94       	dec	r8
     a36:	98 2c       	mov	r9, r8
     a38:	a8 2c       	mov	r10, r8
     a3a:	ef e1       	ldi	r30, 0x1F	; 31
     a3c:	be 2e       	mov	r11, r30
     a3e:	16 c0       	rjmp	.+44     	; 0xa6c <strtoul+0xfa>
     a40:	6f ef       	ldi	r22, 0xFF	; 255
     a42:	7f ef       	ldi	r23, 0xFF	; 255
     a44:	cb 01       	movw	r24, r22
     a46:	97 01       	movw	r18, r14
     a48:	0f 2c       	mov	r0, r15
     a4a:	00 0c       	add	r0, r0
     a4c:	44 0b       	sbc	r20, r20
     a4e:	55 0b       	sbc	r21, r21
     a50:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
     a54:	49 01       	movw	r8, r18
     a56:	5a 01       	movw	r10, r20
     a58:	09 c0       	rjmp	.+18     	; 0xa6c <strtoul+0xfa>
     a5a:	8a e0       	ldi	r24, 0x0A	; 10
     a5c:	e8 2e       	mov	r14, r24
     a5e:	f1 2c       	mov	r15, r1
     a60:	69 e9       	ldi	r22, 0x99	; 153
     a62:	86 2e       	mov	r8, r22
     a64:	98 2c       	mov	r9, r8
     a66:	a8 2c       	mov	r10, r8
     a68:	69 e1       	ldi	r22, 0x19	; 25
     a6a:	b6 2e       	mov	r11, r22
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	cb 01       	movw	r24, r22
     a74:	27 01       	movw	r4, r14
     a76:	0f 2c       	mov	r0, r15
     a78:	00 0c       	add	r0, r0
     a7a:	66 08       	sbc	r6, r6
     a7c:	77 08       	sbc	r7, r7
     a7e:	fe 01       	movw	r30, r28
     a80:	50 ed       	ldi	r21, 0xD0	; 208
     a82:	35 2e       	mov	r3, r21
     a84:	31 0e       	add	r3, r17
     a86:	29 e0       	ldi	r18, 0x09	; 9
     a88:	23 15       	cp	r18, r3
     a8a:	70 f4       	brcc	.+28     	; 0xaa8 <strtoul+0x136>
     a8c:	2f eb       	ldi	r18, 0xBF	; 191
     a8e:	21 0f       	add	r18, r17
     a90:	2a 31       	cpi	r18, 0x1A	; 26
     a92:	18 f4       	brcc	.+6      	; 0xa9a <strtoul+0x128>
     a94:	39 ec       	ldi	r19, 0xC9	; 201
     a96:	33 2e       	mov	r3, r19
     a98:	06 c0       	rjmp	.+12     	; 0xaa6 <strtoul+0x134>
     a9a:	2f e9       	ldi	r18, 0x9F	; 159
     a9c:	21 0f       	add	r18, r17
     a9e:	2a 31       	cpi	r18, 0x1A	; 26
     aa0:	30 f5       	brcc	.+76     	; 0xaee <strtoul+0x17c>
     aa2:	29 ea       	ldi	r18, 0xA9	; 169
     aa4:	32 2e       	mov	r3, r18
     aa6:	31 0e       	add	r3, r17
     aa8:	23 2d       	mov	r18, r3
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	2e 15       	cp	r18, r14
     aae:	3f 05       	cpc	r19, r15
     ab0:	f4 f4       	brge	.+60     	; 0xaee <strtoul+0x17c>
     ab2:	4f 3f       	cpi	r20, 0xFF	; 255
     ab4:	c9 f0       	breq	.+50     	; 0xae8 <strtoul+0x176>
     ab6:	86 16       	cp	r8, r22
     ab8:	97 06       	cpc	r9, r23
     aba:	a8 06       	cpc	r10, r24
     abc:	b9 06       	cpc	r11, r25
     abe:	88 f0       	brcs	.+34     	; 0xae2 <strtoul+0x170>
     ac0:	a3 01       	movw	r20, r6
     ac2:	92 01       	movw	r18, r4
     ac4:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsi3>
     ac8:	23 2d       	mov	r18, r3
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	62 0f       	add	r22, r18
     ad2:	73 1f       	adc	r23, r19
     ad4:	84 1f       	adc	r24, r20
     ad6:	95 1f       	adc	r25, r21
     ad8:	62 17       	cp	r22, r18
     ada:	73 07       	cpc	r23, r19
     adc:	84 07       	cpc	r24, r20
     ade:	95 07       	cpc	r25, r21
     ae0:	10 f4       	brcc	.+4      	; 0xae6 <strtoul+0x174>
     ae2:	4f ef       	ldi	r20, 0xFF	; 255
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <strtoul+0x176>
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	21 96       	adiw	r28, 0x01	; 1
     aea:	10 81       	ld	r17, Z
     aec:	c8 cf       	rjmp	.-112    	; 0xa7e <strtoul+0x10c>
     aee:	c1 14       	cp	r12, r1
     af0:	d1 04       	cpc	r13, r1
     af2:	51 f0       	breq	.+20     	; 0xb08 <strtoul+0x196>
     af4:	44 23       	and	r20, r20
     af6:	11 f0       	breq	.+4      	; 0xafc <strtoul+0x18a>
     af8:	21 97       	sbiw	r28, 0x01	; 1
     afa:	03 c0       	rjmp	.+6      	; 0xb02 <strtoul+0x190>
     afc:	01 ff       	sbrs	r16, 1
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <strtoul+0x196>
     b00:	22 97       	sbiw	r28, 0x02	; 2
     b02:	f6 01       	movw	r30, r12
     b04:	c0 83       	st	Z, r28
     b06:	d1 83       	std	Z+1, r29	; 0x01
     b08:	00 ff       	sbrs	r16, 0
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <strtoul+0x1a8>
     b0c:	90 95       	com	r25
     b0e:	80 95       	com	r24
     b10:	70 95       	com	r23
     b12:	61 95       	neg	r22
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	8f 4f       	sbci	r24, 0xFF	; 255
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	4f 3f       	cpi	r20, 0xFF	; 255
     b1c:	79 f4       	brne	.+30     	; 0xb3c <strtoul+0x1ca>
     b1e:	82 e2       	ldi	r24, 0x22	; 34
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	80 93 0d 29 	sts	0x290D, r24	; 0x80290d <errno>
     b26:	90 93 0e 29 	sts	0x290E, r25	; 0x80290e <errno+0x1>
     b2a:	3f ef       	ldi	r19, 0xFF	; 255
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	0d c0       	rjmp	.+26     	; 0xb4c <strtoul+0x1da>
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	08 c0       	rjmp	.+16     	; 0xb4c <strtoul+0x1da>
     b3c:	46 2f       	mov	r20, r22
     b3e:	37 2f       	mov	r19, r23
     b40:	28 2f       	mov	r18, r24
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <strtoul+0x1da>
     b44:	10 33       	cpi	r17, 0x30	; 48
     b46:	09 f0       	breq	.+2      	; 0xb4a <strtoul+0x1d8>
     b48:	67 cf       	rjmp	.-306    	; 0xa18 <strtoul+0xa6>
     b4a:	5f cf       	rjmp	.-322    	; 0xa0a <strtoul+0x98>
     b4c:	64 2f       	mov	r22, r20
     b4e:	73 2f       	mov	r23, r19
     b50:	82 2f       	mov	r24, r18
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	e1 e1       	ldi	r30, 0x11	; 17
     b58:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__epilogue_restores__+0x2>

00000b5c <isspace>:
     b5c:	91 11       	cpse	r25, r1
     b5e:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__ctype_isfalse>
     b62:	80 32       	cpi	r24, 0x20	; 32
     b64:	19 f0       	breq	.+6      	; 0xb6c <isspace+0x10>
     b66:	89 50       	subi	r24, 0x09	; 9
     b68:	85 50       	subi	r24, 0x05	; 5
     b6a:	c8 f7       	brcc	.-14     	; 0xb5e <isspace+0x2>
     b6c:	08 95       	ret

00000b6e <strtok>:
     b6e:	40 e1       	ldi	r20, 0x10	; 16
     b70:	58 e2       	ldi	r21, 0x28	; 40
     b72:	0e 94 d0 05 	call	0xba0	; 0xba0 <strtok_r>
     b76:	08 95       	ret

00000b78 <strchr>:
     b78:	fc 01       	movw	r30, r24
     b7a:	81 91       	ld	r24, Z+
     b7c:	86 17       	cp	r24, r22
     b7e:	21 f0       	breq	.+8      	; 0xb88 <strchr+0x10>
     b80:	88 23       	and	r24, r24
     b82:	d9 f7       	brne	.-10     	; 0xb7a <strchr+0x2>
     b84:	99 27       	eor	r25, r25
     b86:	08 95       	ret
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	cf 01       	movw	r24, r30
     b8c:	08 95       	ret

00000b8e <strcmp>:
     b8e:	fb 01       	movw	r30, r22
     b90:	dc 01       	movw	r26, r24
     b92:	8d 91       	ld	r24, X+
     b94:	01 90       	ld	r0, Z+
     b96:	80 19       	sub	r24, r0
     b98:	01 10       	cpse	r0, r1
     b9a:	d9 f3       	breq	.-10     	; 0xb92 <strcmp+0x4>
     b9c:	99 0b       	sbc	r25, r25
     b9e:	08 95       	ret

00000ba0 <strtok_r>:
     ba0:	fa 01       	movw	r30, r20
     ba2:	a1 91       	ld	r26, Z+
     ba4:	b0 81       	ld	r27, Z
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <strtok_r+0x10>
     baa:	10 97       	sbiw	r26, 0x00	; 0
     bac:	e1 f0       	breq	.+56     	; 0xbe6 <strtok_r+0x46>
     bae:	cd 01       	movw	r24, r26
     bb0:	dc 01       	movw	r26, r24
     bb2:	cd 01       	movw	r24, r26
     bb4:	0d 90       	ld	r0, X+
     bb6:	00 20       	and	r0, r0
     bb8:	11 f4       	brne	.+4      	; 0xbbe <strtok_r+0x1e>
     bba:	c0 01       	movw	r24, r0
     bbc:	13 c0       	rjmp	.+38     	; 0xbe4 <strtok_r+0x44>
     bbe:	fb 01       	movw	r30, r22
     bc0:	21 91       	ld	r18, Z+
     bc2:	22 23       	and	r18, r18
     bc4:	19 f0       	breq	.+6      	; 0xbcc <strtok_r+0x2c>
     bc6:	20 15       	cp	r18, r0
     bc8:	d9 f7       	brne	.-10     	; 0xbc0 <strtok_r+0x20>
     bca:	f3 cf       	rjmp	.-26     	; 0xbb2 <strtok_r+0x12>
     bcc:	fb 01       	movw	r30, r22
     bce:	21 91       	ld	r18, Z+
     bd0:	20 15       	cp	r18, r0
     bd2:	19 f4       	brne	.+6      	; 0xbda <strtok_r+0x3a>
     bd4:	1e 92       	st	-X, r1
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <strtok_r+0x46>
     bda:	22 23       	and	r18, r18
     bdc:	c1 f7       	brne	.-16     	; 0xbce <strtok_r+0x2e>
     bde:	0d 90       	ld	r0, X+
     be0:	00 20       	and	r0, r0
     be2:	a1 f7       	brne	.-24     	; 0xbcc <strtok_r+0x2c>
     be4:	d0 01       	movw	r26, r0
     be6:	fa 01       	movw	r30, r20
     be8:	a1 93       	st	Z+, r26
     bea:	b0 83       	st	Z, r27
     bec:	08 95       	ret

00000bee <printf>:
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	ed ef       	ldi	r30, 0xFD	; 253
     bf4:	f5 e0       	ldi	r31, 0x05	; 5
     bf6:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__prologue_saves__+0x20>
     bfa:	ae 01       	movw	r20, r28
     bfc:	4b 5f       	subi	r20, 0xFB	; 251
     bfe:	5f 4f       	sbci	r21, 0xFF	; 255
     c00:	fa 01       	movw	r30, r20
     c02:	61 91       	ld	r22, Z+
     c04:	71 91       	ld	r23, Z+
     c06:	af 01       	movw	r20, r30
     c08:	80 91 09 29 	lds	r24, 0x2909	; 0x802909 <__iob+0x2>
     c0c:	90 91 0a 29 	lds	r25, 0x290A	; 0x80290a <__iob+0x3>
     c10:	0e 94 6d 06 	call	0xcda	; 0xcda <vfprintf>
     c14:	e2 e0       	ldi	r30, 0x02	; 2
     c16:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__epilogue_restores__+0x20>

00000c1a <puts>:
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	e0 91 09 29 	lds	r30, 0x2909	; 0x802909 <__iob+0x2>
     c26:	f0 91 0a 29 	lds	r31, 0x290A	; 0x80290a <__iob+0x3>
     c2a:	23 81       	ldd	r18, Z+3	; 0x03
     c2c:	21 ff       	sbrs	r18, 1
     c2e:	1b c0       	rjmp	.+54     	; 0xc66 <puts+0x4c>
     c30:	8c 01       	movw	r16, r24
     c32:	d0 e0       	ldi	r29, 0x00	; 0
     c34:	c0 e0       	ldi	r28, 0x00	; 0
     c36:	f8 01       	movw	r30, r16
     c38:	81 91       	ld	r24, Z+
     c3a:	8f 01       	movw	r16, r30
     c3c:	60 91 09 29 	lds	r22, 0x2909	; 0x802909 <__iob+0x2>
     c40:	70 91 0a 29 	lds	r23, 0x290A	; 0x80290a <__iob+0x3>
     c44:	db 01       	movw	r26, r22
     c46:	18 96       	adiw	r26, 0x08	; 8
     c48:	ed 91       	ld	r30, X+
     c4a:	fc 91       	ld	r31, X
     c4c:	19 97       	sbiw	r26, 0x09	; 9
     c4e:	88 23       	and	r24, r24
     c50:	31 f0       	breq	.+12     	; 0xc5e <puts+0x44>
     c52:	09 95       	icall
     c54:	89 2b       	or	r24, r25
     c56:	79 f3       	breq	.-34     	; 0xc36 <puts+0x1c>
     c58:	df ef       	ldi	r29, 0xFF	; 255
     c5a:	cf ef       	ldi	r28, 0xFF	; 255
     c5c:	ec cf       	rjmp	.-40     	; 0xc36 <puts+0x1c>
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	09 95       	icall
     c62:	89 2b       	or	r24, r25
     c64:	19 f0       	breq	.+6      	; 0xc6c <puts+0x52>
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <puts+0x56>
     c6c:	8d 2f       	mov	r24, r29
     c6e:	9c 2f       	mov	r25, r28
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <snprintf>:
     c7a:	ae e0       	ldi	r26, 0x0E	; 14
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e3 e4       	ldi	r30, 0x43	; 67
     c80:	f6 e0       	ldi	r31, 0x06	; 6
     c82:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__prologue_saves__+0x1c>
     c86:	0d 89       	ldd	r16, Y+21	; 0x15
     c88:	1e 89       	ldd	r17, Y+22	; 0x16
     c8a:	8f 89       	ldd	r24, Y+23	; 0x17
     c8c:	98 8d       	ldd	r25, Y+24	; 0x18
     c8e:	26 e0       	ldi	r18, 0x06	; 6
     c90:	2c 83       	std	Y+4, r18	; 0x04
     c92:	09 83       	std	Y+1, r16	; 0x01
     c94:	1a 83       	std	Y+2, r17	; 0x02
     c96:	97 ff       	sbrs	r25, 7
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <snprintf+0x24>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e8       	ldi	r25, 0x80	; 128
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	ae 01       	movw	r20, r28
     ca6:	45 5e       	subi	r20, 0xE5	; 229
     ca8:	5f 4f       	sbci	r21, 0xFF	; 255
     caa:	69 8d       	ldd	r22, Y+25	; 0x19
     cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 6d 06 	call	0xcda	; 0xcda <vfprintf>
     cb6:	4d 81       	ldd	r20, Y+5	; 0x05
     cb8:	5e 81       	ldd	r21, Y+6	; 0x06
     cba:	57 fd       	sbrc	r21, 7
     cbc:	0a c0       	rjmp	.+20     	; 0xcd2 <snprintf+0x58>
     cbe:	2f 81       	ldd	r18, Y+7	; 0x07
     cc0:	38 85       	ldd	r19, Y+8	; 0x08
     cc2:	42 17       	cp	r20, r18
     cc4:	53 07       	cpc	r21, r19
     cc6:	0c f4       	brge	.+2      	; 0xcca <snprintf+0x50>
     cc8:	9a 01       	movw	r18, r20
     cca:	f8 01       	movw	r30, r16
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	10 82       	st	Z, r1
     cd2:	2e 96       	adiw	r28, 0x0e	; 14
     cd4:	e4 e0       	ldi	r30, 0x04	; 4
     cd6:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__epilogue_restores__+0x1c>

00000cda <vfprintf>:
     cda:	ab e0       	ldi	r26, 0x0B	; 11
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e7       	ldi	r30, 0x73	; 115
     ce0:	f6 e0       	ldi	r31, 0x06	; 6
     ce2:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__prologue_saves__>
     ce6:	6c 01       	movw	r12, r24
     ce8:	7b 01       	movw	r14, r22
     cea:	8a 01       	movw	r16, r20
     cec:	fc 01       	movw	r30, r24
     cee:	16 82       	std	Z+6, r1	; 0x06
     cf0:	17 82       	std	Z+7, r1	; 0x07
     cf2:	83 81       	ldd	r24, Z+3	; 0x03
     cf4:	81 ff       	sbrs	r24, 1
     cf6:	cc c1       	rjmp	.+920    	; 0x1090 <vfprintf+0x3b6>
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	3c 01       	movw	r6, r24
     cfe:	f6 01       	movw	r30, r12
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	f7 01       	movw	r30, r14
     d04:	93 fd       	sbrc	r25, 3
     d06:	85 91       	lpm	r24, Z+
     d08:	93 ff       	sbrs	r25, 3
     d0a:	81 91       	ld	r24, Z+
     d0c:	7f 01       	movw	r14, r30
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <vfprintf+0x3a>
     d12:	ba c1       	rjmp	.+884    	; 0x1088 <vfprintf+0x3ae>
     d14:	85 32       	cpi	r24, 0x25	; 37
     d16:	39 f4       	brne	.+14     	; 0xd26 <vfprintf+0x4c>
     d18:	93 fd       	sbrc	r25, 3
     d1a:	85 91       	lpm	r24, Z+
     d1c:	93 ff       	sbrs	r25, 3
     d1e:	81 91       	ld	r24, Z+
     d20:	7f 01       	movw	r14, r30
     d22:	85 32       	cpi	r24, 0x25	; 37
     d24:	29 f4       	brne	.+10     	; 0xd30 <vfprintf+0x56>
     d26:	b6 01       	movw	r22, r12
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
     d2e:	e7 cf       	rjmp	.-50     	; 0xcfe <vfprintf+0x24>
     d30:	91 2c       	mov	r9, r1
     d32:	21 2c       	mov	r2, r1
     d34:	31 2c       	mov	r3, r1
     d36:	ff e1       	ldi	r31, 0x1F	; 31
     d38:	f3 15       	cp	r31, r3
     d3a:	d8 f0       	brcs	.+54     	; 0xd72 <vfprintf+0x98>
     d3c:	8b 32       	cpi	r24, 0x2B	; 43
     d3e:	79 f0       	breq	.+30     	; 0xd5e <vfprintf+0x84>
     d40:	38 f4       	brcc	.+14     	; 0xd50 <vfprintf+0x76>
     d42:	80 32       	cpi	r24, 0x20	; 32
     d44:	79 f0       	breq	.+30     	; 0xd64 <vfprintf+0x8a>
     d46:	83 32       	cpi	r24, 0x23	; 35
     d48:	a1 f4       	brne	.+40     	; 0xd72 <vfprintf+0x98>
     d4a:	23 2d       	mov	r18, r3
     d4c:	20 61       	ori	r18, 0x10	; 16
     d4e:	1d c0       	rjmp	.+58     	; 0xd8a <vfprintf+0xb0>
     d50:	8d 32       	cpi	r24, 0x2D	; 45
     d52:	61 f0       	breq	.+24     	; 0xd6c <vfprintf+0x92>
     d54:	80 33       	cpi	r24, 0x30	; 48
     d56:	69 f4       	brne	.+26     	; 0xd72 <vfprintf+0x98>
     d58:	23 2d       	mov	r18, r3
     d5a:	21 60       	ori	r18, 0x01	; 1
     d5c:	16 c0       	rjmp	.+44     	; 0xd8a <vfprintf+0xb0>
     d5e:	83 2d       	mov	r24, r3
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	38 2e       	mov	r3, r24
     d64:	e3 2d       	mov	r30, r3
     d66:	e4 60       	ori	r30, 0x04	; 4
     d68:	3e 2e       	mov	r3, r30
     d6a:	2a c0       	rjmp	.+84     	; 0xdc0 <vfprintf+0xe6>
     d6c:	f3 2d       	mov	r31, r3
     d6e:	f8 60       	ori	r31, 0x08	; 8
     d70:	1d c0       	rjmp	.+58     	; 0xdac <vfprintf+0xd2>
     d72:	37 fc       	sbrc	r3, 7
     d74:	2d c0       	rjmp	.+90     	; 0xdd0 <vfprintf+0xf6>
     d76:	20 ed       	ldi	r18, 0xD0	; 208
     d78:	28 0f       	add	r18, r24
     d7a:	2a 30       	cpi	r18, 0x0A	; 10
     d7c:	40 f0       	brcs	.+16     	; 0xd8e <vfprintf+0xb4>
     d7e:	8e 32       	cpi	r24, 0x2E	; 46
     d80:	b9 f4       	brne	.+46     	; 0xdb0 <vfprintf+0xd6>
     d82:	36 fc       	sbrc	r3, 6
     d84:	81 c1       	rjmp	.+770    	; 0x1088 <vfprintf+0x3ae>
     d86:	23 2d       	mov	r18, r3
     d88:	20 64       	ori	r18, 0x40	; 64
     d8a:	32 2e       	mov	r3, r18
     d8c:	19 c0       	rjmp	.+50     	; 0xdc0 <vfprintf+0xe6>
     d8e:	36 fe       	sbrs	r3, 6
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <vfprintf+0xc4>
     d92:	8a e0       	ldi	r24, 0x0A	; 10
     d94:	98 9e       	mul	r9, r24
     d96:	20 0d       	add	r18, r0
     d98:	11 24       	eor	r1, r1
     d9a:	92 2e       	mov	r9, r18
     d9c:	11 c0       	rjmp	.+34     	; 0xdc0 <vfprintf+0xe6>
     d9e:	ea e0       	ldi	r30, 0x0A	; 10
     da0:	2e 9e       	mul	r2, r30
     da2:	20 0d       	add	r18, r0
     da4:	11 24       	eor	r1, r1
     da6:	22 2e       	mov	r2, r18
     da8:	f3 2d       	mov	r31, r3
     daa:	f0 62       	ori	r31, 0x20	; 32
     dac:	3f 2e       	mov	r3, r31
     dae:	08 c0       	rjmp	.+16     	; 0xdc0 <vfprintf+0xe6>
     db0:	8c 36       	cpi	r24, 0x6C	; 108
     db2:	21 f4       	brne	.+8      	; 0xdbc <vfprintf+0xe2>
     db4:	83 2d       	mov	r24, r3
     db6:	80 68       	ori	r24, 0x80	; 128
     db8:	38 2e       	mov	r3, r24
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <vfprintf+0xe6>
     dbc:	88 36       	cpi	r24, 0x68	; 104
     dbe:	41 f4       	brne	.+16     	; 0xdd0 <vfprintf+0xf6>
     dc0:	f7 01       	movw	r30, r14
     dc2:	93 fd       	sbrc	r25, 3
     dc4:	85 91       	lpm	r24, Z+
     dc6:	93 ff       	sbrs	r25, 3
     dc8:	81 91       	ld	r24, Z+
     dca:	7f 01       	movw	r14, r30
     dcc:	81 11       	cpse	r24, r1
     dce:	b3 cf       	rjmp	.-154    	; 0xd36 <vfprintf+0x5c>
     dd0:	98 2f       	mov	r25, r24
     dd2:	9f 7d       	andi	r25, 0xDF	; 223
     dd4:	95 54       	subi	r25, 0x45	; 69
     dd6:	93 30       	cpi	r25, 0x03	; 3
     dd8:	28 f4       	brcc	.+10     	; 0xde4 <vfprintf+0x10a>
     dda:	0c 5f       	subi	r16, 0xFC	; 252
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	9f e3       	ldi	r25, 0x3F	; 63
     de0:	99 83       	std	Y+1, r25	; 0x01
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <vfprintf+0x124>
     de4:	83 36       	cpi	r24, 0x63	; 99
     de6:	31 f0       	breq	.+12     	; 0xdf4 <vfprintf+0x11a>
     de8:	83 37       	cpi	r24, 0x73	; 115
     dea:	71 f0       	breq	.+28     	; 0xe08 <vfprintf+0x12e>
     dec:	83 35       	cpi	r24, 0x53	; 83
     dee:	09 f0       	breq	.+2      	; 0xdf2 <vfprintf+0x118>
     df0:	59 c0       	rjmp	.+178    	; 0xea4 <vfprintf+0x1ca>
     df2:	21 c0       	rjmp	.+66     	; 0xe36 <vfprintf+0x15c>
     df4:	f8 01       	movw	r30, r16
     df6:	80 81       	ld	r24, Z
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	0e 5f       	subi	r16, 0xFE	; 254
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	88 24       	eor	r8, r8
     e00:	83 94       	inc	r8
     e02:	91 2c       	mov	r9, r1
     e04:	53 01       	movw	r10, r6
     e06:	13 c0       	rjmp	.+38     	; 0xe2e <vfprintf+0x154>
     e08:	28 01       	movw	r4, r16
     e0a:	f2 e0       	ldi	r31, 0x02	; 2
     e0c:	4f 0e       	add	r4, r31
     e0e:	51 1c       	adc	r5, r1
     e10:	f8 01       	movw	r30, r16
     e12:	a0 80       	ld	r10, Z
     e14:	b1 80       	ldd	r11, Z+1	; 0x01
     e16:	36 fe       	sbrs	r3, 6
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <vfprintf+0x146>
     e1a:	69 2d       	mov	r22, r9
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <vfprintf+0x14a>
     e20:	6f ef       	ldi	r22, 0xFF	; 255
     e22:	7f ef       	ldi	r23, 0xFF	; 255
     e24:	c5 01       	movw	r24, r10
     e26:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <strnlen>
     e2a:	4c 01       	movw	r8, r24
     e2c:	82 01       	movw	r16, r4
     e2e:	f3 2d       	mov	r31, r3
     e30:	ff 77       	andi	r31, 0x7F	; 127
     e32:	3f 2e       	mov	r3, r31
     e34:	16 c0       	rjmp	.+44     	; 0xe62 <vfprintf+0x188>
     e36:	28 01       	movw	r4, r16
     e38:	22 e0       	ldi	r18, 0x02	; 2
     e3a:	42 0e       	add	r4, r18
     e3c:	51 1c       	adc	r5, r1
     e3e:	f8 01       	movw	r30, r16
     e40:	a0 80       	ld	r10, Z
     e42:	b1 80       	ldd	r11, Z+1	; 0x01
     e44:	36 fe       	sbrs	r3, 6
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <vfprintf+0x174>
     e48:	69 2d       	mov	r22, r9
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <vfprintf+0x178>
     e4e:	6f ef       	ldi	r22, 0xFF	; 255
     e50:	7f ef       	ldi	r23, 0xFF	; 255
     e52:	c5 01       	movw	r24, r10
     e54:	0e 94 51 08 	call	0x10a2	; 0x10a2 <strnlen_P>
     e58:	4c 01       	movw	r8, r24
     e5a:	f3 2d       	mov	r31, r3
     e5c:	f0 68       	ori	r31, 0x80	; 128
     e5e:	3f 2e       	mov	r3, r31
     e60:	82 01       	movw	r16, r4
     e62:	33 fc       	sbrc	r3, 3
     e64:	1b c0       	rjmp	.+54     	; 0xe9c <vfprintf+0x1c2>
     e66:	82 2d       	mov	r24, r2
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	88 16       	cp	r8, r24
     e6c:	99 06       	cpc	r9, r25
     e6e:	b0 f4       	brcc	.+44     	; 0xe9c <vfprintf+0x1c2>
     e70:	b6 01       	movw	r22, r12
     e72:	80 e2       	ldi	r24, 0x20	; 32
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
     e7a:	2a 94       	dec	r2
     e7c:	f4 cf       	rjmp	.-24     	; 0xe66 <vfprintf+0x18c>
     e7e:	f5 01       	movw	r30, r10
     e80:	37 fc       	sbrc	r3, 7
     e82:	85 91       	lpm	r24, Z+
     e84:	37 fe       	sbrs	r3, 7
     e86:	81 91       	ld	r24, Z+
     e88:	5f 01       	movw	r10, r30
     e8a:	b6 01       	movw	r22, r12
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
     e92:	21 10       	cpse	r2, r1
     e94:	2a 94       	dec	r2
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	82 1a       	sub	r8, r18
     e9a:	91 08       	sbc	r9, r1
     e9c:	81 14       	cp	r8, r1
     e9e:	91 04       	cpc	r9, r1
     ea0:	71 f7       	brne	.-36     	; 0xe7e <vfprintf+0x1a4>
     ea2:	e8 c0       	rjmp	.+464    	; 0x1074 <vfprintf+0x39a>
     ea4:	84 36       	cpi	r24, 0x64	; 100
     ea6:	11 f0       	breq	.+4      	; 0xeac <vfprintf+0x1d2>
     ea8:	89 36       	cpi	r24, 0x69	; 105
     eaa:	41 f5       	brne	.+80     	; 0xefc <vfprintf+0x222>
     eac:	f8 01       	movw	r30, r16
     eae:	37 fe       	sbrs	r3, 7
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <vfprintf+0x1e6>
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	0c 5f       	subi	r16, 0xFC	; 252
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <vfprintf+0x1f6>
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	07 2e       	mov	r0, r23
     ec6:	00 0c       	add	r0, r0
     ec8:	88 0b       	sbc	r24, r24
     eca:	99 0b       	sbc	r25, r25
     ecc:	0e 5f       	subi	r16, 0xFE	; 254
     ece:	1f 4f       	sbci	r17, 0xFF	; 255
     ed0:	f3 2d       	mov	r31, r3
     ed2:	ff 76       	andi	r31, 0x6F	; 111
     ed4:	3f 2e       	mov	r3, r31
     ed6:	97 ff       	sbrs	r25, 7
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <vfprintf+0x212>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	f0 68       	ori	r31, 0x80	; 128
     eea:	3f 2e       	mov	r3, r31
     eec:	2a e0       	ldi	r18, 0x0A	; 10
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	a3 01       	movw	r20, r6
     ef2:	0e 94 a3 08 	call	0x1146	; 0x1146 <__ultoa_invert>
     ef6:	88 2e       	mov	r8, r24
     ef8:	86 18       	sub	r8, r6
     efa:	45 c0       	rjmp	.+138    	; 0xf86 <vfprintf+0x2ac>
     efc:	85 37       	cpi	r24, 0x75	; 117
     efe:	31 f4       	brne	.+12     	; 0xf0c <vfprintf+0x232>
     f00:	23 2d       	mov	r18, r3
     f02:	2f 7e       	andi	r18, 0xEF	; 239
     f04:	b2 2e       	mov	r11, r18
     f06:	2a e0       	ldi	r18, 0x0A	; 10
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <vfprintf+0x27c>
     f0c:	93 2d       	mov	r25, r3
     f0e:	99 7f       	andi	r25, 0xF9	; 249
     f10:	b9 2e       	mov	r11, r25
     f12:	8f 36       	cpi	r24, 0x6F	; 111
     f14:	c1 f0       	breq	.+48     	; 0xf46 <vfprintf+0x26c>
     f16:	18 f4       	brcc	.+6      	; 0xf1e <vfprintf+0x244>
     f18:	88 35       	cpi	r24, 0x58	; 88
     f1a:	79 f0       	breq	.+30     	; 0xf3a <vfprintf+0x260>
     f1c:	b5 c0       	rjmp	.+362    	; 0x1088 <vfprintf+0x3ae>
     f1e:	80 37       	cpi	r24, 0x70	; 112
     f20:	19 f0       	breq	.+6      	; 0xf28 <vfprintf+0x24e>
     f22:	88 37       	cpi	r24, 0x78	; 120
     f24:	21 f0       	breq	.+8      	; 0xf2e <vfprintf+0x254>
     f26:	b0 c0       	rjmp	.+352    	; 0x1088 <vfprintf+0x3ae>
     f28:	e9 2f       	mov	r30, r25
     f2a:	e0 61       	ori	r30, 0x10	; 16
     f2c:	be 2e       	mov	r11, r30
     f2e:	b4 fe       	sbrs	r11, 4
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <vfprintf+0x272>
     f32:	fb 2d       	mov	r31, r11
     f34:	f4 60       	ori	r31, 0x04	; 4
     f36:	bf 2e       	mov	r11, r31
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <vfprintf+0x272>
     f3a:	34 fe       	sbrs	r3, 4
     f3c:	0a c0       	rjmp	.+20     	; 0xf52 <vfprintf+0x278>
     f3e:	29 2f       	mov	r18, r25
     f40:	26 60       	ori	r18, 0x06	; 6
     f42:	b2 2e       	mov	r11, r18
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0x278>
     f46:	28 e0       	ldi	r18, 0x08	; 8
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <vfprintf+0x27c>
     f4c:	20 e1       	ldi	r18, 0x10	; 16
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x27c>
     f52:	20 e1       	ldi	r18, 0x10	; 16
     f54:	32 e0       	ldi	r19, 0x02	; 2
     f56:	f8 01       	movw	r30, r16
     f58:	b7 fe       	sbrs	r11, 7
     f5a:	07 c0       	rjmp	.+14     	; 0xf6a <vfprintf+0x290>
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	0c 5f       	subi	r16, 0xFC	; 252
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <vfprintf+0x29c>
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 5f       	subi	r16, 0xFE	; 254
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	a3 01       	movw	r20, r6
     f78:	0e 94 a3 08 	call	0x1146	; 0x1146 <__ultoa_invert>
     f7c:	88 2e       	mov	r8, r24
     f7e:	86 18       	sub	r8, r6
     f80:	fb 2d       	mov	r31, r11
     f82:	ff 77       	andi	r31, 0x7F	; 127
     f84:	3f 2e       	mov	r3, r31
     f86:	36 fe       	sbrs	r3, 6
     f88:	0d c0       	rjmp	.+26     	; 0xfa4 <vfprintf+0x2ca>
     f8a:	23 2d       	mov	r18, r3
     f8c:	2e 7f       	andi	r18, 0xFE	; 254
     f8e:	a2 2e       	mov	r10, r18
     f90:	89 14       	cp	r8, r9
     f92:	58 f4       	brcc	.+22     	; 0xfaa <vfprintf+0x2d0>
     f94:	34 fe       	sbrs	r3, 4
     f96:	0b c0       	rjmp	.+22     	; 0xfae <vfprintf+0x2d4>
     f98:	32 fc       	sbrc	r3, 2
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <vfprintf+0x2d4>
     f9c:	83 2d       	mov	r24, r3
     f9e:	8e 7e       	andi	r24, 0xEE	; 238
     fa0:	a8 2e       	mov	r10, r24
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <vfprintf+0x2d4>
     fa4:	b8 2c       	mov	r11, r8
     fa6:	a3 2c       	mov	r10, r3
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <vfprintf+0x2d6>
     faa:	b8 2c       	mov	r11, r8
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <vfprintf+0x2d6>
     fae:	b9 2c       	mov	r11, r9
     fb0:	a4 fe       	sbrs	r10, 4
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <vfprintf+0x2f8>
     fb4:	fe 01       	movw	r30, r28
     fb6:	e8 0d       	add	r30, r8
     fb8:	f1 1d       	adc	r31, r1
     fba:	80 81       	ld	r24, Z
     fbc:	80 33       	cpi	r24, 0x30	; 48
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <vfprintf+0x2ee>
     fc0:	9a 2d       	mov	r25, r10
     fc2:	99 7e       	andi	r25, 0xE9	; 233
     fc4:	a9 2e       	mov	r10, r25
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <vfprintf+0x300>
     fc8:	a2 fe       	sbrs	r10, 2
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <vfprintf+0x2fe>
     fcc:	b3 94       	inc	r11
     fce:	b3 94       	inc	r11
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <vfprintf+0x300>
     fd2:	8a 2d       	mov	r24, r10
     fd4:	86 78       	andi	r24, 0x86	; 134
     fd6:	09 f0       	breq	.+2      	; 0xfda <vfprintf+0x300>
     fd8:	b3 94       	inc	r11
     fda:	a3 fc       	sbrc	r10, 3
     fdc:	11 c0       	rjmp	.+34     	; 0x1000 <vfprintf+0x326>
     fde:	a0 fe       	sbrs	r10, 0
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <vfprintf+0x314>
     fe2:	b2 14       	cp	r11, r2
     fe4:	88 f4       	brcc	.+34     	; 0x1008 <vfprintf+0x32e>
     fe6:	28 0c       	add	r2, r8
     fe8:	92 2c       	mov	r9, r2
     fea:	9b 18       	sub	r9, r11
     fec:	0e c0       	rjmp	.+28     	; 0x100a <vfprintf+0x330>
     fee:	b2 14       	cp	r11, r2
     ff0:	60 f4       	brcc	.+24     	; 0x100a <vfprintf+0x330>
     ff2:	b6 01       	movw	r22, r12
     ff4:	80 e2       	ldi	r24, 0x20	; 32
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
     ffc:	b3 94       	inc	r11
     ffe:	f7 cf       	rjmp	.-18     	; 0xfee <vfprintf+0x314>
    1000:	b2 14       	cp	r11, r2
    1002:	18 f4       	brcc	.+6      	; 0x100a <vfprintf+0x330>
    1004:	2b 18       	sub	r2, r11
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0x332>
    1008:	98 2c       	mov	r9, r8
    100a:	21 2c       	mov	r2, r1
    100c:	a4 fe       	sbrs	r10, 4
    100e:	10 c0       	rjmp	.+32     	; 0x1030 <vfprintf+0x356>
    1010:	b6 01       	movw	r22, r12
    1012:	80 e3       	ldi	r24, 0x30	; 48
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
    101a:	a2 fe       	sbrs	r10, 2
    101c:	17 c0       	rjmp	.+46     	; 0x104c <vfprintf+0x372>
    101e:	a1 fc       	sbrc	r10, 1
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <vfprintf+0x34e>
    1022:	88 e7       	ldi	r24, 0x78	; 120
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfprintf+0x352>
    1028:	88 e5       	ldi	r24, 0x58	; 88
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	b6 01       	movw	r22, r12
    102e:	0c c0       	rjmp	.+24     	; 0x1048 <vfprintf+0x36e>
    1030:	8a 2d       	mov	r24, r10
    1032:	86 78       	andi	r24, 0x86	; 134
    1034:	59 f0       	breq	.+22     	; 0x104c <vfprintf+0x372>
    1036:	a1 fe       	sbrs	r10, 1
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0x364>
    103a:	8b e2       	ldi	r24, 0x2B	; 43
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <vfprintf+0x366>
    103e:	80 e2       	ldi	r24, 0x20	; 32
    1040:	a7 fc       	sbrc	r10, 7
    1042:	8d e2       	ldi	r24, 0x2D	; 45
    1044:	b6 01       	movw	r22, r12
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
    104c:	89 14       	cp	r8, r9
    104e:	38 f4       	brcc	.+14     	; 0x105e <vfprintf+0x384>
    1050:	b6 01       	movw	r22, r12
    1052:	80 e3       	ldi	r24, 0x30	; 48
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
    105a:	9a 94       	dec	r9
    105c:	f7 cf       	rjmp	.-18     	; 0x104c <vfprintf+0x372>
    105e:	8a 94       	dec	r8
    1060:	f3 01       	movw	r30, r6
    1062:	e8 0d       	add	r30, r8
    1064:	f1 1d       	adc	r31, r1
    1066:	80 81       	ld	r24, Z
    1068:	b6 01       	movw	r22, r12
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
    1070:	81 10       	cpse	r8, r1
    1072:	f5 cf       	rjmp	.-22     	; 0x105e <vfprintf+0x384>
    1074:	22 20       	and	r2, r2
    1076:	09 f4       	brne	.+2      	; 0x107a <vfprintf+0x3a0>
    1078:	42 ce       	rjmp	.-892    	; 0xcfe <vfprintf+0x24>
    107a:	b6 01       	movw	r22, r12
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 67 08 	call	0x10ce	; 0x10ce <fputc>
    1084:	2a 94       	dec	r2
    1086:	f6 cf       	rjmp	.-20     	; 0x1074 <vfprintf+0x39a>
    1088:	f6 01       	movw	r30, r12
    108a:	86 81       	ldd	r24, Z+6	; 0x06
    108c:	97 81       	ldd	r25, Z+7	; 0x07
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <vfprintf+0x3ba>
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	9f ef       	ldi	r25, 0xFF	; 255
    1094:	2b 96       	adiw	r28, 0x0b	; 11
    1096:	e2 e1       	ldi	r30, 0x12	; 18
    1098:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__epilogue_restores__>

0000109c <__ctype_isfalse>:
    109c:	99 27       	eor	r25, r25
    109e:	88 27       	eor	r24, r24

000010a0 <__ctype_istrue>:
    10a0:	08 95       	ret

000010a2 <strnlen_P>:
    10a2:	fc 01       	movw	r30, r24
    10a4:	05 90       	lpm	r0, Z+
    10a6:	61 50       	subi	r22, 0x01	; 1
    10a8:	70 40       	sbci	r23, 0x00	; 0
    10aa:	01 10       	cpse	r0, r1
    10ac:	d8 f7       	brcc	.-10     	; 0x10a4 <strnlen_P+0x2>
    10ae:	80 95       	com	r24
    10b0:	90 95       	com	r25
    10b2:	8e 0f       	add	r24, r30
    10b4:	9f 1f       	adc	r25, r31
    10b6:	08 95       	ret

000010b8 <strnlen>:
    10b8:	fc 01       	movw	r30, r24
    10ba:	61 50       	subi	r22, 0x01	; 1
    10bc:	70 40       	sbci	r23, 0x00	; 0
    10be:	01 90       	ld	r0, Z+
    10c0:	01 10       	cpse	r0, r1
    10c2:	d8 f7       	brcc	.-10     	; 0x10ba <strnlen+0x2>
    10c4:	80 95       	com	r24
    10c6:	90 95       	com	r25
    10c8:	8e 0f       	add	r24, r30
    10ca:	9f 1f       	adc	r25, r31
    10cc:	08 95       	ret

000010ce <fputc>:
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	fb 01       	movw	r30, r22
    10d8:	23 81       	ldd	r18, Z+3	; 0x03
    10da:	21 fd       	sbrc	r18, 1
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <fputc+0x16>
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	2c c0       	rjmp	.+88     	; 0x113c <fputc+0x6e>
    10e4:	22 ff       	sbrs	r18, 2
    10e6:	16 c0       	rjmp	.+44     	; 0x1114 <fputc+0x46>
    10e8:	46 81       	ldd	r20, Z+6	; 0x06
    10ea:	57 81       	ldd	r21, Z+7	; 0x07
    10ec:	24 81       	ldd	r18, Z+4	; 0x04
    10ee:	35 81       	ldd	r19, Z+5	; 0x05
    10f0:	42 17       	cp	r20, r18
    10f2:	53 07       	cpc	r21, r19
    10f4:	44 f4       	brge	.+16     	; 0x1106 <fputc+0x38>
    10f6:	a0 81       	ld	r26, Z
    10f8:	b1 81       	ldd	r27, Z+1	; 0x01
    10fa:	9d 01       	movw	r18, r26
    10fc:	2f 5f       	subi	r18, 0xFF	; 255
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	20 83       	st	Z, r18
    1102:	31 83       	std	Z+1, r19	; 0x01
    1104:	8c 93       	st	X, r24
    1106:	26 81       	ldd	r18, Z+6	; 0x06
    1108:	37 81       	ldd	r19, Z+7	; 0x07
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	26 83       	std	Z+6, r18	; 0x06
    1110:	37 83       	std	Z+7, r19	; 0x07
    1112:	14 c0       	rjmp	.+40     	; 0x113c <fputc+0x6e>
    1114:	8b 01       	movw	r16, r22
    1116:	ec 01       	movw	r28, r24
    1118:	fb 01       	movw	r30, r22
    111a:	00 84       	ldd	r0, Z+8	; 0x08
    111c:	f1 85       	ldd	r31, Z+9	; 0x09
    111e:	e0 2d       	mov	r30, r0
    1120:	09 95       	icall
    1122:	89 2b       	or	r24, r25
    1124:	e1 f6       	brne	.-72     	; 0x10de <fputc+0x10>
    1126:	d8 01       	movw	r26, r16
    1128:	16 96       	adiw	r26, 0x06	; 6
    112a:	8d 91       	ld	r24, X+
    112c:	9c 91       	ld	r25, X
    112e:	17 97       	sbiw	r26, 0x07	; 7
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	16 96       	adiw	r26, 0x06	; 6
    1134:	8d 93       	st	X+, r24
    1136:	9c 93       	st	X, r25
    1138:	17 97       	sbiw	r26, 0x07	; 7
    113a:	ce 01       	movw	r24, r28
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <__ultoa_invert>:
    1146:	fa 01       	movw	r30, r20
    1148:	aa 27       	eor	r26, r26
    114a:	28 30       	cpi	r18, 0x08	; 8
    114c:	51 f1       	breq	.+84     	; 0x11a2 <__ultoa_invert+0x5c>
    114e:	20 31       	cpi	r18, 0x10	; 16
    1150:	81 f1       	breq	.+96     	; 0x11b2 <__ultoa_invert+0x6c>
    1152:	e8 94       	clt
    1154:	6f 93       	push	r22
    1156:	6e 7f       	andi	r22, 0xFE	; 254
    1158:	6e 5f       	subi	r22, 0xFE	; 254
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	8f 4f       	sbci	r24, 0xFF	; 255
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	af 4f       	sbci	r26, 0xFF	; 255
    1162:	b1 e0       	ldi	r27, 0x01	; 1
    1164:	3e d0       	rcall	.+124    	; 0x11e2 <__ultoa_invert+0x9c>
    1166:	b4 e0       	ldi	r27, 0x04	; 4
    1168:	3c d0       	rcall	.+120    	; 0x11e2 <__ultoa_invert+0x9c>
    116a:	67 0f       	add	r22, r23
    116c:	78 1f       	adc	r23, r24
    116e:	89 1f       	adc	r24, r25
    1170:	9a 1f       	adc	r25, r26
    1172:	a1 1d       	adc	r26, r1
    1174:	68 0f       	add	r22, r24
    1176:	79 1f       	adc	r23, r25
    1178:	8a 1f       	adc	r24, r26
    117a:	91 1d       	adc	r25, r1
    117c:	a1 1d       	adc	r26, r1
    117e:	6a 0f       	add	r22, r26
    1180:	71 1d       	adc	r23, r1
    1182:	81 1d       	adc	r24, r1
    1184:	91 1d       	adc	r25, r1
    1186:	a1 1d       	adc	r26, r1
    1188:	20 d0       	rcall	.+64     	; 0x11ca <__ultoa_invert+0x84>
    118a:	09 f4       	brne	.+2      	; 0x118e <__ultoa_invert+0x48>
    118c:	68 94       	set
    118e:	3f 91       	pop	r19
    1190:	2a e0       	ldi	r18, 0x0A	; 10
    1192:	26 9f       	mul	r18, r22
    1194:	11 24       	eor	r1, r1
    1196:	30 19       	sub	r19, r0
    1198:	30 5d       	subi	r19, 0xD0	; 208
    119a:	31 93       	st	Z+, r19
    119c:	de f6       	brtc	.-74     	; 0x1154 <__ultoa_invert+0xe>
    119e:	cf 01       	movw	r24, r30
    11a0:	08 95       	ret
    11a2:	46 2f       	mov	r20, r22
    11a4:	47 70       	andi	r20, 0x07	; 7
    11a6:	40 5d       	subi	r20, 0xD0	; 208
    11a8:	41 93       	st	Z+, r20
    11aa:	b3 e0       	ldi	r27, 0x03	; 3
    11ac:	0f d0       	rcall	.+30     	; 0x11cc <__ultoa_invert+0x86>
    11ae:	c9 f7       	brne	.-14     	; 0x11a2 <__ultoa_invert+0x5c>
    11b0:	f6 cf       	rjmp	.-20     	; 0x119e <__ultoa_invert+0x58>
    11b2:	46 2f       	mov	r20, r22
    11b4:	4f 70       	andi	r20, 0x0F	; 15
    11b6:	40 5d       	subi	r20, 0xD0	; 208
    11b8:	4a 33       	cpi	r20, 0x3A	; 58
    11ba:	18 f0       	brcs	.+6      	; 0x11c2 <__ultoa_invert+0x7c>
    11bc:	49 5d       	subi	r20, 0xD9	; 217
    11be:	31 fd       	sbrc	r19, 1
    11c0:	40 52       	subi	r20, 0x20	; 32
    11c2:	41 93       	st	Z+, r20
    11c4:	02 d0       	rcall	.+4      	; 0x11ca <__ultoa_invert+0x84>
    11c6:	a9 f7       	brne	.-22     	; 0x11b2 <__ultoa_invert+0x6c>
    11c8:	ea cf       	rjmp	.-44     	; 0x119e <__ultoa_invert+0x58>
    11ca:	b4 e0       	ldi	r27, 0x04	; 4
    11cc:	a6 95       	lsr	r26
    11ce:	97 95       	ror	r25
    11d0:	87 95       	ror	r24
    11d2:	77 95       	ror	r23
    11d4:	67 95       	ror	r22
    11d6:	ba 95       	dec	r27
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <__ultoa_invert+0x86>
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	61 05       	cpc	r22, r1
    11de:	71 05       	cpc	r23, r1
    11e0:	08 95       	ret
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	0a 2e       	mov	r0, r26
    11e8:	06 94       	lsr	r0
    11ea:	57 95       	ror	r21
    11ec:	47 95       	ror	r20
    11ee:	37 95       	ror	r19
    11f0:	27 95       	ror	r18
    11f2:	ba 95       	dec	r27
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <__ultoa_invert+0xa2>
    11f6:	62 0f       	add	r22, r18
    11f8:	73 1f       	adc	r23, r19
    11fa:	84 1f       	adc	r24, r20
    11fc:	95 1f       	adc	r25, r21
    11fe:	a0 1d       	adc	r26, r0
    1200:	08 95       	ret

00001202 <__mulsi3>:
    1202:	db 01       	movw	r26, r22
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	0e 94 33 09 	call	0x1266	; 0x1266 <__muluhisi3>
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	a2 9f       	mul	r26, r18
    1212:	80 0d       	add	r24, r0
    1214:	91 1d       	adc	r25, r1
    1216:	a3 9f       	mul	r26, r19
    1218:	90 0d       	add	r25, r0
    121a:	b2 9f       	mul	r27, r18
    121c:	90 0d       	add	r25, r0
    121e:	11 24       	eor	r1, r1
    1220:	08 95       	ret

00001222 <__udivmodsi4>:
    1222:	a1 e2       	ldi	r26, 0x21	; 33
    1224:	1a 2e       	mov	r1, r26
    1226:	aa 1b       	sub	r26, r26
    1228:	bb 1b       	sub	r27, r27
    122a:	fd 01       	movw	r30, r26
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <__udivmodsi4_ep>

0000122e <__udivmodsi4_loop>:
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	ee 1f       	adc	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	a2 17       	cp	r26, r18
    1238:	b3 07       	cpc	r27, r19
    123a:	e4 07       	cpc	r30, r20
    123c:	f5 07       	cpc	r31, r21
    123e:	20 f0       	brcs	.+8      	; 0x1248 <__udivmodsi4_ep>
    1240:	a2 1b       	sub	r26, r18
    1242:	b3 0b       	sbc	r27, r19
    1244:	e4 0b       	sbc	r30, r20
    1246:	f5 0b       	sbc	r31, r21

00001248 <__udivmodsi4_ep>:
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a 94       	dec	r1
    1252:	69 f7       	brne	.-38     	; 0x122e <__udivmodsi4_loop>
    1254:	60 95       	com	r22
    1256:	70 95       	com	r23
    1258:	80 95       	com	r24
    125a:	90 95       	com	r25
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	bd 01       	movw	r22, r26
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret

00001266 <__muluhisi3>:
    1266:	0e 94 6f 09 	call	0x12de	; 0x12de <__umulhisi3>
    126a:	a5 9f       	mul	r26, r21
    126c:	90 0d       	add	r25, r0
    126e:	b4 9f       	mul	r27, r20
    1270:	90 0d       	add	r25, r0
    1272:	a4 9f       	mul	r26, r20
    1274:	80 0d       	add	r24, r0
    1276:	91 1d       	adc	r25, r1
    1278:	11 24       	eor	r1, r1
    127a:	08 95       	ret

0000127c <__prologue_saves__>:
    127c:	2f 92       	push	r2
    127e:	3f 92       	push	r3
    1280:	4f 92       	push	r4
    1282:	5f 92       	push	r5
    1284:	6f 92       	push	r6
    1286:	7f 92       	push	r7
    1288:	8f 92       	push	r8
    128a:	9f 92       	push	r9
    128c:	af 92       	push	r10
    128e:	bf 92       	push	r11
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	ca 1b       	sub	r28, r26
    12a6:	db 0b       	sbc	r29, r27
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	09 94       	ijmp

000012ae <__epilogue_restores__>:
    12ae:	2a 88       	ldd	r2, Y+18	; 0x12
    12b0:	39 88       	ldd	r3, Y+17	; 0x11
    12b2:	48 88       	ldd	r4, Y+16	; 0x10
    12b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    12bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12be:	aa 84       	ldd	r10, Y+10	; 0x0a
    12c0:	b9 84       	ldd	r11, Y+9	; 0x09
    12c2:	c8 84       	ldd	r12, Y+8	; 0x08
    12c4:	df 80       	ldd	r13, Y+7	; 0x07
    12c6:	ee 80       	ldd	r14, Y+6	; 0x06
    12c8:	fd 80       	ldd	r15, Y+5	; 0x05
    12ca:	0c 81       	ldd	r16, Y+4	; 0x04
    12cc:	1b 81       	ldd	r17, Y+3	; 0x03
    12ce:	aa 81       	ldd	r26, Y+2	; 0x02
    12d0:	b9 81       	ldd	r27, Y+1	; 0x01
    12d2:	ce 0f       	add	r28, r30
    12d4:	d1 1d       	adc	r29, r1
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	ed 01       	movw	r28, r26
    12dc:	08 95       	ret

000012de <__umulhisi3>:
    12de:	a2 9f       	mul	r26, r18
    12e0:	b0 01       	movw	r22, r0
    12e2:	b3 9f       	mul	r27, r19
    12e4:	c0 01       	movw	r24, r0
    12e6:	a3 9f       	mul	r26, r19
    12e8:	70 0d       	add	r23, r0
    12ea:	81 1d       	adc	r24, r1
    12ec:	11 24       	eor	r1, r1
    12ee:	91 1d       	adc	r25, r1
    12f0:	b2 9f       	mul	r27, r18
    12f2:	70 0d       	add	r23, r0
    12f4:	81 1d       	adc	r24, r1
    12f6:	11 24       	eor	r1, r1
    12f8:	91 1d       	adc	r25, r1
    12fa:	08 95       	ret

000012fc <_exit>:
    12fc:	f8 94       	cli

000012fe <__stop_program>:
    12fe:	ff cf       	rjmp	.-2      	; 0x12fe <__stop_program>
