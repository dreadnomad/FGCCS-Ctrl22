
atmevse_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00802800  00000a57  00000b0b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fd  0000495a  0000095a  00000a0e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000d7  0080280e  0080280e  00000b19  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f28  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025c0  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000733  00000000  00000000  00006138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000154  00000000  00000000  0000686c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000134a  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000436  00000000  00000000  00007d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00008140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e7 e5       	ldi	r30, 0x57	; 87
  a4:	fa e0       	ldi	r31, 0x0A	; 10
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e2       	ldi	r18, 0x28	; 40
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3e       	cpi	r26, 0xE5	; 229
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  c6:	0c 94 ab 04 	jmp	0x956	; 0x956 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <led_toggle>:
        cmd_init();     
    #endif
}

int8_t led_toggle() {
    PORTA.OUTTGL |= PIN6_bm;
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	87 81       	ldd	r24, Z+7	; 0x07
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	87 83       	std	Z+7, r24	; 0x07
    return 0;
}
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret

000000dc <led_on>:

int8_t led_on() {
    PORTA.OUT &= ~PIN6_bm;
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f4 e0       	ldi	r31, 0x04	; 4
  e0:	84 81       	ldd	r24, Z+4	; 0x04
  e2:	8f 7b       	andi	r24, 0xBF	; 191
  e4:	84 83       	std	Z+4, r24	; 0x04
    return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret

000000ea <led_off>:

int8_t led_off() {
    PORTA.OUT |= PIN6_bm;
  ea:	e0 e0       	ldi	r30, 0x00	; 0
  ec:	f4 e0       	ldi	r31, 0x04	; 4
  ee:	84 81       	ldd	r24, Z+4	; 0x04
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	84 83       	std	Z+4, r24	; 0x04
    return 0;
}
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <main>:
/*
    Function definitions
    *************************************************/
static void init() {
    /* control LED init */
    PORTA.DIRSET |= PIN6_bm;
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f4 e0       	ldi	r31, 0x04	; 4
  fc:	81 81       	ldd	r24, Z+1	; 0x01
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	81 83       	std	Z+1, r24	; 0x01
    
    /* uart init */
    #ifdef ATMEVSE_UART
        uart_init();
 102:	0e 94 51 01 	call	0x2a2	; 0x2a2 <uart_init>
    #endif
    
    /* cmd init */
    #ifdef ATMEVSE_CMD
        cmd_init();     
 106:	0e 94 9e 00 	call	0x13c	; 0x13c <cmd_init>
/*
    Application
    *************************************************/
int main(void) {
    init();
    cmd_add("led_on", *led_on);
 10a:	6e e6       	ldi	r22, 0x6E	; 110
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	8c e5       	ldi	r24, 0x5C	; 92
 110:	99 e4       	ldi	r25, 0x49	; 73
 112:	0e 94 b2 00 	call	0x164	; 0x164 <cmd_add>
    cmd_add("led_off", *led_off);
 116:	65 e7       	ldi	r22, 0x75	; 117
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	83 e6       	ldi	r24, 0x63	; 99
 11c:	99 e4       	ldi	r25, 0x49	; 73
 11e:	0e 94 b2 00 	call	0x164	; 0x164 <cmd_add>
    cmd_add("led_toggle", *led_toggle);
 122:	67 e6       	ldi	r22, 0x67	; 103
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	8b e6       	ldi	r24, 0x6B	; 107
 128:	99 e4       	ldi	r25, 0x49	; 73
 12a:	0e 94 b2 00 	call	0x164	; 0x164 <cmd_add>
    led_off();
 12e:	0e 94 75 00 	call	0xea	; 0xea <led_off>
    while (1) {
        char* input = uart0_readLine();
 132:	0e 94 69 01 	call	0x2d2	; 0x2d2 <uart0_readLine>
        cmd_parse(input);
 136:	0e 94 ca 00 	call	0x194	; 0x194 <cmd_parse>
 13a:	fb cf       	rjmp	.-10     	; 0x132 <main+0x3a>

0000013c <cmd_init>:
static volatile cmd_table_t cmd_table[MAX_CMD_NO];

/*
    Function definitions
    *************************************************/
void cmd_init() {                                       // Init command table
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
    for (uint8_t cnt = 0; cnt < MAX_CMD_NO; cnt++) {
        cmd_table[cnt].cmd = "\0";
 140:	2a e5       	ldi	r18, 0x5A	; 90
 142:	39 e4       	ldi	r19, 0x49	; 73
 144:	fc 01       	movw	r30, r24
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e1 5f       	subi	r30, 0xF1	; 241
 150:	f7 4d       	sbci	r31, 0xD7	; 215
 152:	20 83       	st	Z, r18
 154:	31 83       	std	Z+1, r19	; 0x01
        cmd_table[cnt].cmd_func_ptr = NULL;
 156:	12 82       	std	Z+2, r1	; 0x02
 158:	13 82       	std	Z+3, r1	; 0x03
 15a:	01 96       	adiw	r24, 0x01	; 1

/*
    Function definitions
    *************************************************/
void cmd_init() {                                       // Init command table
    for (uint8_t cnt = 0; cnt < MAX_CMD_NO; cnt++) {
 15c:	84 31       	cpi	r24, 0x14	; 20
 15e:	91 05       	cpc	r25, r1
 160:	89 f7       	brne	.-30     	; 0x144 <cmd_init+0x8>
        cmd_table[cnt].cmd = "\0";
        cmd_table[cnt].cmd_func_ptr = NULL;
    }
}
 162:	08 95       	ret

00000164 <cmd_add>:

int8_t cmd_add(char *cmd_string, int8_t (*cmd_func_ptr)()) {
 164:	9c 01       	movw	r18, r24
    static uint8_t cmd_cnt = 0;                         // Keep track of registered commands
    int8_t retval = -1;                                 // ERROR: Return value == -1 -> cmd_table is full
    if (cmd_cnt < MAX_CMD_NO) {
 166:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <__data_end>
 16a:	94 31       	cpi	r25, 0x14	; 20
 16c:	88 f4       	brcc	.+34     	; 0x190 <cmd_add+0x2c>
        cmd_table[cmd_cnt].cmd = cmd_string;            // add command to table
 16e:	e9 2f       	mov	r30, r25
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e1 5f       	subi	r30, 0xF1	; 241
 17c:	f7 4d       	sbci	r31, 0xD7	; 215
 17e:	20 83       	st	Z, r18
 180:	31 83       	std	Z+1, r19	; 0x01
        cmd_table[cmd_cnt].cmd_func_ptr = cmd_func_ptr;
 182:	62 83       	std	Z+2, r22	; 0x02
 184:	73 83       	std	Z+3, r23	; 0x03
        cmd_cnt++;                                      // increment command counter
 186:	9f 5f       	subi	r25, 0xFF	; 255
 188:	90 93 0e 28 	sts	0x280E, r25	; 0x80280e <__data_end>
        retval = 0;                                     // set retval to 0 -> success
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
    }
}

int8_t cmd_add(char *cmd_string, int8_t (*cmd_func_ptr)()) {
    static uint8_t cmd_cnt = 0;                         // Keep track of registered commands
    int8_t retval = -1;                                 // ERROR: Return value == -1 -> cmd_table is full
 190:	8f ef       	ldi	r24, 0xFF	; 255
        cmd_cnt++;                                      // increment command counter
        retval = 0;                                     // set retval to 0 -> success
    }
    
    return retval;    
}
 192:	08 95       	ret

00000194 <cmd_parse>:
        retval = cmd_table[index].cmd_func_ptr();
    }
    return retval;
}

int8_t cmd_parse(char *string) {
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	f8 2e       	mov	r15, r24
 1a2:	e9 2e       	mov	r14, r25
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
    int8_t retval = -1;                                 // set inital return value to -1 -> no valid command
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
        if (strcmp(string, cmd_table[i].cmd) == 0) {
 1a8:	8e 01       	movw	r16, r28
 1aa:	fe 01       	movw	r30, r28
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e1 5f       	subi	r30, 0xF1	; 241
 1b6:	f7 4d       	sbci	r31, 0xD7	; 215
 1b8:	60 81       	ld	r22, Z
 1ba:	71 81       	ldd	r23, Z+1	; 0x01
 1bc:	8f 2d       	mov	r24, r15
 1be:	9e 2d       	mov	r25, r14
 1c0:	0e 94 9a 01 	call	0x334	; 0x334 <strcmp>
 1c4:	89 2b       	or	r24, r25
 1c6:	11 f5       	brne	.+68     	; 0x20c <cmd_parse+0x78>
    return retval;    
}

static int8_t cmd_exec(char *string, uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
    if (cmd_table[index].cmd_func_ptr != NULL) {
 1c8:	fe 01       	movw	r30, r28
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e1 5f       	subi	r30, 0xF1	; 241
 1d4:	f7 4d       	sbci	r31, 0xD7	; 215
 1d6:	82 81       	ldd	r24, Z+2	; 0x02
 1d8:	93 81       	ldd	r25, Z+3	; 0x03
 1da:	89 2b       	or	r24, r25
 1dc:	49 f1       	breq	.+82     	; 0x230 <cmd_parse+0x9c>
        retval = cmd_table[index].cmd_func_ptr();
 1de:	00 0f       	add	r16, r16
 1e0:	11 1f       	adc	r17, r17
 1e2:	00 0f       	add	r16, r16
 1e4:	11 1f       	adc	r17, r17
 1e6:	f8 01       	movw	r30, r16
 1e8:	e1 5f       	subi	r30, 0xF1	; 241
 1ea:	f7 4d       	sbci	r31, 0xD7	; 215
 1ec:	02 80       	ldd	r0, Z+2	; 0x02
 1ee:	f3 81       	ldd	r31, Z+3	; 0x03
 1f0:	e0 2d       	mov	r30, r0
 1f2:	09 95       	icall
 1f4:	c8 2f       	mov	r28, r24
        if (strcmp(string, cmd_table[i].cmd) == 0) {
            retval = cmd_exec(string, i);
            i = MAX_CMD_NO;                             // exit loop
        }
    } 
    switch (retval) {                                   // select appropriate feedback to return
 1f6:	8e 3f       	cpi	r24, 0xFE	; 254
 1f8:	e1 f0       	breq	.+56     	; 0x232 <cmd_parse+0x9e>
 1fa:	1c f4       	brge	.+6      	; 0x202 <cmd_parse+0x6e>
 1fc:	8d 3f       	cpi	r24, 0xFD	; 253
 1fe:	31 f1       	breq	.+76     	; 0x24c <cmd_parse+0xb8>
 200:	3e c0       	rjmp	.+124    	; 0x27e <cmd_parse+0xea>
 202:	8f 3f       	cpi	r24, 0xFF	; 255
 204:	41 f0       	breq	.+16     	; 0x216 <cmd_parse+0x82>
 206:	88 23       	and	r24, r24
 208:	71 f1       	breq	.+92     	; 0x266 <cmd_parse+0xd2>
 20a:	39 c0       	rjmp	.+114    	; 0x27e <cmd_parse+0xea>
 20c:	21 96       	adiw	r28, 0x01	; 1
    return retval;
}

int8_t cmd_parse(char *string) {
    int8_t retval = -1;                                 // set inital return value to -1 -> no valid command
    for (uint8_t i = 0; i < MAX_CMD_NO; i++) {
 20e:	c4 31       	cpi	r28, 0x14	; 20
 210:	d1 05       	cpc	r29, r1
 212:	51 f6       	brne	.-108    	; 0x1a8 <cmd_parse+0x14>
 214:	cf ef       	ldi	r28, 0xFF	; 255
            i = MAX_CMD_NO;                             // exit loop
        }
    } 
    switch (retval) {                                   // select appropriate feedback to return
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", string);
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	86 e7       	ldi	r24, 0x76	; 118
 21c:	99 e4       	ldi	r25, 0x49	; 73
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	0e 94 a3 01 	call	0x346	; 0x346 <printf>
    	return retval;
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	27 c0       	rjmp	.+78     	; 0x27e <cmd_parse+0xea>
    
    return retval;    
}

static int8_t cmd_exec(char *string, uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
 230:	ce ef       	ldi	r28, 0xFE	; 254
    switch (retval) {                                   // select appropriate feedback to return
    case -1:
        printf("FAIL. Command %s not found in command table!\r\n", string);
    	return retval;
    case -2:
        printf("FAIL. Failed to execute command %s!\r\n", string);
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	85 ea       	ldi	r24, 0xA5	; 165
 238:	99 e4       	ldi	r25, 0x49	; 73
 23a:	9f 93       	push	r25
 23c:	8f 93       	push	r24
 23e:	0e 94 a3 01 	call	0x346	; 0x346 <printf>
        return retval;
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	19 c0       	rjmp	.+50     	; 0x27e <cmd_parse+0xea>
    case -3:
        printf("FAIL. Invalid options/parameters for command %s!\r\n", string);
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	8b ec       	ldi	r24, 0xCB	; 203
 252:	99 e4       	ldi	r25, 0x49	; 73
 254:	9f 93       	push	r25
 256:	8f 93       	push	r24
 258:	0e 94 a3 01 	call	0x346	; 0x346 <printf>
        return retval;
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0c c0       	rjmp	.+24     	; 0x27e <cmd_parse+0xea>
    case 0:
        printf("OK. Command %s executed successfully!\r\n", string);
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	8e ef       	ldi	r24, 0xFE	; 254
 26c:	99 e4       	ldi	r25, 0x49	; 73
 26e:	9f 93       	push	r25
 270:	8f 93       	push	r24
 272:	0e 94 a3 01 	call	0x346	; 0x346 <printf>
        return retval;
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
    }
    return retval;
}
 27e:	8c 2f       	mov	r24, r28
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <uart0_printChar>:
    stdout = &uart_stream;
}

static void uart0_sendChar(char c) {
    /* Send char c to TX0 pin */
    while (!(USART0.STATUS & USART_DREIF_bm)) {     // Check for completed transmission
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f8 e0       	ldi	r31, 0x08	; 8
 292:	94 81       	ldd	r25, Z+4	; 0x04
 294:	95 ff       	sbrs	r25, 5
 296:	fd cf       	rjmp	.-6      	; 0x292 <uart0_printChar+0x4>
        ;
    }
    USART0.TXDATAL = c;
 298:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
}

int uart0_printChar(char c, FILE *stream) {         // Wrapper for uart0_sendChar() using printf()
    uart0_sendChar(c);
    return 0;
}
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <uart_init>:

/*
    Function definitions
    *************************************************/
void uart_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200);   // set uart0 baud rate
 2a2:	e0 e0       	ldi	r30, 0x00	; 0
 2a4:	f8 e0       	ldi	r31, 0x08	; 8
 2a6:	84 e7       	ldi	r24, 0x74	; 116
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	80 87       	std	Z+8, r24	; 0x08
 2ac:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);    // enable uart0 TX & RX
 2ae:	86 81       	ldd	r24, Z+6	; 0x06
 2b0:	80 6c       	ori	r24, 0xC0	; 192
 2b2:	86 83       	std	Z+6, r24	; 0x06
    PORTA.DIRSET |= PIN0_bm;                            // set uart0 TX (PA0) to output
 2b4:	e0 e0       	ldi	r30, 0x00	; 0
 2b6:	f4 e0       	ldi	r31, 0x04	; 4
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRSET &= ~PIN1_bm;                           // set uart0 RX (PA1) to input
 2be:	81 81       	ldd	r24, Z+1	; 0x01
 2c0:	8d 7f       	andi	r24, 0xFD	; 253
 2c2:	81 83       	std	Z+1, r24	; 0x01
    stdout = &uart_stream;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	98 e2       	ldi	r25, 0x28	; 40
 2c8:	80 93 e1 28 	sts	0x28E1, r24	; 0x8028e1 <__iob+0x2>
 2cc:	90 93 e2 28 	sts	0x28E2, r25	; 0x8028e2 <__iob+0x3>
 2d0:	08 95       	ret

000002d2 <uart0_readLine>:
    }
    return USART0.RXDATAL;
}

char * uart0_readLine() {                             // Read a single line from uart0 rx
    uint8_t index = 0;
 2d2:	a0 e0       	ldi	r26, 0x00	; 0
    uart0_sendChar(c);
    return 0;
}

static uint8_t uart0_readChar() {
    while (!(USART0.STATUS & USART_RXCIF_bm)) {
 2d4:	e0 e0       	ldi	r30, 0x00	; 0
 2d6:	f8 e0       	ldi	r31, 0x08	; 8
 2d8:	84 81       	ldd	r24, Z+4	; 0x04
 2da:	88 23       	and	r24, r24
 2dc:	ec f7       	brge	.-6      	; 0x2d8 <uart0_readLine+0x6>
        ;
    }
    return USART0.RXDATAL;
 2de:	80 81       	ld	r24, Z
    uint8_t index = 0;
    char c;
      
    while (1) {
        c = uart0_readChar();
        if ((c != '\n') && (c != '\r')) {
 2e0:	8a 30       	cpi	r24, 0x0A	; 10
 2e2:	09 f1       	breq	.+66     	; 0x326 <uart0_readLine+0x54>
 2e4:	8d 30       	cpi	r24, 0x0D	; 13
 2e6:	c1 f3       	breq	.-16     	; 0x2d8 <uart0_readLine+0x6>
            buffer[index++] = c;
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	9a 0f       	add	r25, r26
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	a1 5a       	subi	r26, 0xA1	; 161
 2f0:	b7 4d       	sbci	r27, 0xD7	; 215
 2f2:	8c 93       	st	X, r24
            if (index > MAX_LINE_LEN) {
 2f4:	91 38       	cpi	r25, 0x81	; 129
 2f6:	a8 f0       	brcs	.+42     	; 0x322 <uart0_readLine+0x50>
                snprintf(buffer, sizeof(buffer), "Input too long, maximum no. of chars allowed: %d", MAX_LINE_LEN);
 2f8:	1f 92       	push	r1
 2fa:	80 e8       	ldi	r24, 0x80	; 128
 2fc:	8f 93       	push	r24
 2fe:	26 e2       	ldi	r18, 0x26	; 38
 300:	3a e4       	ldi	r19, 0x4A	; 74
 302:	3f 93       	push	r19
 304:	2f 93       	push	r18
 306:	1f 92       	push	r1
 308:	8f 93       	push	r24
 30a:	8f e5       	ldi	r24, 0x5F	; 95
 30c:	98 e2       	ldi	r25, 0x28	; 40
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	0e 94 b9 01 	call	0x372	; 0x372 <snprintf>
                return buffer;
 316:	8d b7       	in	r24, 0x3d	; 61
 318:	9e b7       	in	r25, 0x3e	; 62
 31a:	08 96       	adiw	r24, 0x08	; 8
 31c:	8d bf       	out	0x3d, r24	; 61
 31e:	9e bf       	out	0x3e, r25	; 62
 320:	06 c0       	rjmp	.+12     	; 0x32e <uart0_readLine+0x5c>
    char c;
      
    while (1) {
        c = uart0_readChar();
        if ((c != '\n') && (c != '\r')) {
            buffer[index++] = c;
 322:	a9 2f       	mov	r26, r25
 324:	d9 cf       	rjmp	.-78     	; 0x2d8 <uart0_readLine+0x6>
                snprintf(buffer, sizeof(buffer), "Input too long, maximum no. of chars allowed: %d", MAX_LINE_LEN);
                return buffer;
            }
        }        
        if (c == '\n') {
            buffer[index] = '\0';
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	a1 5a       	subi	r26, 0xA1	; 161
 32a:	b7 4d       	sbci	r27, 0xD7	; 215
 32c:	1c 92       	st	X, r1
            index = 0;
            return buffer;
        }
    }
}     
 32e:	8f e5       	ldi	r24, 0x5F	; 95
 330:	98 e2       	ldi	r25, 0x28	; 40
 332:	08 95       	ret

00000334 <strcmp>:
 334:	fb 01       	movw	r30, r22
 336:	dc 01       	movw	r26, r24
 338:	8d 91       	ld	r24, X+
 33a:	01 90       	ld	r0, Z+
 33c:	80 19       	sub	r24, r0
 33e:	01 10       	cpse	r0, r1
 340:	d9 f3       	breq	.-10     	; 0x338 <strcmp+0x4>
 342:	99 0b       	sbc	r25, r25
 344:	08 95       	ret

00000346 <printf>:
 346:	a0 e0       	ldi	r26, 0x00	; 0
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	e9 ea       	ldi	r30, 0xA9	; 169
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	0c 94 8a 04 	jmp	0x914	; 0x914 <__prologue_saves__+0x20>
 352:	ae 01       	movw	r20, r28
 354:	4b 5f       	subi	r20, 0xFB	; 251
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	fa 01       	movw	r30, r20
 35a:	61 91       	ld	r22, Z+
 35c:	71 91       	ld	r23, Z+
 35e:	af 01       	movw	r20, r30
 360:	80 91 e1 28 	lds	r24, 0x28E1	; 0x8028e1 <__iob+0x2>
 364:	90 91 e2 28 	lds	r25, 0x28E2	; 0x8028e2 <__iob+0x3>
 368:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vfprintf>
 36c:	e2 e0       	ldi	r30, 0x02	; 2
 36e:	0c 94 a3 04 	jmp	0x946	; 0x946 <__epilogue_restores__+0x20>

00000372 <snprintf>:
 372:	ae e0       	ldi	r26, 0x0E	; 14
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	ef eb       	ldi	r30, 0xBF	; 191
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	0c 94 88 04 	jmp	0x910	; 0x910 <__prologue_saves__+0x1c>
 37e:	0d 89       	ldd	r16, Y+21	; 0x15
 380:	1e 89       	ldd	r17, Y+22	; 0x16
 382:	8f 89       	ldd	r24, Y+23	; 0x17
 384:	98 8d       	ldd	r25, Y+24	; 0x18
 386:	26 e0       	ldi	r18, 0x06	; 6
 388:	2c 83       	std	Y+4, r18	; 0x04
 38a:	09 83       	std	Y+1, r16	; 0x01
 38c:	1a 83       	std	Y+2, r17	; 0x02
 38e:	97 ff       	sbrs	r25, 7
 390:	02 c0       	rjmp	.+4      	; 0x396 <snprintf+0x24>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e8       	ldi	r25, 0x80	; 128
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	8d 83       	std	Y+5, r24	; 0x05
 39a:	9e 83       	std	Y+6, r25	; 0x06
 39c:	ae 01       	movw	r20, r28
 39e:	45 5e       	subi	r20, 0xE5	; 229
 3a0:	5f 4f       	sbci	r21, 0xFF	; 255
 3a2:	69 8d       	ldd	r22, Y+25	; 0x19
 3a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vfprintf>
 3ae:	4d 81       	ldd	r20, Y+5	; 0x05
 3b0:	5e 81       	ldd	r21, Y+6	; 0x06
 3b2:	57 fd       	sbrc	r21, 7
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <snprintf+0x58>
 3b6:	2f 81       	ldd	r18, Y+7	; 0x07
 3b8:	38 85       	ldd	r19, Y+8	; 0x08
 3ba:	42 17       	cp	r20, r18
 3bc:	53 07       	cpc	r21, r19
 3be:	0c f4       	brge	.+2      	; 0x3c2 <snprintf+0x50>
 3c0:	9a 01       	movw	r18, r20
 3c2:	f8 01       	movw	r30, r16
 3c4:	e2 0f       	add	r30, r18
 3c6:	f3 1f       	adc	r31, r19
 3c8:	10 82       	st	Z, r1
 3ca:	2e 96       	adiw	r28, 0x0e	; 14
 3cc:	e4 e0       	ldi	r30, 0x04	; 4
 3ce:	0c 94 a1 04 	jmp	0x942	; 0x942 <__epilogue_restores__+0x1c>

000003d2 <vfprintf>:
 3d2:	ab e0       	ldi	r26, 0x0B	; 11
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	ef ee       	ldi	r30, 0xEF	; 239
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__prologue_saves__>
 3de:	6c 01       	movw	r12, r24
 3e0:	7b 01       	movw	r14, r22
 3e2:	8a 01       	movw	r16, r20
 3e4:	fc 01       	movw	r30, r24
 3e6:	16 82       	std	Z+6, r1	; 0x06
 3e8:	17 82       	std	Z+7, r1	; 0x07
 3ea:	83 81       	ldd	r24, Z+3	; 0x03
 3ec:	81 ff       	sbrs	r24, 1
 3ee:	cc c1       	rjmp	.+920    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	3c 01       	movw	r6, r24
 3f6:	f6 01       	movw	r30, r12
 3f8:	93 81       	ldd	r25, Z+3	; 0x03
 3fa:	f7 01       	movw	r30, r14
 3fc:	93 fd       	sbrc	r25, 3
 3fe:	85 91       	lpm	r24, Z+
 400:	93 ff       	sbrs	r25, 3
 402:	81 91       	ld	r24, Z+
 404:	7f 01       	movw	r14, r30
 406:	88 23       	and	r24, r24
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	ba c1       	rjmp	.+884    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
 40c:	85 32       	cpi	r24, 0x25	; 37
 40e:	39 f4       	brne	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	93 fd       	sbrc	r25, 3
 412:	85 91       	lpm	r24, Z+
 414:	93 ff       	sbrs	r25, 3
 416:	81 91       	ld	r24, Z+
 418:	7f 01       	movw	r14, r30
 41a:	85 32       	cpi	r24, 0x25	; 37
 41c:	29 f4       	brne	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41e:	b6 01       	movw	r22, r12
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 426:	e7 cf       	rjmp	.-50     	; 0x3f6 <vfprintf+0x24>
 428:	91 2c       	mov	r9, r1
 42a:	21 2c       	mov	r2, r1
 42c:	31 2c       	mov	r3, r1
 42e:	ff e1       	ldi	r31, 0x1F	; 31
 430:	f3 15       	cp	r31, r3
 432:	d8 f0       	brcs	.+54     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 434:	8b 32       	cpi	r24, 0x2B	; 43
 436:	79 f0       	breq	.+30     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 438:	38 f4       	brcc	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 43a:	80 32       	cpi	r24, 0x20	; 32
 43c:	79 f0       	breq	.+30     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 43e:	83 32       	cpi	r24, 0x23	; 35
 440:	a1 f4       	brne	.+40     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 442:	23 2d       	mov	r18, r3
 444:	20 61       	ori	r18, 0x10	; 16
 446:	1d c0       	rjmp	.+58     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 448:	8d 32       	cpi	r24, 0x2D	; 45
 44a:	61 f0       	breq	.+24     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 44c:	80 33       	cpi	r24, 0x30	; 48
 44e:	69 f4       	brne	.+26     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 450:	23 2d       	mov	r18, r3
 452:	21 60       	ori	r18, 0x01	; 1
 454:	16 c0       	rjmp	.+44     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 456:	83 2d       	mov	r24, r3
 458:	82 60       	ori	r24, 0x02	; 2
 45a:	38 2e       	mov	r3, r24
 45c:	e3 2d       	mov	r30, r3
 45e:	e4 60       	ori	r30, 0x04	; 4
 460:	3e 2e       	mov	r3, r30
 462:	2a c0       	rjmp	.+84     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 464:	f3 2d       	mov	r31, r3
 466:	f8 60       	ori	r31, 0x08	; 8
 468:	1d c0       	rjmp	.+58     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 46a:	37 fc       	sbrc	r3, 7
 46c:	2d c0       	rjmp	.+90     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 46e:	20 ed       	ldi	r18, 0xD0	; 208
 470:	28 0f       	add	r18, r24
 472:	2a 30       	cpi	r18, 0x0A	; 10
 474:	40 f0       	brcs	.+16     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 476:	8e 32       	cpi	r24, 0x2E	; 46
 478:	b9 f4       	brne	.+46     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 47a:	36 fc       	sbrc	r3, 6
 47c:	81 c1       	rjmp	.+770    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
 47e:	23 2d       	mov	r18, r3
 480:	20 64       	ori	r18, 0x40	; 64
 482:	32 2e       	mov	r3, r18
 484:	19 c0       	rjmp	.+50     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 486:	36 fe       	sbrs	r3, 6
 488:	06 c0       	rjmp	.+12     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 48a:	8a e0       	ldi	r24, 0x0A	; 10
 48c:	98 9e       	mul	r9, r24
 48e:	20 0d       	add	r18, r0
 490:	11 24       	eor	r1, r1
 492:	92 2e       	mov	r9, r18
 494:	11 c0       	rjmp	.+34     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 496:	ea e0       	ldi	r30, 0x0A	; 10
 498:	2e 9e       	mul	r2, r30
 49a:	20 0d       	add	r18, r0
 49c:	11 24       	eor	r1, r1
 49e:	22 2e       	mov	r2, r18
 4a0:	f3 2d       	mov	r31, r3
 4a2:	f0 62       	ori	r31, 0x20	; 32
 4a4:	3f 2e       	mov	r3, r31
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a8:	8c 36       	cpi	r24, 0x6C	; 108
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4ac:	83 2d       	mov	r24, r3
 4ae:	80 68       	ori	r24, 0x80	; 128
 4b0:	38 2e       	mov	r3, r24
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	88 36       	cpi	r24, 0x68	; 104
 4b6:	41 f4       	brne	.+16     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4b8:	f7 01       	movw	r30, r14
 4ba:	93 fd       	sbrc	r25, 3
 4bc:	85 91       	lpm	r24, Z+
 4be:	93 ff       	sbrs	r25, 3
 4c0:	81 91       	ld	r24, Z+
 4c2:	7f 01       	movw	r14, r30
 4c4:	81 11       	cpse	r24, r1
 4c6:	b3 cf       	rjmp	.-154    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 4c8:	98 2f       	mov	r25, r24
 4ca:	9f 7d       	andi	r25, 0xDF	; 223
 4cc:	95 54       	subi	r25, 0x45	; 69
 4ce:	93 30       	cpi	r25, 0x03	; 3
 4d0:	28 f4       	brcc	.+10     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d2:	0c 5f       	subi	r16, 0xFC	; 252
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	9f e3       	ldi	r25, 0x3F	; 63
 4d8:	99 83       	std	Y+1, r25	; 0x01
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4dc:	83 36       	cpi	r24, 0x63	; 99
 4de:	31 f0       	breq	.+12     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e0:	83 37       	cpi	r24, 0x73	; 115
 4e2:	71 f0       	breq	.+28     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4e4:	83 35       	cpi	r24, 0x53	; 83
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e8:	59 c0       	rjmp	.+178    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 4ea:	21 c0       	rjmp	.+66     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 4ec:	f8 01       	movw	r30, r16
 4ee:	80 81       	ld	r24, Z
 4f0:	89 83       	std	Y+1, r24	; 0x01
 4f2:	0e 5f       	subi	r16, 0xFE	; 254
 4f4:	1f 4f       	sbci	r17, 0xFF	; 255
 4f6:	88 24       	eor	r8, r8
 4f8:	83 94       	inc	r8
 4fa:	91 2c       	mov	r9, r1
 4fc:	53 01       	movw	r10, r6
 4fe:	13 c0       	rjmp	.+38     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 500:	28 01       	movw	r4, r16
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	4f 0e       	add	r4, r31
 506:	51 1c       	adc	r5, r1
 508:	f8 01       	movw	r30, r16
 50a:	a0 80       	ld	r10, Z
 50c:	b1 80       	ldd	r11, Z+1	; 0x01
 50e:	36 fe       	sbrs	r3, 6
 510:	03 c0       	rjmp	.+6      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 512:	69 2d       	mov	r22, r9
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 518:	6f ef       	ldi	r22, 0xFF	; 255
 51a:	7f ef       	ldi	r23, 0xFF	; 255
 51c:	c5 01       	movw	r24, r10
 51e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <strnlen>
 522:	4c 01       	movw	r8, r24
 524:	82 01       	movw	r16, r4
 526:	f3 2d       	mov	r31, r3
 528:	ff 77       	andi	r31, 0x7F	; 127
 52a:	3f 2e       	mov	r3, r31
 52c:	16 c0       	rjmp	.+44     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 52e:	28 01       	movw	r4, r16
 530:	22 e0       	ldi	r18, 0x02	; 2
 532:	42 0e       	add	r4, r18
 534:	51 1c       	adc	r5, r1
 536:	f8 01       	movw	r30, r16
 538:	a0 80       	ld	r10, Z
 53a:	b1 80       	ldd	r11, Z+1	; 0x01
 53c:	36 fe       	sbrs	r3, 6
 53e:	03 c0       	rjmp	.+6      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 540:	69 2d       	mov	r22, r9
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 546:	6f ef       	ldi	r22, 0xFF	; 255
 548:	7f ef       	ldi	r23, 0xFF	; 255
 54a:	c5 01       	movw	r24, r10
 54c:	0e 94 ca 03 	call	0x794	; 0x794 <strnlen_P>
 550:	4c 01       	movw	r8, r24
 552:	f3 2d       	mov	r31, r3
 554:	f0 68       	ori	r31, 0x80	; 128
 556:	3f 2e       	mov	r3, r31
 558:	82 01       	movw	r16, r4
 55a:	33 fc       	sbrc	r3, 3
 55c:	1b c0       	rjmp	.+54     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 55e:	82 2d       	mov	r24, r2
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	88 16       	cp	r8, r24
 564:	99 06       	cpc	r9, r25
 566:	b0 f4       	brcc	.+44     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 568:	b6 01       	movw	r22, r12
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 572:	2a 94       	dec	r2
 574:	f4 cf       	rjmp	.-24     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 576:	f5 01       	movw	r30, r10
 578:	37 fc       	sbrc	r3, 7
 57a:	85 91       	lpm	r24, Z+
 57c:	37 fe       	sbrs	r3, 7
 57e:	81 91       	ld	r24, Z+
 580:	5f 01       	movw	r10, r30
 582:	b6 01       	movw	r22, r12
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 58a:	21 10       	cpse	r2, r1
 58c:	2a 94       	dec	r2
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	82 1a       	sub	r8, r18
 592:	91 08       	sbc	r9, r1
 594:	81 14       	cp	r8, r1
 596:	91 04       	cpc	r9, r1
 598:	71 f7       	brne	.-36     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 59a:	e8 c0       	rjmp	.+464    	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
 59c:	84 36       	cpi	r24, 0x64	; 100
 59e:	11 f0       	breq	.+4      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 5a0:	89 36       	cpi	r24, 0x69	; 105
 5a2:	41 f5       	brne	.+80     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5a4:	f8 01       	movw	r30, r16
 5a6:	37 fe       	sbrs	r3, 7
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5aa:	60 81       	ld	r22, Z
 5ac:	71 81       	ldd	r23, Z+1	; 0x01
 5ae:	82 81       	ldd	r24, Z+2	; 0x02
 5b0:	93 81       	ldd	r25, Z+3	; 0x03
 5b2:	0c 5f       	subi	r16, 0xFC	; 252
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5b8:	60 81       	ld	r22, Z
 5ba:	71 81       	ldd	r23, Z+1	; 0x01
 5bc:	07 2e       	mov	r0, r23
 5be:	00 0c       	add	r0, r0
 5c0:	88 0b       	sbc	r24, r24
 5c2:	99 0b       	sbc	r25, r25
 5c4:	0e 5f       	subi	r16, 0xFE	; 254
 5c6:	1f 4f       	sbci	r17, 0xFF	; 255
 5c8:	f3 2d       	mov	r31, r3
 5ca:	ff 76       	andi	r31, 0x6F	; 111
 5cc:	3f 2e       	mov	r3, r31
 5ce:	97 ff       	sbrs	r25, 7
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d2:	90 95       	com	r25
 5d4:	80 95       	com	r24
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	f0 68       	ori	r31, 0x80	; 128
 5e2:	3f 2e       	mov	r3, r31
 5e4:	2a e0       	ldi	r18, 0x0A	; 10
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	a3 01       	movw	r20, r6
 5ea:	0e 94 1c 04 	call	0x838	; 0x838 <__ultoa_invert>
 5ee:	88 2e       	mov	r8, r24
 5f0:	86 18       	sub	r8, r6
 5f2:	45 c0       	rjmp	.+138    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 5f4:	85 37       	cpi	r24, 0x75	; 117
 5f6:	31 f4       	brne	.+12     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f8:	23 2d       	mov	r18, r3
 5fa:	2f 7e       	andi	r18, 0xEF	; 239
 5fc:	b2 2e       	mov	r11, r18
 5fe:	2a e0       	ldi	r18, 0x0A	; 10
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	25 c0       	rjmp	.+74     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 604:	93 2d       	mov	r25, r3
 606:	99 7f       	andi	r25, 0xF9	; 249
 608:	b9 2e       	mov	r11, r25
 60a:	8f 36       	cpi	r24, 0x6F	; 111
 60c:	c1 f0       	breq	.+48     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 60e:	18 f4       	brcc	.+6      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 610:	88 35       	cpi	r24, 0x58	; 88
 612:	79 f0       	breq	.+30     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 614:	b5 c0       	rjmp	.+362    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
 616:	80 37       	cpi	r24, 0x70	; 112
 618:	19 f0       	breq	.+6      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 61a:	88 37       	cpi	r24, 0x78	; 120
 61c:	21 f0       	breq	.+8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 61e:	b0 c0       	rjmp	.+352    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
 620:	e9 2f       	mov	r30, r25
 622:	e0 61       	ori	r30, 0x10	; 16
 624:	be 2e       	mov	r11, r30
 626:	b4 fe       	sbrs	r11, 4
 628:	0d c0       	rjmp	.+26     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 62a:	fb 2d       	mov	r31, r11
 62c:	f4 60       	ori	r31, 0x04	; 4
 62e:	bf 2e       	mov	r11, r31
 630:	09 c0       	rjmp	.+18     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 632:	34 fe       	sbrs	r3, 4
 634:	0a c0       	rjmp	.+20     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 636:	29 2f       	mov	r18, r25
 638:	26 60       	ori	r18, 0x06	; 6
 63a:	b2 2e       	mov	r11, r18
 63c:	06 c0       	rjmp	.+12     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 63e:	28 e0       	ldi	r18, 0x08	; 8
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	05 c0       	rjmp	.+10     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 644:	20 e1       	ldi	r18, 0x10	; 16
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 64a:	20 e1       	ldi	r18, 0x10	; 16
 64c:	32 e0       	ldi	r19, 0x02	; 2
 64e:	f8 01       	movw	r30, r16
 650:	b7 fe       	sbrs	r11, 7
 652:	07 c0       	rjmp	.+14     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 654:	60 81       	ld	r22, Z
 656:	71 81       	ldd	r23, Z+1	; 0x01
 658:	82 81       	ldd	r24, Z+2	; 0x02
 65a:	93 81       	ldd	r25, Z+3	; 0x03
 65c:	0c 5f       	subi	r16, 0xFC	; 252
 65e:	1f 4f       	sbci	r17, 0xFF	; 255
 660:	06 c0       	rjmp	.+12     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 662:	60 81       	ld	r22, Z
 664:	71 81       	ldd	r23, Z+1	; 0x01
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 5f       	subi	r16, 0xFE	; 254
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	a3 01       	movw	r20, r6
 670:	0e 94 1c 04 	call	0x838	; 0x838 <__ultoa_invert>
 674:	88 2e       	mov	r8, r24
 676:	86 18       	sub	r8, r6
 678:	fb 2d       	mov	r31, r11
 67a:	ff 77       	andi	r31, 0x7F	; 127
 67c:	3f 2e       	mov	r3, r31
 67e:	36 fe       	sbrs	r3, 6
 680:	0d c0       	rjmp	.+26     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 682:	23 2d       	mov	r18, r3
 684:	2e 7f       	andi	r18, 0xFE	; 254
 686:	a2 2e       	mov	r10, r18
 688:	89 14       	cp	r8, r9
 68a:	58 f4       	brcc	.+22     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 68c:	34 fe       	sbrs	r3, 4
 68e:	0b c0       	rjmp	.+22     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 690:	32 fc       	sbrc	r3, 2
 692:	09 c0       	rjmp	.+18     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 694:	83 2d       	mov	r24, r3
 696:	8e 7e       	andi	r24, 0xEE	; 238
 698:	a8 2e       	mov	r10, r24
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 69c:	b8 2c       	mov	r11, r8
 69e:	a3 2c       	mov	r10, r3
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6a2:	b8 2c       	mov	r11, r8
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6a6:	b9 2c       	mov	r11, r9
 6a8:	a4 fe       	sbrs	r10, 4
 6aa:	0f c0       	rjmp	.+30     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6ac:	fe 01       	movw	r30, r28
 6ae:	e8 0d       	add	r30, r8
 6b0:	f1 1d       	adc	r31, r1
 6b2:	80 81       	ld	r24, Z
 6b4:	80 33       	cpi	r24, 0x30	; 48
 6b6:	21 f4       	brne	.+8      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6b8:	9a 2d       	mov	r25, r10
 6ba:	99 7e       	andi	r25, 0xE9	; 233
 6bc:	a9 2e       	mov	r10, r25
 6be:	09 c0       	rjmp	.+18     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6c0:	a2 fe       	sbrs	r10, 2
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6c4:	b3 94       	inc	r11
 6c6:	b3 94       	inc	r11
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6ca:	8a 2d       	mov	r24, r10
 6cc:	86 78       	andi	r24, 0x86	; 134
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6d0:	b3 94       	inc	r11
 6d2:	a3 fc       	sbrc	r10, 3
 6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6d6:	a0 fe       	sbrs	r10, 0
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6da:	b2 14       	cp	r11, r2
 6dc:	88 f4       	brcc	.+34     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6de:	28 0c       	add	r2, r8
 6e0:	92 2c       	mov	r9, r2
 6e2:	9b 18       	sub	r9, r11
 6e4:	0e c0       	rjmp	.+28     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6e6:	b2 14       	cp	r11, r2
 6e8:	60 f4       	brcc	.+24     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6ea:	b6 01       	movw	r22, r12
 6ec:	80 e2       	ldi	r24, 0x20	; 32
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 6f4:	b3 94       	inc	r11
 6f6:	f7 cf       	rjmp	.-18     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6f8:	b2 14       	cp	r11, r2
 6fa:	18 f4       	brcc	.+6      	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6fc:	2b 18       	sub	r2, r11
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 700:	98 2c       	mov	r9, r8
 702:	21 2c       	mov	r2, r1
 704:	a4 fe       	sbrs	r10, 4
 706:	10 c0       	rjmp	.+32     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 708:	b6 01       	movw	r22, r12
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 712:	a2 fe       	sbrs	r10, 2
 714:	17 c0       	rjmp	.+46     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 716:	a1 fc       	sbrc	r10, 1
 718:	03 c0       	rjmp	.+6      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 71a:	88 e7       	ldi	r24, 0x78	; 120
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 720:	88 e5       	ldi	r24, 0x58	; 88
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	b6 01       	movw	r22, r12
 726:	0c c0       	rjmp	.+24     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 728:	8a 2d       	mov	r24, r10
 72a:	86 78       	andi	r24, 0x86	; 134
 72c:	59 f0       	breq	.+22     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 72e:	a1 fe       	sbrs	r10, 1
 730:	02 c0       	rjmp	.+4      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 732:	8b e2       	ldi	r24, 0x2B	; 43
 734:	01 c0       	rjmp	.+2      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 736:	80 e2       	ldi	r24, 0x20	; 32
 738:	a7 fc       	sbrc	r10, 7
 73a:	8d e2       	ldi	r24, 0x2D	; 45
 73c:	b6 01       	movw	r22, r12
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 744:	89 14       	cp	r8, r9
 746:	38 f4       	brcc	.+14     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 748:	b6 01       	movw	r22, r12
 74a:	80 e3       	ldi	r24, 0x30	; 48
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 752:	9a 94       	dec	r9
 754:	f7 cf       	rjmp	.-18     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 756:	8a 94       	dec	r8
 758:	f3 01       	movw	r30, r6
 75a:	e8 0d       	add	r30, r8
 75c:	f1 1d       	adc	r31, r1
 75e:	80 81       	ld	r24, Z
 760:	b6 01       	movw	r22, r12
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 768:	81 10       	cpse	r8, r1
 76a:	f5 cf       	rjmp	.-22     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 76c:	22 20       	and	r2, r2
 76e:	09 f4       	brne	.+2      	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
 770:	42 ce       	rjmp	.-892    	; 0x3f6 <vfprintf+0x24>
 772:	b6 01       	movw	r22, r12
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fputc>
 77c:	2a 94       	dec	r2
 77e:	f6 cf       	rjmp	.-20     	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
 780:	f6 01       	movw	r30, r12
 782:	86 81       	ldd	r24, Z+6	; 0x06
 784:	97 81       	ldd	r25, Z+7	; 0x07
 786:	02 c0       	rjmp	.+4      	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	9f ef       	ldi	r25, 0xFF	; 255
 78c:	2b 96       	adiw	r28, 0x0b	; 11
 78e:	e2 e1       	ldi	r30, 0x12	; 18
 790:	0c 94 93 04 	jmp	0x926	; 0x926 <__epilogue_restores__>

00000794 <strnlen_P>:
 794:	fc 01       	movw	r30, r24
 796:	05 90       	lpm	r0, Z+
 798:	61 50       	subi	r22, 0x01	; 1
 79a:	70 40       	sbci	r23, 0x00	; 0
 79c:	01 10       	cpse	r0, r1
 79e:	d8 f7       	brcc	.-10     	; 0x796 <strnlen_P+0x2>
 7a0:	80 95       	com	r24
 7a2:	90 95       	com	r25
 7a4:	8e 0f       	add	r24, r30
 7a6:	9f 1f       	adc	r25, r31
 7a8:	08 95       	ret

000007aa <strnlen>:
 7aa:	fc 01       	movw	r30, r24
 7ac:	61 50       	subi	r22, 0x01	; 1
 7ae:	70 40       	sbci	r23, 0x00	; 0
 7b0:	01 90       	ld	r0, Z+
 7b2:	01 10       	cpse	r0, r1
 7b4:	d8 f7       	brcc	.-10     	; 0x7ac <strnlen+0x2>
 7b6:	80 95       	com	r24
 7b8:	90 95       	com	r25
 7ba:	8e 0f       	add	r24, r30
 7bc:	9f 1f       	adc	r25, r31
 7be:	08 95       	ret

000007c0 <fputc>:
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	fb 01       	movw	r30, r22
 7ca:	23 81       	ldd	r18, Z+3	; 0x03
 7cc:	21 fd       	sbrc	r18, 1
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <fputc+0x16>
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	9f ef       	ldi	r25, 0xFF	; 255
 7d4:	2c c0       	rjmp	.+88     	; 0x82e <fputc+0x6e>
 7d6:	22 ff       	sbrs	r18, 2
 7d8:	16 c0       	rjmp	.+44     	; 0x806 <fputc+0x46>
 7da:	46 81       	ldd	r20, Z+6	; 0x06
 7dc:	57 81       	ldd	r21, Z+7	; 0x07
 7de:	24 81       	ldd	r18, Z+4	; 0x04
 7e0:	35 81       	ldd	r19, Z+5	; 0x05
 7e2:	42 17       	cp	r20, r18
 7e4:	53 07       	cpc	r21, r19
 7e6:	44 f4       	brge	.+16     	; 0x7f8 <fputc+0x38>
 7e8:	a0 81       	ld	r26, Z
 7ea:	b1 81       	ldd	r27, Z+1	; 0x01
 7ec:	9d 01       	movw	r18, r26
 7ee:	2f 5f       	subi	r18, 0xFF	; 255
 7f0:	3f 4f       	sbci	r19, 0xFF	; 255
 7f2:	20 83       	st	Z, r18
 7f4:	31 83       	std	Z+1, r19	; 0x01
 7f6:	8c 93       	st	X, r24
 7f8:	26 81       	ldd	r18, Z+6	; 0x06
 7fa:	37 81       	ldd	r19, Z+7	; 0x07
 7fc:	2f 5f       	subi	r18, 0xFF	; 255
 7fe:	3f 4f       	sbci	r19, 0xFF	; 255
 800:	26 83       	std	Z+6, r18	; 0x06
 802:	37 83       	std	Z+7, r19	; 0x07
 804:	14 c0       	rjmp	.+40     	; 0x82e <fputc+0x6e>
 806:	8b 01       	movw	r16, r22
 808:	ec 01       	movw	r28, r24
 80a:	fb 01       	movw	r30, r22
 80c:	00 84       	ldd	r0, Z+8	; 0x08
 80e:	f1 85       	ldd	r31, Z+9	; 0x09
 810:	e0 2d       	mov	r30, r0
 812:	09 95       	icall
 814:	89 2b       	or	r24, r25
 816:	e1 f6       	brne	.-72     	; 0x7d0 <fputc+0x10>
 818:	d8 01       	movw	r26, r16
 81a:	16 96       	adiw	r26, 0x06	; 6
 81c:	8d 91       	ld	r24, X+
 81e:	9c 91       	ld	r25, X
 820:	17 97       	sbiw	r26, 0x07	; 7
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	16 96       	adiw	r26, 0x06	; 6
 826:	8d 93       	st	X+, r24
 828:	9c 93       	st	X, r25
 82a:	17 97       	sbiw	r26, 0x07	; 7
 82c:	ce 01       	movw	r24, r28
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	08 95       	ret

00000838 <__ultoa_invert>:
 838:	fa 01       	movw	r30, r20
 83a:	aa 27       	eor	r26, r26
 83c:	28 30       	cpi	r18, 0x08	; 8
 83e:	51 f1       	breq	.+84     	; 0x894 <__ultoa_invert+0x5c>
 840:	20 31       	cpi	r18, 0x10	; 16
 842:	81 f1       	breq	.+96     	; 0x8a4 <__ultoa_invert+0x6c>
 844:	e8 94       	clt
 846:	6f 93       	push	r22
 848:	6e 7f       	andi	r22, 0xFE	; 254
 84a:	6e 5f       	subi	r22, 0xFE	; 254
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	af 4f       	sbci	r26, 0xFF	; 255
 854:	b1 e0       	ldi	r27, 0x01	; 1
 856:	3e d0       	rcall	.+124    	; 0x8d4 <__ultoa_invert+0x9c>
 858:	b4 e0       	ldi	r27, 0x04	; 4
 85a:	3c d0       	rcall	.+120    	; 0x8d4 <__ultoa_invert+0x9c>
 85c:	67 0f       	add	r22, r23
 85e:	78 1f       	adc	r23, r24
 860:	89 1f       	adc	r24, r25
 862:	9a 1f       	adc	r25, r26
 864:	a1 1d       	adc	r26, r1
 866:	68 0f       	add	r22, r24
 868:	79 1f       	adc	r23, r25
 86a:	8a 1f       	adc	r24, r26
 86c:	91 1d       	adc	r25, r1
 86e:	a1 1d       	adc	r26, r1
 870:	6a 0f       	add	r22, r26
 872:	71 1d       	adc	r23, r1
 874:	81 1d       	adc	r24, r1
 876:	91 1d       	adc	r25, r1
 878:	a1 1d       	adc	r26, r1
 87a:	20 d0       	rcall	.+64     	; 0x8bc <__ultoa_invert+0x84>
 87c:	09 f4       	brne	.+2      	; 0x880 <__ultoa_invert+0x48>
 87e:	68 94       	set
 880:	3f 91       	pop	r19
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	26 9f       	mul	r18, r22
 886:	11 24       	eor	r1, r1
 888:	30 19       	sub	r19, r0
 88a:	30 5d       	subi	r19, 0xD0	; 208
 88c:	31 93       	st	Z+, r19
 88e:	de f6       	brtc	.-74     	; 0x846 <__ultoa_invert+0xe>
 890:	cf 01       	movw	r24, r30
 892:	08 95       	ret
 894:	46 2f       	mov	r20, r22
 896:	47 70       	andi	r20, 0x07	; 7
 898:	40 5d       	subi	r20, 0xD0	; 208
 89a:	41 93       	st	Z+, r20
 89c:	b3 e0       	ldi	r27, 0x03	; 3
 89e:	0f d0       	rcall	.+30     	; 0x8be <__ultoa_invert+0x86>
 8a0:	c9 f7       	brne	.-14     	; 0x894 <__ultoa_invert+0x5c>
 8a2:	f6 cf       	rjmp	.-20     	; 0x890 <__ultoa_invert+0x58>
 8a4:	46 2f       	mov	r20, r22
 8a6:	4f 70       	andi	r20, 0x0F	; 15
 8a8:	40 5d       	subi	r20, 0xD0	; 208
 8aa:	4a 33       	cpi	r20, 0x3A	; 58
 8ac:	18 f0       	brcs	.+6      	; 0x8b4 <__ultoa_invert+0x7c>
 8ae:	49 5d       	subi	r20, 0xD9	; 217
 8b0:	31 fd       	sbrc	r19, 1
 8b2:	40 52       	subi	r20, 0x20	; 32
 8b4:	41 93       	st	Z+, r20
 8b6:	02 d0       	rcall	.+4      	; 0x8bc <__ultoa_invert+0x84>
 8b8:	a9 f7       	brne	.-22     	; 0x8a4 <__ultoa_invert+0x6c>
 8ba:	ea cf       	rjmp	.-44     	; 0x890 <__ultoa_invert+0x58>
 8bc:	b4 e0       	ldi	r27, 0x04	; 4
 8be:	a6 95       	lsr	r26
 8c0:	97 95       	ror	r25
 8c2:	87 95       	ror	r24
 8c4:	77 95       	ror	r23
 8c6:	67 95       	ror	r22
 8c8:	ba 95       	dec	r27
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__ultoa_invert+0x86>
 8cc:	00 97       	sbiw	r24, 0x00	; 0
 8ce:	61 05       	cpc	r22, r1
 8d0:	71 05       	cpc	r23, r1
 8d2:	08 95       	ret
 8d4:	9b 01       	movw	r18, r22
 8d6:	ac 01       	movw	r20, r24
 8d8:	0a 2e       	mov	r0, r26
 8da:	06 94       	lsr	r0
 8dc:	57 95       	ror	r21
 8de:	47 95       	ror	r20
 8e0:	37 95       	ror	r19
 8e2:	27 95       	ror	r18
 8e4:	ba 95       	dec	r27
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__ultoa_invert+0xa2>
 8e8:	62 0f       	add	r22, r18
 8ea:	73 1f       	adc	r23, r19
 8ec:	84 1f       	adc	r24, r20
 8ee:	95 1f       	adc	r25, r21
 8f0:	a0 1d       	adc	r26, r0
 8f2:	08 95       	ret

000008f4 <__prologue_saves__>:
 8f4:	2f 92       	push	r2
 8f6:	3f 92       	push	r3
 8f8:	4f 92       	push	r4
 8fa:	5f 92       	push	r5
 8fc:	6f 92       	push	r6
 8fe:	7f 92       	push	r7
 900:	8f 92       	push	r8
 902:	9f 92       	push	r9
 904:	af 92       	push	r10
 906:	bf 92       	push	r11
 908:	cf 92       	push	r12
 90a:	df 92       	push	r13
 90c:	ef 92       	push	r14
 90e:	ff 92       	push	r15
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
 91c:	ca 1b       	sub	r28, r26
 91e:	db 0b       	sbc	r29, r27
 920:	cd bf       	out	0x3d, r28	; 61
 922:	de bf       	out	0x3e, r29	; 62
 924:	09 94       	ijmp

00000926 <__epilogue_restores__>:
 926:	2a 88       	ldd	r2, Y+18	; 0x12
 928:	39 88       	ldd	r3, Y+17	; 0x11
 92a:	48 88       	ldd	r4, Y+16	; 0x10
 92c:	5f 84       	ldd	r5, Y+15	; 0x0f
 92e:	6e 84       	ldd	r6, Y+14	; 0x0e
 930:	7d 84       	ldd	r7, Y+13	; 0x0d
 932:	8c 84       	ldd	r8, Y+12	; 0x0c
 934:	9b 84       	ldd	r9, Y+11	; 0x0b
 936:	aa 84       	ldd	r10, Y+10	; 0x0a
 938:	b9 84       	ldd	r11, Y+9	; 0x09
 93a:	c8 84       	ldd	r12, Y+8	; 0x08
 93c:	df 80       	ldd	r13, Y+7	; 0x07
 93e:	ee 80       	ldd	r14, Y+6	; 0x06
 940:	fd 80       	ldd	r15, Y+5	; 0x05
 942:	0c 81       	ldd	r16, Y+4	; 0x04
 944:	1b 81       	ldd	r17, Y+3	; 0x03
 946:	aa 81       	ldd	r26, Y+2	; 0x02
 948:	b9 81       	ldd	r27, Y+1	; 0x01
 94a:	ce 0f       	add	r28, r30
 94c:	d1 1d       	adc	r29, r1
 94e:	cd bf       	out	0x3d, r28	; 61
 950:	de bf       	out	0x3e, r29	; 62
 952:	ed 01       	movw	r28, r26
 954:	08 95       	ret

00000956 <_exit>:
 956:	f8 94       	cli

00000958 <__stop_program>:
 958:	ff cf       	rjmp	.-2      	; 0x958 <__stop_program>
