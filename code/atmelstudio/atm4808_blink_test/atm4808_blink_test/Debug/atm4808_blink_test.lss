
atm4808_blink_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00802800  00802800  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a17  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000220a  00000000  00000000  00002ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000330  00000000  00000000  00004ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000520c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001587  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00006813  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000068a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_4>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_20>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	ea e9       	ldi	r30, 0x9A	; 154
  a4:	f1 e0       	ldi	r31, 0x01	; 1
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e2       	ldi	r18, 0x28	; 40
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 30       	cpi	r26, 0x01	; 1
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  c6:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init>:

volatile uint8_t buttonstate = 0;
volatile uint8_t duty_cycle = 50;

void init(void) {
    CPU_CCP = CCP_IOREG_gc;
  ce:	98 ed       	ldi	r25, 0xD8	; 216
  d0:	94 bf       	out	0x34, r25	; 52
    CPUINT.CTRLA &= ~CPUINT_IVSEL_bm;
  d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__TEXT_REGION_LENGTH__+0x7f4110>
  d6:	8f 7b       	andi	r24, 0xBF	; 191
  d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__TEXT_REGION_LENGTH__+0x7f4110>
    CPU_CCP = CCP_IOREG_gc;
  dc:	94 bf       	out	0x34, r25	; 52
    CLKCTRL.MCLKCTRLB = (CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);          // set prescaler to 2 and enable it
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {                      // wait for clock to stabilize
  e4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
  e8:	80 fd       	sbrc	r24, 0
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <init+0x16>
        ;
    }
    
    PORTD.DIRSET = PIN3_bm;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f4461>
    PORTD.DIRCLR = PIN4_bm;
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN4CTRL &= ~PORT_ISC_gm;
  f8:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
    PORTD.PIN4CTRL = PORT_ISC_RISING_gc;
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
    PORTD.PIN4CTRL &= ~PORT_PULLUPEN_bm;
 108:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
    
    /* RTC setup */
    while (RTC.STATUS > 0) {
 112:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
 116:	81 11       	cpse	r24, r1
 118:	fc cf       	rjmp	.-8      	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
        ; /* Wait for all register to be synchronized */    
    }
    RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__TEXT_REGION_LENGTH__+0x7f4147>
    RTC.PITINTCTRL |= RTC_PI_bm;
 120:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__TEXT_REGION_LENGTH__+0x7f4152>
 124:	81 60       	ori	r24, 0x01	; 1
 126:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x7f4152>
    RTC.PITCTRLA = (RTC_PERIOD_CYC1024_gc | RTC_PITEN_bm);
 12a:	89 e4       	ldi	r24, 0x49	; 73
 12c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f4150>
 130:	08 95       	ret

00000132 <__vector_4>:
    
}

ISR(RTC_PIT_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
    RTC.PITINTFLAGS = RTC_PI_bm;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
    PORTD.OUTTGL = PIN3_bm;
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <__TEXT_REGION_LENGTH__+0x7f4467>
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_20>:

ISR(PORTD_PORT_vect) {
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
    PORTD.OUTTGL = PIN3_bm;
 166:	e0 e6       	ldi	r30, 0x60	; 96
 168:	f4 e0       	ldi	r31, 0x04	; 4
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	87 83       	std	Z+7, r24	; 0x07
    PORTD.INTFLAGS = PORT_INT4_bm;
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	81 87       	std	Z+9, r24	; 0x09
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <main>:

int main(void) {
    init();
 182:	0e 94 67 00 	call	0xce	; 0xce <init>
    sei();
 186:	78 94       	sei
    while (1) {
        buttonstate = (PORTD.IN & PIN4_bm) ? 1 : 0;
 188:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
 18c:	82 95       	swap	r24
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 194:	f9 cf       	rjmp	.-14     	; 0x188 <main+0x6>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
