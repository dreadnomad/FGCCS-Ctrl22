
atm4808_blink_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002525  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021c0  00000000  00000000  0000271d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00004bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001179  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00005d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00005ddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_20>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  a0:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <init>:
 */ 
#include <avr/io.h>
#include <avr/interrupt.h>

void init(void) {
    PORTD.DIRSET = PIN3_bm;
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	81 83       	std	Z+1, r24	; 0x01
    PORTD.DIRCLR = PIN4_bm;
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	82 83       	std	Z+2, r24	; 0x02
    PORTD.PIN4CTRL &= ~PORT_ISC_gm;
  b4:	84 89       	ldd	r24, Z+20	; 0x14
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	84 8b       	std	Z+20, r24	; 0x14
    PORTD.PIN4CTRL = PORT_ISC_RISING_gc;
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	84 8b       	std	Z+20, r24	; 0x14
    PORTD.PIN4CTRL &= ~PORT_PULLUPEN_bm;
  be:	84 89       	ldd	r24, Z+20	; 0x14
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	84 8b       	std	Z+20, r24	; 0x14
  c4:	08 95       	ret

000000c6 <__vector_20>:
}

ISR(PORTD_PORT_vect) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
    PORTD.OUTTGL = PIN3_bm;
  d6:	e0 e6       	ldi	r30, 0x60	; 96
  d8:	f4 e0       	ldi	r31, 0x04	; 4
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	87 83       	std	Z+7, r24	; 0x07
    PORTD.INTFLAGS = PORT_INT4_bm;
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	81 87       	std	Z+9, r24	; 0x09
}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <main>:

int main(void) {
    init();
  f2:	0e 94 54 00 	call	0xa8	; 0xa8 <init>
    sei();
  f6:	78 94       	sei
    PORTD.OUTSET = PIN3_bm;
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
  fe:	ff cf       	rjmp	.-2      	; 0xfe <main+0xc>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
