
atm4808_uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00802800  00802800  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000255a  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d3  00000000  00000000  000027ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000306  00000000  00000000  0000499d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00004ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000119e  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00005eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00005f08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_24>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a1 30       	cpi	r26, 0x01	; 1
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  b0:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <__vector_24>:
#define PC2_CLEAR_INTERRUPT_FLAG PORTC.INTFLAGS &= PIN2_bm

volatile uint8_t PC2Ioc;

ISR(PORTC_PORT_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
    if(PC2_INTERRUPT)
  c8:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
  cc:	82 ff       	sbrs	r24, 2
  ce:	08 c0       	rjmp	.+16     	; 0xe0 <__vector_24+0x28>
    {
        PC2Ioc = 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
        PC2_CLEAR_INTERRUPT_FLAG;
  d6:	e0 e4       	ldi	r30, 0x40	; 64
  d8:	f4 e0       	ldi	r31, 0x04	; 4
  da:	81 85       	ldd	r24, Z+9	; 0x09
  dc:	84 70       	andi	r24, 0x04	; 4
  de:	81 87       	std	Z+9, r24	; 0x09
    }
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <LED_init>:

void LED_init(void)
{
    PORTC.DIR |= PIN3_bm;
  f0:	e0 e4       	ldi	r30, 0x40	; 64
  f2:	f4 e0       	ldi	r31, 0x04	; 4
  f4:	80 81       	ld	r24, Z
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 83       	st	Z, r24
    PORTC.OUT |= PIN3_bm;
  fa:	84 81       	ldd	r24, Z+4	; 0x04
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	84 83       	std	Z+4, r24	; 0x04
 100:	08 95       	ret

00000102 <BUTTON_init>:
}

void BUTTON_init(void)
{
    PORTC.DIR &= ~ PIN2_bm;
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f4 e0       	ldi	r31, 0x04	; 4
 106:	80 81       	ld	r24, Z
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	80 83       	st	Z, r24
    PORTC.PIN2CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 10c:	82 89       	ldd	r24, Z+18	; 0x12
 10e:	89 60       	ori	r24, 0x09	; 9
 110:	82 8b       	std	Z+18, r24	; 0x12
 112:	08 95       	ret

00000114 <main>:
}

int main(void)
{  
    LED_init();
 114:	0e 94 78 00 	call	0xf0	; 0xf0 <LED_init>
    BUTTON_init();
 118:	0e 94 81 00 	call	0x102	; 0x102 <BUTTON_init>

    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 11c:	e0 e5       	ldi	r30, 0x50	; 80
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	89 7f       	andi	r24, 0xF9	; 249
 124:	84 60       	ori	r24, 0x04	; 4
 126:	80 83       	st	Z, r24
    sei();
 128:	78 94       	sei
        //sleep_mode();
       
        
        if(PC2Ioc)
        {
            if(PC2_LOW)
 12a:	e0 e4       	ldi	r30, 0x40	; 64
 12c:	f4 e0       	ldi	r31, 0x04	; 4
    while (1)
    {
        //sleep_mode();
       
        
        if(PC2Ioc)
 12e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 132:	88 23       	and	r24, r24
 134:	e1 f3       	breq	.-8      	; 0x12e <main+0x1a>
        {
            if(PC2_LOW)
 136:	80 85       	ldd	r24, Z+8	; 0x08
 138:	82 fd       	sbrc	r24, 2
 13a:	04 c0       	rjmp	.+8      	; 0x144 <main+0x30>
            {
                PORTC.OUT &= ~PIN3_bm;
 13c:	84 81       	ldd	r24, Z+4	; 0x04
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	84 83       	std	Z+4, r24	; 0x04
 142:	03 c0       	rjmp	.+6      	; 0x14a <main+0x36>
            }
            else
            {
                PORTC.OUT |= PIN3_bm;
 144:	84 81       	ldd	r24, Z+4	; 0x04
 146:	88 60       	ori	r24, 0x08	; 8
 148:	84 83       	std	Z+4, r24	; 0x04
            }
            
            PC2Ioc = 0;
 14a:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 14e:	ef cf       	rjmp	.-34     	; 0x12e <main+0x1a>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
