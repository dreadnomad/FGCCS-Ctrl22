
atm4808_uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  00004176  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d6e  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000230e  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00005894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001502  00000000  00000000  000059a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a7  00000000  00000000  00006ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000714d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  a0:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <init>:
        USART0_sendString((char *)RESP_ON);
        USART0_sendString((char *)RESP_OFF);
        USART0_sendString((char *)RESP_TGL);
    }
    resetBuffer(str, maxLen);
}
  a8:	88 ed       	ldi	r24, 0xD8	; 216
  aa:	84 bf       	out	0x34, r24	; 52
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f8 e0       	ldi	r31, 0x08	; 8
  b6:	81 ea       	ldi	r24, 0xA1	; 161
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	80 87       	std	Z+8, r24	; 0x08
  bc:	91 87       	std	Z+9, r25	; 0x09
  be:	86 81       	ldd	r24, Z+6	; 0x06
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	86 83       	std	Z+6, r24	; 0x06
  c4:	86 81       	ldd	r24, Z+6	; 0x06
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	86 83       	std	Z+6, r24	; 0x06
  ca:	e0 e0       	ldi	r30, 0x00	; 0
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
  d4:	80 81       	ld	r24, Z
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	80 83       	st	Z, r24
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
  e0:	85 81       	ldd	r24, Z+5	; 0x05
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	85 83       	std	Z+5, r24	; 0x05
  e6:	08 95       	ret

000000e8 <USART0_sendChar>:
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f8 e0       	ldi	r31, 0x08	; 8
  ec:	94 81       	ldd	r25, Z+4	; 0x04
  ee:	95 ff       	sbrs	r25, 5
  f0:	fd cf       	rjmp	.-6      	; 0xec <USART0_sendChar+0x4>
  f2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
  f6:	08 95       	ret

000000f8 <USART0_sendString>:
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_sendString+0x22>
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 74 00 	call	0xe8	; 0xe8 <USART0_sendChar>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_sendString+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_sendString+0x16>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <USART0_getChar>:
 13c:	e0 e0       	ldi	r30, 0x00	; 0
 13e:	f8 e0       	ldi	r31, 0x08	; 8
 140:	84 81       	ldd	r24, Z+4	; 0x04
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <USART0_getChar+0x4>
 146:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 14a:	08 95       	ret

0000014c <led_toggle>:
 14c:	e0 e0       	ldi	r30, 0x00	; 0
 14e:	f4 e0       	ldi	r31, 0x04	; 4
 150:	87 81       	ldd	r24, Z+7	; 0x07
 152:	80 64       	ori	r24, 0x40	; 64
 154:	87 83       	std	Z+7, r24	; 0x07
 156:	08 95       	ret

00000158 <main>:
    PORTA.OUTTGL |= LED_MSK;
}

int main(void)
{
	init();
 158:	0e 94 54 00 	call	0xa8	; 0xa8 <init>
    // uint8_t rxcmd[RXMAXLEN];
    uint8_t rxchar;
    USART0_sendString("Hello\n");
 15c:	87 eb       	ldi	r24, 0xB7	; 183
 15e:	91 e4       	ldi	r25, 0x41	; 65
 160:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_sendString>
    while(1){
        rxchar = USART0_getChar();
 164:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_getChar>
        USART0_sendChar(rxchar);
 168:	0e 94 74 00 	call	0xe8	; 0xe8 <USART0_sendChar>
        led_toggle();
 16c:	0e 94 a6 00 	call	0x14c	; 0x14c <led_toggle>
 170:	f9 cf       	rjmp	.-14     	; 0x164 <main+0xc>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
