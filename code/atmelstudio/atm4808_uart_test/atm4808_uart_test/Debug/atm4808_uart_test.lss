
atm4808_uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002807  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000022c2  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000375  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00005048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001297  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  00006343  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00006381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  a0:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <init>:
    }
    USART0.TXDATAL = c;
}

void USART0_sendString(char *str){
    toggle_led();
  a8:	e0 e0       	ldi	r30, 0x00	; 0
  aa:	f8 e0       	ldi	r31, 0x08	; 8
  ac:	87 e4       	ldi	r24, 0x47	; 71
  ae:	90 e1       	ldi	r25, 0x10	; 16
  b0:	80 87       	std	Z+8, r24	; 0x08
  b2:	91 87       	std	Z+9, r25	; 0x09
  b4:	86 81       	ldd	r24, Z+6	; 0x06
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	86 83       	std	Z+6, r24	; 0x06
  ba:	e0 e0       	ldi	r30, 0x00	; 0
  bc:	f4 e0       	ldi	r31, 0x04	; 4
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
  c4:	80 81       	ld	r24, Z
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
  d0:	85 81       	ldd	r24, Z+5	; 0x05
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	85 83       	std	Z+5, r24	; 0x05
  d6:	08 95       	ret

000000d8 <toggle_led>:
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f4 e0       	ldi	r31, 0x04	; 4
  dc:	87 81       	ldd	r24, Z+7	; 0x07
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	87 83       	std	Z+7, r24	; 0x07
  e2:	08 95       	ret

000000e4 <main>:
    PORTA.OUTTGL |= PIN6_bm;
}

int main(void)
{
	init();
  e4:	0e 94 54 00 	call	0xa8	; 0xa8 <init>
    }
    USART0.TXDATAL = c;
}

void USART0_sendString(char *str){
    toggle_led();
  e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <toggle_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e3       	ldi	r18, 0x3F	; 63
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0xe>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x18>
  fc:	00 00       	nop
  fe:	f4 cf       	rjmp	.-24     	; 0xe8 <main+0x4>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
