
atm4808_uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000033d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004f  0000427a  0000027a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000033d  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c32  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002322  00000000  00000000  00003052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fe  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00005874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014e0  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ea  00000000  00000000  00006e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000715a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 02 01 	call	0x204	; 0x204 <main>
  a0:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <init>:
void led_off(){
    PORTA.OUTCLR |= LED_MSK;
}

void led_toggle(){
    PORTA.OUTTGL |= LED_MSK;
  a8:	88 ed       	ldi	r24, 0xD8	; 216
  aa:	84 bf       	out	0x34, r24	; 52
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f8 e0       	ldi	r31, 0x08	; 8
  b6:	81 ea       	ldi	r24, 0xA1	; 161
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	80 87       	std	Z+8, r24	; 0x08
  bc:	91 87       	std	Z+9, r25	; 0x09
  be:	86 81       	ldd	r24, Z+6	; 0x06
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	86 83       	std	Z+6, r24	; 0x06
  c4:	86 81       	ldd	r24, Z+6	; 0x06
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	86 83       	std	Z+6, r24	; 0x06
  ca:	e0 e0       	ldi	r30, 0x00	; 0
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
  d4:	80 81       	ld	r24, Z
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	80 83       	st	Z, r24
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
  e0:	85 81       	ldd	r24, Z+5	; 0x05
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	85 83       	std	Z+5, r24	; 0x05
  e6:	08 95       	ret

000000e8 <USART0_sendChar>:
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f8 e0       	ldi	r31, 0x08	; 8
  ec:	94 81       	ldd	r25, Z+4	; 0x04
  ee:	95 ff       	sbrs	r25, 5
  f0:	fd cf       	rjmp	.-6      	; 0xec <USART0_sendChar+0x4>
  f2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
  f6:	08 95       	ret

000000f8 <USART0_sendString>:
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_sendString+0x22>
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 74 00 	call	0xe8	; 0xe8 <USART0_sendChar>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_sendString+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_sendString+0x16>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <USART0_getChar>:
 13c:	e0 e0       	ldi	r30, 0x00	; 0
 13e:	f8 e0       	ldi	r31, 0x08	; 8
 140:	84 81       	ldd	r24, Z+4	; 0x04
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <USART0_getChar+0x4>
 146:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 14a:	08 95       	ret

0000014c <USART0_getString>:
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	e6 2e       	mov	r14, r22
 15a:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_getChar>
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	b1 f0       	breq	.+44     	; 0x18e <USART0_getString+0x42>
 162:	f1 2c       	mov	r15, r1
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	e9 1a       	sub	r14, r25
 168:	f1 08       	sbc	r15, r1
 16a:	1e 14       	cp	r1, r14
 16c:	1f 04       	cpc	r1, r15
 16e:	7c f4       	brge	.+30     	; 0x18e <USART0_getString+0x42>
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	fe 01       	movw	r30, r28
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	80 83       	st	Z, r24
 17a:	1f 5f       	subi	r17, 0xFF	; 255
 17c:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_getChar>
 180:	8a 30       	cpi	r24, 0x0A	; 10
 182:	29 f0       	breq	.+10     	; 0x18e <USART0_getString+0x42>
 184:	21 2f       	mov	r18, r17
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	2e 15       	cp	r18, r14
 18a:	3f 05       	cpc	r19, r15
 18c:	94 f3       	brlt	.-28     	; 0x172 <USART0_getString+0x26>
 18e:	18 82       	st	Y, r1
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <cmdParse>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
 1a2:	bc 01       	movw	r22, r24
 1a4:	8a e7       	ldi	r24, 0x7A	; 122
 1a6:	92 e4       	ldi	r25, 0x42	; 66
 1a8:	0e 94 32 01 	call	0x264	; 0x264 <strcmp>
 1ac:	89 2b       	or	r24, r25
 1ae:	49 f0       	breq	.+18     	; 0x1c2 <cmdParse+0x26>
 1b0:	be 01       	movw	r22, r28
 1b2:	81 e8       	ldi	r24, 0x81	; 129
 1b4:	92 e4       	ldi	r25, 0x42	; 66
 1b6:	0e 94 32 01 	call	0x264	; 0x264 <strcmp>
 1ba:	89 2b       	or	r24, r25
 1bc:	21 f0       	breq	.+8      	; 0x1c6 <cmdParse+0x2a>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <cmdParse+0x2c>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <cmdParse+0x2c>
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <resetBuffer>:
 1ce:	fc 01       	movw	r30, r24
 1d0:	10 82       	st	Z, r1
 1d2:	62 30       	cpi	r22, 0x02	; 2
 1d4:	50 f0       	brcs	.+20     	; 0x1ea <resetBuffer+0x1c>
 1d6:	62 50       	subi	r22, 0x02	; 2
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	6f 5f       	subi	r22, 0xFF	; 255
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	86 0f       	add	r24, r22
 1e0:	97 1f       	adc	r25, r23
 1e2:	11 92       	st	Z+, r1
 1e4:	e8 17       	cp	r30, r24
 1e6:	f9 07       	cpc	r31, r25
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <resetBuffer+0x14>
 1ea:	08 95       	ret

000001ec <led_on>:
 1ec:	e0 e0       	ldi	r30, 0x00	; 0
 1ee:	f4 e0       	ldi	r31, 0x04	; 4
 1f0:	85 81       	ldd	r24, Z+5	; 0x05
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	85 83       	std	Z+5, r24	; 0x05
 1f6:	08 95       	ret

000001f8 <led_off>:
 1f8:	e0 e0       	ldi	r30, 0x00	; 0
 1fa:	f4 e0       	ldi	r31, 0x04	; 4
 1fc:	86 81       	ldd	r24, Z+6	; 0x06
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	86 83       	std	Z+6, r24	; 0x06
 202:	08 95       	ret

00000204 <main>:
}

int main(void)
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	a8 97       	sbiw	r28, 0x28	; 40
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	de bf       	out	0x3e, r29	; 62
	init();
 212:	0e 94 54 00 	call	0xa8	; 0xa8 <init>
    uint8_t cmd;
    uint8_t rxcmd[40];
    
    while(1){
        USART0_getString(rxcmd, sizeof(rxcmd));
 216:	68 e2       	ldi	r22, 0x28	; 40
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	0e 94 a6 00 	call	0x14c	; 0x14c <USART0_getString>
        cmd = cmdParse(rxcmd);
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	0e 94 ce 00 	call	0x19c	; 0x19c <cmdParse>
 228:	18 2f       	mov	r17, r24
        resetBuffer(rxcmd, sizeof(rxcmd));
 22a:	68 e2       	ldi	r22, 0x28	; 40
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	0e 94 e7 00 	call	0x1ce	; 0x1ce <resetBuffer>
        switch (cmd)
 234:	11 30       	cpi	r17, 0x01	; 1
 236:	19 f0       	breq	.+6      	; 0x23e <main+0x3a>
 238:	12 30       	cpi	r17, 0x02	; 2
 23a:	41 f0       	breq	.+16     	; 0x24c <main+0x48>
 23c:	0e c0       	rjmp	.+28     	; 0x25a <main+0x56>
        {
        case 1:
            led_on();
 23e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <led_on>
            USART0_sendString("LED switched on!\r\n");
 242:	89 e8       	ldi	r24, 0x89	; 137
 244:	92 e4       	ldi	r25, 0x42	; 66
 246:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_sendString>
        	break;
 24a:	e5 cf       	rjmp	.-54     	; 0x216 <main+0x12>
        case 2:
            led_off();
 24c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <led_off>
            USART0_sendString("LED switched off!\r\n");
 250:	8c e9       	ldi	r24, 0x9C	; 156
 252:	92 e4       	ldi	r25, 0x42	; 66
 254:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_sendString>
            break;
 258:	de cf       	rjmp	.-68     	; 0x216 <main+0x12>
        default:
            USART0_sendString("Enter a valid command!\r\n");
 25a:	80 eb       	ldi	r24, 0xB0	; 176
 25c:	92 e4       	ldi	r25, 0x42	; 66
 25e:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_sendString>
 262:	d9 cf       	rjmp	.-78     	; 0x216 <main+0x12>

00000264 <strcmp>:
 264:	fb 01       	movw	r30, r22
 266:	dc 01       	movw	r26, r24
 268:	8d 91       	ld	r24, X+
 26a:	01 90       	ld	r0, Z+
 26c:	80 19       	sub	r24, r0
 26e:	01 10       	cpse	r0, r1
 270:	d9 f3       	breq	.-10     	; 0x268 <strcmp+0x4>
 272:	99 0b       	sbc	r25, r25
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
