
start_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00802800  00802800  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000002e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b00  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028a3  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4b  00000000  00000000  000077fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00008448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c56  00000000  00000000  000085f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000178  00000000  00000000  0000a246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000a3be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_7>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a1 30       	cpi	r26, 0x01	; 1
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  b0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  b8:	0e 94 c3 00 	call	0x186	; 0x186 <system_init>
  bc:	08 95       	ret

000000be <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(TCA0_OVF_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
	/* Insert your TCA overflow interrupt handling code */
    PORTD.OUTTGL = PIN3_bm;
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <__TEXT_REGION_LENGTH__+0x700467>
	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:
volatile uint8_t test = 0;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
        test++;
  e6:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <_edata>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <_edata>
  f0:	fa cf       	rjmp	.-12     	; 0xe6 <main+0x4>

000000f2 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret

000000f6 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	68 ed       	ldi	r22, 0xD8	; 216
  fa:	81 e6       	ldi	r24, 0x61	; 97
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <protected_write_io>
 102:	40 e8       	ldi	r20, 0x80	; 128
 104:	68 ed       	ldi	r22, 0xD8	; 216
 106:	80 e6       	ldi	r24, 0x60	; 96
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <protected_write_io>
	                 | 1 << CLKCTRL_CLKOUT_bp /* System clock out: enabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret

00000112 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 112:	78 94       	sei

	return 0;
}
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret

00000118 <mcu_init>:
#include <system.h>

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 118:	e0 e1       	ldi	r30, 0x10	; 16
 11a:	f4 e0       	ldi	r31, 0x04	; 4
 11c:	80 81       	ld	r24, Z
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	81 93       	st	Z+, r24
 122:	e8 31       	cpi	r30, 0x18	; 24
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	f8 07       	cpc	r31, r24
 128:	c9 f7       	brne	.-14     	; 0x11c <mcu_init+0x4>
 12a:	e0 e3       	ldi	r30, 0x30	; 48
 12c:	f4 e0       	ldi	r31, 0x04	; 4
 12e:	80 81       	ld	r24, Z
 130:	88 60       	ori	r24, 0x08	; 8
 132:	81 93       	st	Z+, r24
 134:	e8 33       	cpi	r30, 0x38	; 56
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	f8 07       	cpc	r31, r24
 13a:	c9 f7       	brne	.-14     	; 0x12e <mcu_init+0x16>
 13c:	e0 e5       	ldi	r30, 0x50	; 80
 13e:	f4 e0       	ldi	r31, 0x04	; 4
 140:	80 81       	ld	r24, Z
 142:	88 60       	ori	r24, 0x08	; 8
 144:	81 93       	st	Z+, r24
 146:	e8 35       	cpi	r30, 0x58	; 88
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	f8 07       	cpc	r31, r24
 14c:	c9 f7       	brne	.-14     	; 0x140 <mcu_init+0x28>
 14e:	e0 e7       	ldi	r30, 0x70	; 112
 150:	f4 e0       	ldi	r31, 0x04	; 4
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	81 93       	st	Z+, r24
 158:	e8 37       	cpi	r30, 0x78	; 120
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	f8 07       	cpc	r31, r24
 15e:	c9 f7       	brne	.-14     	; 0x152 <mcu_init+0x3a>
 160:	e0 e9       	ldi	r30, 0x90	; 144
 162:	f4 e0       	ldi	r31, 0x04	; 4
 164:	80 81       	ld	r24, Z
 166:	88 60       	ori	r24, 0x08	; 8
 168:	81 93       	st	Z+, r24
 16a:	e8 39       	cpi	r30, 0x98	; 152
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	f8 07       	cpc	r31, r24
 170:	c9 f7       	brne	.-14     	; 0x164 <mcu_init+0x4c>
 172:	e0 eb       	ldi	r30, 0xB0	; 176
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	81 93       	st	Z+, r24
 17c:	e8 3b       	cpi	r30, 0xB8	; 184
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	f8 07       	cpc	r31, r24
 182:	c9 f7       	brne	.-14     	; 0x176 <mcu_init+0x5e>
 184:	08 95       	ret

00000186 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 186:	0e 94 8c 00 	call	0x118	; 0x118 <mcu_init>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 18a:	6b 98       	cbi	0x0d, 3	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 18c:	63 9a       	sbi	0x0c, 3	; 12
	    // <true"> High
	    false);

	PD3_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 18e:	0e 94 7b 00 	call	0xf6	; 0xf6 <CLKCTRL_init>

	RTC_0_init();
 192:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <RTC_0_init>
#include <system.h>

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 196:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TIMER_0_init>

	RTC_0_init();

	TIMER_0_initialization();

	CPUINT_init();
 19a:	0e 94 89 00 	call	0x112	; 0x112 <CPUINT_init>

	SLPCTRL_init();
 19e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SLPCTRL_init>

	BOD_init();
 1a2:	0e 94 79 00 	call	0xf2	; 0xf2 <BOD_init>
 1a6:	08 95       	ret

000001a8 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1a8:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1aa:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1ac:	40 83       	st	Z, r20
	ret                             // Return to caller
 1ae:	08 95       	ret

000001b0 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 1b0:	e0 e4       	ldi	r30, 0x40	; 64
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	81 81       	ldd	r24, Z+1	; 0x01
 1b6:	81 11       	cpse	r24, r1
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <RTC_0_init+0x4>
	//		 | 0 << RTC_RTCEN_bp /* Enable: disabled */
	//		 | 0 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; /* 32KHz divided by 32 */
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
 1c0:	e0 e4       	ldi	r30, 0x40	; 64
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	81 89       	ldd	r24, Z+17	; 0x11
 1c6:	81 11       	cpse	r24, r1
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <RTC_0_init+0x14>
	}

	RTC.PITCTRLA = RTC_PERIOD_CYC1024_gc /* RTC Clock Cycles 1024 */
 1ca:	e0 e4       	ldi	r30, 0x40	; 64
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	89 e4       	ldi	r24, 0x49	; 73
 1d0:	80 8b       	std	Z+16, r24	; 0x10
	               | 1 << RTC_PITEN_bp;  /* Enable: enabled */

	RTC.PITDBGCTRL = 1 << RTC_DBGRUN_bp; /* Run in debug: enabled */
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	85 8b       	std	Z+21, r24	; 0x15

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
 1d6:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret

000001dc <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret

000001e0 <TIMER_0_init>:
	// TCA0.SINGLE.DBGCTRL = 0 << TCA_SINGLE_DBGRUN_bp; /* Debug Run: disabled */

	// TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTEI_bp /* Count on Event Input: disabled */
	//		 | TCA_SINGLE_EVACT_POSEDGE_gc /* Count on positive edge event */;

	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: disabled */
 1e0:	e0 e0       	ldi	r30, 0x00	; 0
 1e2:	fa e0       	ldi	r31, 0x0A	; 10
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	                      | 1 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: enabled */

	TCA0.SINGLE.PER = 0x9896; /* Period: 0x9896 */
 1e8:	86 e9       	ldi	r24, 0x96	; 150
 1ea:	98 e9       	ldi	r25, 0x98	; 152
 1ec:	86 a3       	std	Z+38, r24	; 0x26
 1ee:	97 a3       	std	Z+39, r25	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV256_gc /* System Clock / 256 */
 1f0:	8d e0       	ldi	r24, 0x0D	; 13
 1f2:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
