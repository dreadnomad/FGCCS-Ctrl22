
atmevse_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00802800  000029f5  000028a9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023f4  00000200  00000200  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000401  000065f4  000025f4  000024a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000ed  00802938  00802938  000029e1  2**0
                  ALLOC
  4 .comment      00000012  00000000  00000000  000029e1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000300  00000000  00000000  00002a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00005666  00000000  00000000  00002d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00002b23  00000000  00000000  0000839e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00003b55  00000000  00000000  0000aec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000004d0  00000000  00000000  0000ea18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000268b  00000000  00000000  0000eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00000c6e  00000000  00000000  00011573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000258  00000000  00000000  000121e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000200 <__vectors>:
     200:	0c 94 48 01 	jmp	0x290	; 0x290 <__ctors_end>
     204:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     208:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     20c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     210:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     214:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     218:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     21c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     220:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     224:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     228:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     22c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     230:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     234:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     238:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     23c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     240:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     244:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     248:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     24c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     250:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     254:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     258:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     25c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     260:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     264:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     268:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     26c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     270:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     274:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     278:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     27c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     280:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     284:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     288:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
     28c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df e3       	ldi	r29, 0x3F	; 63
     29a:	de bf       	out	0x3e, r29	; 62

0000029c <__do_copy_data>:
     29c:	19 e2       	ldi	r17, 0x29	; 41
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b8 e2       	ldi	r27, 0x28	; 40
     2a2:	e5 ef       	ldi	r30, 0xF5	; 245
     2a4:	f9 e2       	ldi	r31, 0x29	; 41
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x10>
     2a8:	05 90       	lpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	a8 33       	cpi	r26, 0x38	; 56
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0xc>

000002b2 <__do_clear_bss>:
     2b2:	2a e2       	ldi	r18, 0x2A	; 42
     2b4:	a8 e3       	ldi	r26, 0x38	; 56
     2b6:	b9 e2       	ldi	r27, 0x29	; 41
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a5 32       	cpi	r26, 0x25	; 37
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 29 07 	call	0xe52	; 0xe52 <main>
     2c6:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <_exit>

000002ca <__bad_interrupt>:
     2ca:	0c 94 00 01 	jmp	0x200	; 0x200 <__vectors>

000002ce <led_toggle>:
    rxbuffer.read = 0;
    rxbuffer.write = 0;
}

int8_t led_toggle() {
    PORTD.OUTTGL = LED;
     2ce:	88 e0       	ldi	r24, 0x08	; 8
     2d0:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <__TEXT_REGION_LENGTH__+0x7f4467>
    return 0;
}
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	08 95       	ret

000002d8 <led_on>:

int8_t led_on() {
    PORTD.OUTSET = LED;
     2d8:	88 e0       	ldi	r24, 0x08	; 8
     2da:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
    return 0;
}
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	08 95       	ret

000002e2 <led_off>:

int8_t led_off() {
    PORTD.OUTCLR = LED;
     2e2:	88 e0       	ldi	r24, 0x08	; 8
     2e4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
    return 0;
}
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 95       	ret

000002ec <pwm_on>:

int8_t pwm_on() {
    TCA0.SINGLE.CTRLB |= TCA_SINGLE_CMP2EN_bm;
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	81 81       	ldd	r24, Z+1	; 0x01
     2f2:	80 64       	ori	r24, 0x40	; 64
     2f4:	81 83       	std	Z+1, r24	; 0x01
    return 0;
}
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <pwm_off>:

int8_t pwm_off() {
    TCA0.SINGLE.CTRLB &= ~TCA_SINGLE_CMP2EN_bm;
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	fa e0       	ldi	r31, 0x0A	; 10
     2fe:	81 81       	ldd	r24, Z+1	; 0x01
     300:	8f 7b       	andi	r24, 0xBF	; 191
     302:	81 83       	std	Z+1, r24	; 0x01
    PORTA.OUTSET = PWM_OUT;
     304:	84 e0       	ldi	r24, 0x04	; 4
     306:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    return 0;
}
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 95       	ret

0000030e <ssr1_on>:
    return 0;
}


int8_t ssr1_on() {
    PORTA.OUTSET = SSR1;
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    return 0;
}
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	08 95       	ret

00000318 <ssr1_off>:

int8_t ssr1_off() {
    PORTA.OUTCLR = SSR1;
     318:	80 e4       	ldi	r24, 0x40	; 64
     31a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
    return 0;
}
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	08 95       	ret

00000322 <ssr2_on>:

int8_t ssr2_on() {
    PORTA.OUTSET = SSR2;
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    return 0;
}
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	08 95       	ret

0000032c <ssr2_off>:

int8_t ssr2_off() {
    PORTA.OUTCLR = SSR2;
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
    return 0;   
}
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	08 95       	ret

00000336 <ssr3_on>:

int8_t ssr3_on() {
    PORTA.OUTSET = SSR3;
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    return 0;    
}
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	08 95       	ret

00000340 <ssr3_off>:

int8_t ssr3_off() {
    PORTA.OUTCLR = SSR3;
     340:	80 e1       	ldi	r24, 0x10	; 16
     342:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
    return 0;    
}
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	08 95       	ret

0000034a <all_ssr_on>:
    PORTA.OUTSET = SSR1;
     34a:	e0 e0       	ldi	r30, 0x00	; 0
     34c:	f4 e0       	ldi	r31, 0x04	; 4
     34e:	80 e4       	ldi	r24, 0x40	; 64
     350:	85 83       	std	Z+5, r24	; 0x05
    PORTA.OUTSET = SSR2;
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	85 83       	std	Z+5, r24	; 0x05
    PORTA.OUTSET = SSR3;
     356:	80 e1       	ldi	r24, 0x10	; 16
     358:	85 83       	std	Z+5, r24	; 0x05
int8_t all_ssr_on() {
    ssr1_on();
    ssr2_on();
    ssr3_on();
    return 0;
}
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	08 95       	ret

0000035e <all_ssr_off>:
    PORTA.OUTCLR = SSR1;
     35e:	e0 e0       	ldi	r30, 0x00	; 0
     360:	f4 e0       	ldi	r31, 0x04	; 4
     362:	80 e4       	ldi	r24, 0x40	; 64
     364:	86 83       	std	Z+6, r24	; 0x06
    PORTA.OUTCLR = SSR2;
     366:	80 e2       	ldi	r24, 0x20	; 32
     368:	86 83       	std	Z+6, r24	; 0x06
    PORTA.OUTCLR = SSR3;
     36a:	80 e1       	ldi	r24, 0x10	; 16
     36c:	86 83       	std	Z+6, r24	; 0x06
int8_t all_ssr_off() {
    ssr1_off();
    ssr2_off();
    ssr3_off();
    return 0;
}
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret

00000372 <lock_off>:
        return -2;                  // FAIL
    }
}

int8_t lock_off() {
    PORTA.OUTSET = LOCK_R;
     372:	80 e8       	ldi	r24, 0x80	; 128
     374:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    PORTC.OUTSET = LOCK_W;
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
    return 0;
}
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	08 95       	ret

00000382 <relay_on>:

int8_t relay_on() {
    PORTA.OUTSET = RELAY;
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    return 0;
}
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	08 95       	ret

0000038c <relay_off>:

int8_t relay_off() {
    PORTA.OUTCLR = RELAY;
     38c:	88 e0       	ldi	r24, 0x08	; 8
     38e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
    return 0;
}
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	08 95       	ret

00000396 <readCP>:

int8_t readCP() {
    /* Sample control pilot to check for vehicle status */
    ADC0.MUXPOS = CP_AIN;   
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    ADC0.COMMAND = ADC_STCONV_bm;
     39c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
     3a0:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     3a4:	80 ff       	sbrs	r24, 0
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <readCP+0xa>
        ;
    }
    cpVal = ADC0.RES;
     3a8:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     3ac:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     3b0:	80 93 1b 2a 	sts	0x2A1B, r24	; 0x802a1b <cpVal>
     3b4:	90 93 1c 2a 	sts	0x2A1C, r25	; 0x802a1c <cpVal+0x1>
    ADC0.INTFLAGS = ADC_RESRDY_bm;
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	20 93 0b 06 	sts	0x060B, r18	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    if (cpVal > 980) {                                // CP at > 11V
     3be:	85 3d       	cpi	r24, 0xD5	; 213
     3c0:	33 e0       	ldi	r19, 0x03	; 3
     3c2:	93 07       	cpc	r25, r19
     3c4:	20 f0       	brcs	.+8      	; 0x3ce <readCP+0x38>
        pilot = PILOT_12V;
     3c6:	20 93 1a 2a 	sts	0x2A1A, r18	; 0x802a1a <pilot>
    }
    else {
        pilot = PILOT_NOK;                              // Pilot not OK
    }
    return 0;
}
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	08 95       	ret
    else if ((cpVal > 860) && (cpVal < 915)) {      // CP at 9V
     3ce:	9c 01       	movw	r18, r24
     3d0:	2d 55       	subi	r18, 0x5D	; 93
     3d2:	33 40       	sbci	r19, 0x03	; 3
     3d4:	26 33       	cpi	r18, 0x36	; 54
     3d6:	31 05       	cpc	r19, r1
     3d8:	20 f4       	brcc	.+8      	; 0x3e2 <readCP+0x4c>
        pilot = PILOT_9V;
     3da:	82 e0       	ldi	r24, 0x02	; 2
        pilot = PILOT_6V;
     3dc:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <pilot>
     3e0:	f4 cf       	rjmp	.-24     	; 0x3ca <readCP+0x34>
    else if ((cpVal > 720) && (cpVal < 800)) {      // CP at 6V
     3e2:	9c 01       	movw	r18, r24
     3e4:	21 5d       	subi	r18, 0xD1	; 209
     3e6:	32 40       	sbci	r19, 0x02	; 2
     3e8:	2f 34       	cpi	r18, 0x4F	; 79
     3ea:	31 05       	cpc	r19, r1
     3ec:	10 f4       	brcc	.+4      	; 0x3f2 <readCP+0x5c>
        pilot = PILOT_6V;
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	f5 cf       	rjmp	.-22     	; 0x3dc <readCP+0x46>
    else if ((cpVal > 25) && (cpVal < 95)) {        // Diode Check OK
     3f2:	4a 97       	sbiw	r24, 0x1a	; 26
     3f4:	85 34       	cpi	r24, 0x45	; 69
     3f6:	91 05       	cpc	r25, r1
     3f8:	10 f4       	brcc	.+4      	; 0x3fe <readCP+0x68>
        pilot = PILOT_DIODE;
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	ef cf       	rjmp	.-34     	; 0x3dc <readCP+0x46>
        pilot = PILOT_NOK;                              // Pilot not OK
     3fe:	10 92 1a 2a 	sts	0x2A1A, r1	; 0x802a1a <pilot>
     402:	e3 cf       	rjmp	.-58     	; 0x3ca <readCP+0x34>

00000404 <readPP>:

int8_t readPP() {
    ADC0.MUXPOS = PP_AIN;  
     404:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    ADC0.COMMAND = ADC_STCONV_bm;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
     40e:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     412:	80 ff       	sbrs	r24, 0
     414:	fc cf       	rjmp	.-8      	; 0x40e <readPP+0xa>
        ;
    }
    ppVal = ADC0.RES;
     416:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     41a:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     41e:	80 93 1d 2a 	sts	0x2A1D, r24	; 0x802a1d <ppVal>
     422:	90 93 1e 2a 	sts	0x2A1E, r25	; 0x802a1e <ppVal+0x1>
    ADC0.INTFLAGS = ADC_RESRDY_bm;
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	20 93 0b 06 	sts	0x060B, r18	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    maxCapacity = 13;                                   // No Resistor: Max Capacity 13A
    if ((ppVal > 260) && (ppVal < 480)) {           // 680R: Max Capacity 20A
     42c:	9c 01       	movw	r18, r24
     42e:	25 50       	subi	r18, 0x05	; 5
     430:	31 40       	sbci	r19, 0x01	; 1
     432:	2b 3d       	cpi	r18, 0xDB	; 219
     434:	31 05       	cpc	r19, r1
     436:	68 f4       	brcc	.+26     	; 0x452 <readPP+0x4e>
        maxCapacity = 20;
     438:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if ((ppVal > 150) && (ppVal < 220)) {      // 220R: Max Capacity 32A
        maxCapacity = 32;
    }
    else if ((ppVal > 75) && (ppVal < 120)) {        // 100R: Max Capacity 63A
        maxCapacity = 63;
     43a:	80 93 05 2a 	sts	0x2A05, r24	; 0x802a05 <maxCapacity>
    }
    if (cableConf) {
     43e:	80 91 07 2a 	lds	r24, 0x2A07	; 0x802a07 <cableConf>
     442:	88 23       	and	r24, r24
     444:	21 f0       	breq	.+8      	; 0x44e <readPP+0x4a>
        maxCapacity = maxCurrent;                   // Fixed cable: override with MAX_CURRENT
     446:	80 91 1f 29 	lds	r24, 0x291F	; 0x80291f <maxCurrent>
     44a:	80 93 05 2a 	sts	0x2A05, r24	; 0x802a05 <maxCapacity>
    }
    return 0;
}
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	08 95       	ret
    else if ((ppVal > 150) && (ppVal < 220)) {      // 220R: Max Capacity 32A
     452:	9c 01       	movw	r18, r24
     454:	27 59       	subi	r18, 0x97	; 151
     456:	31 09       	sbc	r19, r1
     458:	25 34       	cpi	r18, 0x45	; 69
     45a:	31 05       	cpc	r19, r1
     45c:	10 f4       	brcc	.+4      	; 0x462 <readPP+0x5e>
        maxCapacity = 32;
     45e:	80 e2       	ldi	r24, 0x20	; 32
     460:	ec cf       	rjmp	.-40     	; 0x43a <readPP+0x36>
    else if ((ppVal > 75) && (ppVal < 120)) {        // 100R: Max Capacity 63A
     462:	8c 54       	subi	r24, 0x4C	; 76
     464:	91 09       	sbc	r25, r1
     466:	8c 97       	sbiw	r24, 0x2c	; 44
     468:	10 f0       	brcs	.+4      	; 0x46e <readPP+0x6a>
    maxCapacity = 13;                                   // No Resistor: Max Capacity 13A
     46a:	8d e0       	ldi	r24, 0x0D	; 13
     46c:	e6 cf       	rjmp	.-52     	; 0x43a <readPP+0x36>
        maxCapacity = 63;
     46e:	8f e3       	ldi	r24, 0x3F	; 63
     470:	e4 cf       	rjmp	.-56     	; 0x43a <readPP+0x36>

00000472 <readCT>:

int8_t readCT() {
    /* Read CT0 value (PD5 -> AIN5)*/
    ADC0.MUXPOS = CT0_AIN;
     472:	85 e0       	ldi	r24, 0x05	; 5
     474:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    ADC0.COMMAND = ADC_STCONV_bm;
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
     47e:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     482:	80 ff       	sbrs	r24, 0
     484:	fc cf       	rjmp	.-8      	; 0x47e <readCT+0xc>
        ;
    }
    ctVal[0] = ADC0.RES;
     486:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     48a:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     48e:	80 93 24 29 	sts	0x2924, r24	; 0x802924 <ctVal>
     492:	90 93 25 29 	sts	0x2925, r25	; 0x802925 <ctVal+0x1>
    ADC0.INTFLAGS = ADC_RESRDY_bm;
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    
    /* Read CT1 value (PD6 -> AIN6)*/
    ADC0.MUXPOS = CT1_AIN;
     49c:	96 e0       	ldi	r25, 0x06	; 6
     49e:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    ADC0.COMMAND = ADC_STCONV_bm;
     4a2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
     4a6:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     4aa:	80 ff       	sbrs	r24, 0
     4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <readCT+0x34>
        ;
    }
    ctVal[1] = ADC0.RES;
     4ae:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     4b2:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     4b6:	80 93 26 29 	sts	0x2926, r24	; 0x802926 <ctVal+0x2>
     4ba:	90 93 27 29 	sts	0x2927, r25	; 0x802927 <ctVal+0x3>
    ADC0.INTFLAGS = ADC_RESRDY_bm;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    
    /* Read CT2 value (PD7 -> AIN7)*/
    ADC0.MUXPOS = CT2_AIN;
     4c4:	97 e0       	ldi	r25, 0x07	; 7
     4c6:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    ADC0.COMMAND = ADC_STCONV_bm;
     4ca:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
     4ce:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     4d2:	80 ff       	sbrs	r24, 0
     4d4:	fc cf       	rjmp	.-8      	; 0x4ce <readCT+0x5c>
        ;
    }
    ctVal[2] = ADC0.RES;
     4d6:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     4da:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     4de:	80 93 28 29 	sts	0x2928, r24	; 0x802928 <ctVal+0x4>
     4e2:	90 93 29 29 	sts	0x2929, r25	; 0x802929 <ctVal+0x5>
    ADC0.INTFLAGS = ADC_RESRDY_bm;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    return 0;
}
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	08 95       	ret

000004f0 <lock_cable>:
    PORTA.OUTSET = LOCK_R;
     4f0:	80 e8       	ldi	r24, 0x80	; 128
     4f2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    PORTC.OUTCLR = LOCK_W;
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	2f e3       	ldi	r18, 0x3F	; 63
     4fe:	82 e4       	ldi	r24, 0x42	; 66
     500:	9f e0       	ldi	r25, 0x0F	; 15
     502:	21 50       	subi	r18, 0x01	; 1
     504:	80 40       	sbci	r24, 0x00	; 0
     506:	90 40       	sbci	r25, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <lock_cable+0x12>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <lock_cable+0x1c>
     50c:	00 00       	nop
    lock_off();
     50e:	0e 94 b9 01 	call	0x372	; 0x372 <lock_off>
    lockstate = (PORTD.IN & LOCK_B) ? 1 : 0;
     512:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
     516:	29 2f       	mov	r18, r25
     518:	24 70       	andi	r18, 0x04	; 4
     51a:	92 fb       	bst	r25, 2
     51c:	88 27       	eor	r24, r24
     51e:	80 f9       	bld	r24, 0
     520:	80 93 0a 2a 	sts	0x2A0A, r24	; 0x802a0a <lockstate>
    if (lockstate == 1) {
     524:	21 11       	cpse	r18, r1
     526:	02 c0       	rjmp	.+4      	; 0x52c <lock_cable+0x3c>
        return -2;                  // FAIL
     528:	8e ef       	ldi	r24, 0xFE	; 254
     52a:	08 95       	ret
        return 0;                   // OK
     52c:	80 e0       	ldi	r24, 0x00	; 0
}
     52e:	08 95       	ret

00000530 <unlock_cable>:
    PORTA.OUTCLR = LOCK_R;
     530:	80 e8       	ldi	r24, 0x80	; 128
     532:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
    PORTC.OUTSET = LOCK_W;
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
     53c:	2f eb       	ldi	r18, 0xBF	; 191
     53e:	87 e2       	ldi	r24, 0x27	; 39
     540:	99 e0       	ldi	r25, 0x09	; 9
     542:	21 50       	subi	r18, 0x01	; 1
     544:	80 40       	sbci	r24, 0x00	; 0
     546:	90 40       	sbci	r25, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <unlock_cable+0x12>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <unlock_cable+0x1c>
     54c:	00 00       	nop
    lock_off();
     54e:	0e 94 b9 01 	call	0x372	; 0x372 <lock_off>
    lockstate = (PORTD.IN & LOCK_B) ? 1 : 0;
     552:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
     556:	29 2f       	mov	r18, r25
     558:	24 70       	andi	r18, 0x04	; 4
     55a:	92 fb       	bst	r25, 2
     55c:	88 27       	eor	r24, r24
     55e:	80 f9       	bld	r24, 0
     560:	80 93 0a 2a 	sts	0x2A0A, r24	; 0x802a0a <lockstate>
    if (lockstate == 0) {
     564:	22 23       	and	r18, r18
     566:	11 f0       	breq	.+4      	; 0x56c <unlock_cable+0x3c>
        return -2;                  // FAIL
     568:	8e ef       	ldi	r24, 0xFE	; 254
     56a:	08 95       	ret
        return 0;                   // OK
     56c:	80 e0       	ldi	r24, 0x00	; 0
}
     56e:	08 95       	ret

00000570 <readTemp>:
/*    led_off();*/
    return 0;
    
}

int8_t readTemp() {
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <readTemp+0x6>
     576:	00 d0       	rcall	.+0      	; 0x578 <readTemp+0x8>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
    /* Temporarily disable ADC */
    ADC0.CTRLA &= ~ADC_ENABLE_bm;
     57c:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     580:	8e 7f       	andi	r24, 0xFE	; 254
     582:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    /* Setup ADC module */
    ADC0.CTRLC |= ADC_REFSEL_INTREF_gc;
     586:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     58a:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
     58e:	8e e1       	ldi	r24, 0x1E	; 30
     590:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    ADC0.CTRLD |= ADC_INITDLY_DLY64_gc;
     594:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     598:	80 66       	ori	r24, 0x60	; 96
     59a:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
    /* Reenable ADC */
    ADC0.CTRLA |= ADC_ENABLE_bm;
     59e:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a8:	89 ef       	ldi	r24, 0xF9	; 249
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <readTemp+0x3c>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <readTemp+0x42>
     5b2:	00 00       	nop
    /* delay until ADC is stabilized */
    _delay_us(100);
    /* Read Temperature sensor value */
    ADC0.COMMAND = ADC_STCONV_bm;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)) {
     5ba:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     5be:	80 ff       	sbrs	r24, 0
     5c0:	fc cf       	rjmp	.-8      	; 0x5ba <readTemp+0x4a>
        ;
    }
    uint16_t adcVal = ADC0.RES;
     5c2:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     5c6:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
    /* Calculate temperature in Kelvin (32bit temporary variable to avoid overflow) */
    uint32_t temp = (adcVal - sigrow_offset);
     5ca:	80 91 fc 29 	lds	r24, 0x29FC	; 0x8029fc <sigrow_offset>
     5ce:	28 1b       	sub	r18, r24
     5d0:	31 09       	sbc	r19, r1
     5d2:	87 fd       	sbrc	r24, 7
     5d4:	33 95       	inc	r19
    temp *= sigrow_gain;
     5d6:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sigrow_gain>
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__umulhisi3>
     5e0:	69 83       	std	Y+1, r22	; 0x01
     5e2:	7a 83       	std	Y+2, r23	; 0x02
     5e4:	8b 83       	std	Y+3, r24	; 0x03
     5e6:	9c 83       	std	Y+4, r25	; 0x04
    temp += 0x80;
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	80 58       	subi	r24, 0x80	; 128
     5ee:	9f 4f       	sbci	r25, 0xFF	; 255
     5f0:	af 4f       	sbci	r26, 0xFF	; 255
     5f2:	bf 4f       	sbci	r27, 0xFF	; 255
    temp >>= 8;
     5f4:	89 2f       	mov	r24, r25
     5f6:	9a 2f       	mov	r25, r26
     5f8:	ab 2f       	mov	r26, r27
     5fa:	bb 27       	eor	r27, r27
    temperature = temp;     // Temp in Kelvin
     5fc:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <temperature>
     600:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <temperature+0x1>
    /* Reset ADC */
    ADC0.CTRLA &= ~ADC_ENABLE_bm; 
     604:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     608:	8e 7f       	andi	r24, 0xFE	; 254
     60a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    ADC0.CTRLC |= ADC_REFSEL_VDDREF_gc;
     60e:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     612:	80 61       	ori	r24, 0x10	; 16
     614:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    ADC0.CTRLD |= ADC_INITDLY_DLY0_gc;
     618:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     61c:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
    ADC0.CTRLA |= ADC_ENABLE_bm;
     620:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     624:	81 60       	ori	r24, 0x01	; 1
     626:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    
    ADC0.INTFLAGS = ADC_RESRDY_bm;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    return 0;
}    
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	24 96       	adiw	r28, 0x04	; 4
     634:	cd bf       	out	0x3d, r28	; 61
     636:	de bf       	out	0x3e, r29	; 62
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <measureCurrent>:
int8_t measureCurrent() {
     63e:	2f 92       	push	r2
     640:	3f 92       	push	r3
     642:	4f 92       	push	r4
     644:	5f 92       	push	r5
     646:	6f 92       	push	r6
     648:	7f 92       	push	r7
     64a:	8f 92       	push	r8
     64c:	9f 92       	push	r9
     64e:	af 92       	push	r10
     650:	bf 92       	push	r11
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	60 97       	sbiw	r28, 0x10	; 16
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	de bf       	out	0x3e, r29	; 62
    for (uint16_t ct = 0; ct < NO_PHASE; ct++) {
     66c:	24 e2       	ldi	r18, 0x24	; 36
     66e:	39 e2       	ldi	r19, 0x29	; 41
     670:	2f 87       	std	Y+15, r18	; 0x0f
     672:	38 8b       	std	Y+16, r19	; 0x10
     674:	f4 e8       	ldi	r31, 0x84	; 132
     676:	cf 2e       	mov	r12, r31
     678:	f9 e2       	ldi	r31, 0x29	; 41
     67a:	df 2e       	mov	r13, r31
     67c:	4a ea       	ldi	r20, 0xAA	; 170
     67e:	59 e2       	ldi	r21, 0x29	; 41
     680:	4d 87       	std	Y+13, r20	; 0x0d
     682:	5e 87       	std	Y+14, r21	; 0x0e
int8_t measureCurrent() {
     684:	4a 01       	movw	r8, r20
    int32_t sumI = 0;
     686:	19 86       	std	Y+9, r1	; 0x09
     688:	1a 86       	std	Y+10, r1	; 0x0a
     68a:	1b 86       	std	Y+11, r1	; 0x0b
     68c:	1c 86       	std	Y+12, r1	; 0x0c
        sampleI = ctVal[ct];
     68e:	af 85       	ldd	r26, Y+15	; 0x0f
     690:	b8 89       	ldd	r27, Y+16	; 0x10
     692:	8d 91       	ld	r24, X+
     694:	9d 91       	ld	r25, X+
     696:	af 87       	std	Y+15, r26	; 0x0f
     698:	b8 8b       	std	Y+16, r27	; 0x10
     69a:	80 93 a6 29 	sts	0x29A6, r24	; 0x8029a6 <sampleI>
     69e:	90 93 a7 29 	sts	0x29A7, r25	; 0x8029a7 <sampleI+0x1>
        filteredI = filteredCT[ct];
     6a2:	f6 01       	movw	r30, r12
     6a4:	81 91       	ld	r24, Z+
     6a6:	91 91       	ld	r25, Z+
     6a8:	a1 91       	ld	r26, Z+
     6aa:	b1 91       	ld	r27, Z+
     6ac:	6f 01       	movw	r12, r30
     6ae:	80 93 a0 29 	sts	0x29A0, r24	; 0x8029a0 <filteredI>
     6b2:	90 93 a1 29 	sts	0x29A1, r25	; 0x8029a1 <filteredI+0x1>
     6b6:	a0 93 a2 29 	sts	0x29A2, r26	; 0x8029a2 <filteredI+0x2>
     6ba:	b0 93 a3 29 	sts	0x29A3, r27	; 0x8029a3 <filteredI+0x3>
     6be:	a1 2c       	mov	r10, r1
     6c0:	e2 e0       	ldi	r30, 0x02	; 2
     6c2:	be 2e       	mov	r11, r30
            sampleI = ctVal[ct];
     6c4:	2f 84       	ldd	r2, Y+15	; 0x0f
     6c6:	38 88       	ldd	r3, Y+16	; 0x10
     6c8:	f2 e0       	ldi	r31, 0x02	; 2
     6ca:	2f 1a       	sub	r2, r31
     6cc:	31 08       	sbc	r3, r1
            readCT();
     6ce:	0e 94 39 02 	call	0x472	; 0x472 <readCT>
            lastSampleI = sampleI;
     6d2:	80 91 a6 29 	lds	r24, 0x29A6	; 0x8029a6 <sampleI>
     6d6:	90 91 a7 29 	lds	r25, 0x29A7	; 0x8029a7 <sampleI+0x1>
     6da:	80 93 a8 29 	sts	0x29A8, r24	; 0x8029a8 <lastSampleI>
     6de:	90 93 a9 29 	sts	0x29A9, r25	; 0x8029a9 <lastSampleI+0x1>
            sampleI = ctVal[ct];
     6e2:	d1 01       	movw	r26, r2
     6e4:	4d 90       	ld	r4, X+
     6e6:	5c 90       	ld	r5, X
     6e8:	40 92 a6 29 	sts	0x29A6, r4	; 0x8029a6 <sampleI>
     6ec:	50 92 a7 29 	sts	0x29A7, r5	; 0x8029a7 <sampleI+0x1>
            tempI = sampleI - lastSampleI;
     6f0:	48 1a       	sub	r4, r24
     6f2:	59 0a       	sbc	r5, r25
     6f4:	40 92 a4 29 	sts	0x29A4, r4	; 0x8029a4 <tempI>
     6f8:	50 92 a5 29 	sts	0x29A5, r5	; 0x8029a5 <tempI+0x1>
            tempL = (uint32_t)tempI << 8;
     6fc:	05 2c       	mov	r0, r5
     6fe:	00 0c       	add	r0, r0
     700:	66 08       	sbc	r6, r6
     702:	77 08       	sbc	r7, r7
     704:	76 2c       	mov	r7, r6
     706:	65 2c       	mov	r6, r5
     708:	54 2c       	mov	r5, r4
     70a:	44 24       	eor	r4, r4
            tempL += filteredI;
     70c:	80 91 a0 29 	lds	r24, 0x29A0	; 0x8029a0 <filteredI>
     710:	90 91 a1 29 	lds	r25, 0x29A1	; 0x8029a1 <filteredI+0x1>
     714:	a0 91 a2 29 	lds	r26, 0x29A2	; 0x8029a2 <filteredI+0x2>
     718:	b0 91 a3 29 	lds	r27, 0x29A3	; 0x8029a3 <filteredI+0x3>
     71c:	84 0d       	add	r24, r4
     71e:	95 1d       	adc	r25, r5
     720:	a6 1d       	adc	r26, r6
     722:	b7 1d       	adc	r27, r7
     724:	80 93 98 29 	sts	0x2998, r24	; 0x802998 <tempL>
     728:	90 93 99 29 	sts	0x2999, r25	; 0x802999 <tempL+0x1>
     72c:	a0 93 9a 29 	sts	0x299A, r26	; 0x80299a <tempL+0x2>
     730:	b0 93 9b 29 	sts	0x299B, r27	; 0x80299b <tempL+0x3>
            filteredI = tempL - (tempL >> 8);
     734:	49 2f       	mov	r20, r25
     736:	5a 2f       	mov	r21, r26
     738:	6b 2f       	mov	r22, r27
     73a:	77 27       	eor	r23, r23
     73c:	67 fd       	sbrc	r22, 7
     73e:	7a 95       	dec	r23
     740:	2c 01       	movw	r4, r24
     742:	3d 01       	movw	r6, r26
     744:	44 1a       	sub	r4, r20
     746:	55 0a       	sbc	r5, r21
     748:	66 0a       	sbc	r6, r22
     74a:	77 0a       	sbc	r7, r23
     74c:	40 92 a0 29 	sts	0x29A0, r4	; 0x8029a0 <filteredI>
     750:	50 92 a1 29 	sts	0x29A1, r5	; 0x8029a1 <filteredI+0x1>
     754:	60 92 a2 29 	sts	0x29A2, r6	; 0x8029a2 <filteredI+0x2>
     758:	70 92 a3 29 	sts	0x29A3, r7	; 0x8029a3 <filteredI+0x3>
            filtI_div4 = filteredI >> 2;
     75c:	a3 01       	movw	r20, r6
     75e:	92 01       	movw	r18, r4
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	55 95       	asr	r21
     764:	47 95       	ror	r20
     766:	37 95       	ror	r19
     768:	27 95       	ror	r18
     76a:	6a 95       	dec	r22
     76c:	d1 f7       	brne	.-12     	; 0x762 <measureCurrent+0x124>
     76e:	20 93 9c 29 	sts	0x299C, r18	; 0x80299c <filtI_div4>
     772:	30 93 9d 29 	sts	0x299D, r19	; 0x80299d <filtI_div4+0x1>
     776:	40 93 9e 29 	sts	0x299E, r20	; 0x80299e <filtI_div4+0x2>
     77a:	50 93 9f 29 	sts	0x299F, r21	; 0x80299f <filtI_div4+0x3>
            sqI = filtI_div4 * filtI_div4;
     77e:	ca 01       	movw	r24, r20
     780:	b9 01       	movw	r22, r18
     782:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsi3>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	7b 01       	movw	r14, r22
     790:	8c 01       	movw	r16, r24
     792:	11 0f       	add	r17, r17
     794:	ee 08       	sbc	r14, r14
     796:	fe 2c       	mov	r15, r14
     798:	87 01       	movw	r16, r14
            sqI = sqI >> 12;
     79a:	29 81       	ldd	r18, Y+1	; 0x01
     79c:	3a 81       	ldd	r19, Y+2	; 0x02
     79e:	4b 81       	ldd	r20, Y+3	; 0x03
     7a0:	5c 81       	ldd	r21, Y+4	; 0x04
     7a2:	6e 2d       	mov	r22, r14
     7a4:	7e 2d       	mov	r23, r14
     7a6:	8e 2d       	mov	r24, r14
     7a8:	9e 2d       	mov	r25, r14
     7aa:	0c e0       	ldi	r16, 0x0C	; 12
     7ac:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__ashrdi3>
     7b0:	29 83       	std	Y+1, r18	; 0x01
     7b2:	3a 83       	std	Y+2, r19	; 0x02
     7b4:	4b 83       	std	Y+3, r20	; 0x03
     7b6:	5c 83       	std	Y+4, r21	; 0x04
     7b8:	6d 83       	std	Y+5, r22	; 0x05
     7ba:	7e 83       	std	Y+6, r23	; 0x06
     7bc:	8f 83       	std	Y+7, r24	; 0x07
     7be:	98 87       	std	Y+8, r25	; 0x08
     7c0:	20 93 90 29 	sts	0x2990, r18	; 0x802990 <sqI>
     7c4:	4a 81       	ldd	r20, Y+2	; 0x02
     7c6:	40 93 91 29 	sts	0x2991, r20	; 0x802991 <sqI+0x1>
     7ca:	5b 81       	ldd	r21, Y+3	; 0x03
     7cc:	50 93 92 29 	sts	0x2992, r21	; 0x802992 <sqI+0x2>
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	80 93 93 29 	sts	0x2993, r24	; 0x802993 <sqI+0x3>
     7d6:	60 93 94 29 	sts	0x2994, r22	; 0x802994 <sqI+0x4>
     7da:	70 93 95 29 	sts	0x2995, r23	; 0x802995 <sqI+0x5>
     7de:	bf 81       	ldd	r27, Y+7	; 0x07
     7e0:	b0 93 96 29 	sts	0x2996, r27	; 0x802996 <sqI+0x6>
     7e4:	e8 85       	ldd	r30, Y+8	; 0x08
     7e6:	e0 93 97 29 	sts	0x2997, r30	; 0x802997 <sqI+0x7>
            sumI += sqI;
     7ea:	29 85       	ldd	r18, Y+9	; 0x09
     7ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ee:	4b 85       	ldd	r20, Y+11	; 0x0b
     7f0:	5c 85       	ldd	r21, Y+12	; 0x0c
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	9a 81       	ldd	r25, Y+2	; 0x02
     7f6:	ab 81       	ldd	r26, Y+3	; 0x03
     7f8:	bc 81       	ldd	r27, Y+4	; 0x04
     7fa:	28 0f       	add	r18, r24
     7fc:	39 1f       	adc	r19, r25
     7fe:	4a 1f       	adc	r20, r26
     800:	5b 1f       	adc	r21, r27
     802:	29 87       	std	Y+9, r18	; 0x09
     804:	3a 87       	std	Y+10, r19	; 0x0a
     806:	4b 87       	std	Y+11, r20	; 0x0b
     808:	5c 87       	std	Y+12, r21	; 0x0c
        for (uint16_t n = 0; n < SAMPLES; n++) {
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	a9 1a       	sub	r10, r25
     80e:	b1 08       	sbc	r11, r1
     810:	09 f0       	breq	.+2      	; 0x814 <measureCurrent+0x1d6>
     812:	5d cf       	rjmp	.-326    	; 0x6ce <measureCurrent+0x90>
        filteredCT[ct] = filteredI;
     814:	f6 01       	movw	r30, r12
     816:	34 97       	sbiw	r30, 0x04	; 4
     818:	40 82       	st	Z, r4
     81a:	51 82       	std	Z+1, r5	; 0x01
     81c:	62 82       	std	Z+2, r6	; 0x02
     81e:	73 82       	std	Z+3, r7	; 0x03
        tempIrms[ct] = sqrt((double)sumI/SAMPLES);
     820:	ca 01       	movw	r24, r20
     822:	b9 01       	movw	r22, r18
     824:	0e 94 bf 0c 	call	0x197e	; 0x197e <__floatsisf>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	5b e3       	ldi	r21, 0x3B	; 59
     830:	69 83       	std	Y+1, r22	; 0x01
     832:	7a 83       	std	Y+2, r23	; 0x02
     834:	8b 83       	std	Y+3, r24	; 0x03
     836:	9c 83       	std	Y+4, r25	; 0x04
     838:	69 81       	ldd	r22, Y+1	; 0x01
     83a:	7a 81       	ldd	r23, Y+2	; 0x02
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	9c 81       	ldd	r25, Y+4	; 0x04
     840:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     844:	69 83       	std	Y+1, r22	; 0x01
     846:	7a 83       	std	Y+2, r23	; 0x02
     848:	8b 83       	std	Y+3, r24	; 0x03
     84a:	9c 83       	std	Y+4, r25	; 0x04
     84c:	69 81       	ldd	r22, Y+1	; 0x01
     84e:	7a 81       	ldd	r23, Y+2	; 0x02
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <sqrt>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	d4 01       	movw	r26, r8
     862:	6d 93       	st	X+, r22
     864:	7d 93       	st	X+, r23
     866:	8d 93       	st	X+, r24
     868:	9d 93       	st	X+, r25
     86a:	4d 01       	movw	r8, r26
    for (uint16_t ct = 0; ct < NO_PHASE; ct++) {
     86c:	ef 85       	ldd	r30, Y+15	; 0x0f
     86e:	f8 89       	ldd	r31, Y+16	; 0x10
     870:	ea 52       	subi	r30, 0x2A	; 42
     872:	f9 42       	sbci	r31, 0x29	; 41
     874:	09 f0       	breq	.+2      	; 0x878 <measureCurrent+0x23a>
     876:	0b cf       	rjmp	.-490    	; 0x68e <measureCurrent+0x50>
     878:	0f e1       	ldi	r16, 0x1F	; 31
     87a:	1a e2       	ldi	r17, 0x2A	; 42
        Irms[i] = (uint16_t)(tempIrms[i] * 10);
     87c:	ed 85       	ldd	r30, Y+13	; 0x0d
     87e:	fe 85       	ldd	r31, Y+14	; 0x0e
     880:	81 91       	ld	r24, Z+
     882:	91 91       	ld	r25, Z+
     884:	a1 91       	ld	r26, Z+
     886:	b1 91       	ld	r27, Z+
     888:	ed 87       	std	Y+13, r30	; 0x0d
     88a:	fe 87       	std	Y+14, r31	; 0x0e
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	9a 83       	std	Y+2, r25	; 0x02
     890:	ab 83       	std	Y+3, r26	; 0x03
     892:	bc 83       	std	Y+4, r27	; 0x04
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e2       	ldi	r20, 0x20	; 32
     89a:	51 e4       	ldi	r21, 0x41	; 65
     89c:	bc 01       	movw	r22, r24
     89e:	cd 01       	movw	r24, r26
     8a0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     8a4:	69 83       	std	Y+1, r22	; 0x01
     8a6:	7a 83       	std	Y+2, r23	; 0x02
     8a8:	8b 83       	std	Y+3, r24	; 0x03
     8aa:	9c 83       	std	Y+4, r25	; 0x04
     8ac:	69 81       	ldd	r22, Y+1	; 0x01
     8ae:	7a 81       	ldd	r23, Y+2	; 0x02
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	9c 81       	ldd	r25, Y+4	; 0x04
     8b4:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
     8b8:	46 2f       	mov	r20, r22
     8ba:	57 2f       	mov	r21, r23
     8bc:	d8 01       	movw	r26, r16
     8be:	4d 93       	st	X+, r20
     8c0:	5d 93       	st	X+, r21
     8c2:	8d 01       	movw	r16, r26
    for (uint8_t i = 0; i < NO_PHASE; i++) {
     8c4:	e6 eb       	ldi	r30, 0xB6	; 182
     8c6:	f9 e2       	ldi	r31, 0x29	; 41
     8c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     8ca:	3e 85       	ldd	r19, Y+14	; 0x0e
     8cc:	e2 17       	cp	r30, r18
     8ce:	f3 07       	cpc	r31, r19
     8d0:	a9 f6       	brne	.-86     	; 0x87c <measureCurrent+0x23e>
}
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	60 96       	adiw	r28, 0x10	; 16
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	9f 90       	pop	r9
     8f0:	8f 90       	pop	r8
     8f2:	7f 90       	pop	r7
     8f4:	6f 90       	pop	r6
     8f6:	5f 90       	pop	r5
     8f8:	4f 90       	pop	r4
     8fa:	3f 90       	pop	r3
     8fc:	2f 90       	pop	r2
     8fe:	08 95       	ret

00000900 <pp_ohm>:
	    }
    }
    return 0;
}        

int8_t pp_ohm() {
     900:	cf 92       	push	r12
     902:	df 92       	push	r13
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	26 97       	sbiw	r28, 0x06	; 6
     916:	cd bf       	out	0x3d, r28	; 61
     918:	de bf       	out	0x3e, r29	; 62
    /* Calculate resistor value from ADC value */
    readPP();
     91a:	0e 94 02 02 	call	0x404	; 0x404 <readPP>
    float rtemp = (1000 * ((float)ppVal / 1024)) / (1 - ((float)ppVal / 1024));
     91e:	80 91 1d 2a 	lds	r24, 0x2A1D	; 0x802a1d <ppVal>
     922:	90 91 1e 2a 	lds	r25, 0x2A1E	; 0x802a1e <ppVal+0x1>
     926:	9c 01       	movw	r18, r24
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	29 83       	std	Y+1, r18	; 0x01
     92e:	3a 83       	std	Y+2, r19	; 0x02
     930:	4b 83       	std	Y+3, r20	; 0x03
     932:	5c 83       	std	Y+4, r21	; 0x04
     934:	ca 01       	movw	r24, r20
     936:	b9 01       	movw	r22, r18
     938:	0e 94 bd 0c 	call	0x197a	; 0x197a <__floatunsisf>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e8       	ldi	r20, 0x80	; 128
     942:	5a e3       	ldi	r21, 0x3A	; 58
     944:	69 83       	std	Y+1, r22	; 0x01
     946:	7a 83       	std	Y+2, r23	; 0x02
     948:	8b 83       	std	Y+3, r24	; 0x03
     94a:	9c 83       	std	Y+4, r25	; 0x04
     94c:	69 81       	ldd	r22, Y+1	; 0x01
     94e:	7a 81       	ldd	r23, Y+2	; 0x02
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	9c 81       	ldd	r25, Y+4	; 0x04
     954:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     958:	8b 01       	movw	r16, r22
     95a:	8e 83       	std	Y+6, r24	; 0x06
     95c:	9d 83       	std	Y+5, r25	; 0x05
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	4a e7       	ldi	r20, 0x7A	; 122
     964:	54 e4       	ldi	r21, 0x44	; 68
     966:	69 83       	std	Y+1, r22	; 0x01
     968:	1a 83       	std	Y+2, r17	; 0x02
     96a:	8b 83       	std	Y+3, r24	; 0x03
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	69 81       	ldd	r22, Y+1	; 0x01
     970:	7a 81       	ldd	r23, Y+2	; 0x02
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	9c 81       	ldd	r25, Y+4	; 0x04
     976:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     97a:	6b 01       	movw	r12, r22
     97c:	7c 01       	movw	r14, r24
     97e:	98 01       	movw	r18, r16
     980:	4e 81       	ldd	r20, Y+6	; 0x06
     982:	5d 81       	ldd	r21, Y+5	; 0x05
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	9f e3       	ldi	r25, 0x3F	; 63
     98c:	0e 94 af 0b 	call	0x175e	; 0x175e <__subsf3>
     990:	9b 01       	movw	r18, r22
     992:	ac 01       	movw	r20, r24
     994:	c9 82       	std	Y+1, r12	; 0x01
     996:	da 82       	std	Y+2, r13	; 0x02
     998:	eb 82       	std	Y+3, r14	; 0x03
     99a:	fc 82       	std	Y+4, r15	; 0x04
     99c:	69 81       	ldd	r22, Y+1	; 0x01
     99e:	7a 81       	ldd	r23, Y+2	; 0x02
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	9c 81       	ldd	r25, Y+4	; 0x04
     9a4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__divsf3>
    uint16_t r = (uint16_t)rtemp;
     9a8:	69 83       	std	Y+1, r22	; 0x01
     9aa:	7a 83       	std	Y+2, r23	; 0x02
     9ac:	8b 83       	std	Y+3, r24	; 0x03
     9ae:	9c 83       	std	Y+4, r25	; 0x04
     9b0:	69 81       	ldd	r22, Y+1	; 0x01
     9b2:	7a 81       	ldd	r23, Y+2	; 0x02
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
    printf("R_PP = %d\r\n", r);
     9bc:	7f 93       	push	r23
     9be:	6f 93       	push	r22
     9c0:	84 ef       	ldi	r24, 0xF4	; 244
     9c2:	95 e6       	ldi	r25, 0x65	; 101
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
    return 0;
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
}
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	26 96       	adiw	r28, 0x06	; 6
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	08 95       	ret

000009ee <cp_volt>:

int8_t cp_volt() {
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <cp_volt+0x6>
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <cp_volt+0x8>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
    /* Calculate voltage on cp line from ADC value */
    readCP();
     9fa:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
    float tempvolt = (((float)cpVal / 1024) * 24) - 12;
     9fe:	80 91 1b 2a 	lds	r24, 0x2A1B	; 0x802a1b <cpVal>
     a02:	90 91 1c 2a 	lds	r25, 0x2A1C	; 0x802a1c <cpVal+0x1>
     a06:	9c 01       	movw	r18, r24
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	29 83       	std	Y+1, r18	; 0x01
     a0e:	3a 83       	std	Y+2, r19	; 0x02
     a10:	4b 83       	std	Y+3, r20	; 0x03
     a12:	5c 83       	std	Y+4, r21	; 0x04
     a14:	ca 01       	movw	r24, r20
     a16:	b9 01       	movw	r22, r18
     a18:	0e 94 bd 0c 	call	0x197a	; 0x197a <__floatunsisf>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e8       	ldi	r20, 0x80	; 128
     a22:	5a e3       	ldi	r21, 0x3A	; 58
     a24:	69 83       	std	Y+1, r22	; 0x01
     a26:	7a 83       	std	Y+2, r23	; 0x02
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	9c 83       	std	Y+4, r25	; 0x04
     a2c:	69 81       	ldd	r22, Y+1	; 0x01
     a2e:	7a 81       	ldd	r23, Y+2	; 0x02
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 ec       	ldi	r20, 0xC0	; 192
     a3e:	51 e4       	ldi	r21, 0x41	; 65
     a40:	69 83       	std	Y+1, r22	; 0x01
     a42:	7a 83       	std	Y+2, r23	; 0x02
     a44:	8b 83       	std	Y+3, r24	; 0x03
     a46:	9c 83       	std	Y+4, r25	; 0x04
     a48:	69 81       	ldd	r22, Y+1	; 0x01
     a4a:	7a 81       	ldd	r23, Y+2	; 0x02
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e4       	ldi	r20, 0x40	; 64
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	69 83       	std	Y+1, r22	; 0x01
     a5e:	7a 83       	std	Y+2, r23	; 0x02
     a60:	8b 83       	std	Y+3, r24	; 0x03
     a62:	9c 83       	std	Y+4, r25	; 0x04
     a64:	69 81       	ldd	r22, Y+1	; 0x01
     a66:	7a 81       	ldd	r23, Y+2	; 0x02
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	0e 94 af 0b 	call	0x175e	; 0x175e <__subsf3>
    uint16_t volt = (uint16_t)tempvolt;
     a70:	69 83       	std	Y+1, r22	; 0x01
     a72:	7a 83       	std	Y+2, r23	; 0x02
     a74:	8b 83       	std	Y+3, r24	; 0x03
     a76:	9c 83       	std	Y+4, r25	; 0x04
     a78:	69 81       	ldd	r22, Y+1	; 0x01
     a7a:	7a 81       	ldd	r23, Y+2	; 0x02
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	9c 81       	ldd	r25, Y+4	; 0x04
     a80:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
    printf("V_CP = %d\r\n", volt);
     a84:	7f 93       	push	r23
     a86:	6f 93       	push	r22
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	96 e6       	ldi	r25, 0x66	; 102
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
    return 0;
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
}
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	24 96       	adiw	r28, 0x04	; 4
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <init>:
void init(void) {
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	00 d0       	rcall	.+0      	; 0xab0 <init+0x6>
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <init+0x8>
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
    CPU_CCP = CCP_IOREG_gc;                                             // enable writing to protected register
     ab6:	88 ed       	ldi	r24, 0xD8	; 216
     ab8:	84 bf       	out	0x34, r24	; 52
    CLKCTRL.MCLKCTRLB = (CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);          // set prescaler to 2 and enable it
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
     ac0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
     ac4:	80 fd       	sbrc	r24, 0
     ac6:	fc cf       	rjmp	.-8      	; 0xac0 <init+0x16>
    PORTD.DIRSET = LED;
     ac8:	88 e0       	ldi	r24, 0x08	; 8
     aca:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f4461>
    PORTD.DIRCLR = BUTTON;
     ace:	90 e1       	ldi	r25, 0x10	; 16
     ad0:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN4CTRL &= ~(PORT_ISC_gm);
     ad4:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
     ad8:	98 7f       	andi	r25, 0xF8	; 248
     ada:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
    PORTD.PIN4CTRL |= PORT_ISC_RISING_gc;
     ade:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
     ae2:	92 60       	ori	r25, 0x02	; 2
     ae4:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
    PORTD.PIN4CTRL &= ~PORT_PULLUPEN_bm;
     ae8:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
     aec:	97 7f       	andi	r25, 0xF7	; 247
     aee:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
    PORTA.DIRSET = (SSR1 | SSR2 | SSR3);
     af2:	90 e7       	ldi	r25, 0x70	; 112
     af4:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
    PORTA.OUTCLR = (SSR1 | SSR2 | SSR3);
     af8:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
    PORTA.DIRSET = RELAY;
     afc:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
    PORTA.OUTCLR = RELAY;
     b00:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f4406>
    PORTA.DIRSET = LOCK_R;
     b04:	90 e8       	ldi	r25, 0x80	; 128
     b06:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
    PORTA.OUTSET = LOCK_R;
     b0a:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    PORTC.DIRSET = LOCK_W;
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7f4441>
    PORTC.OUTSET = LOCK_W;
     b14:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
    PORTD.DIRCLR = LOCK_B;
     b18:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN2CTRL |= PORT_ISC_INTDISABLE_gc;
     b1c:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <__TEXT_REGION_LENGTH__+0x7f4472>
     b20:	20 93 72 04 	sts	0x0472, r18	; 0x800472 <__TEXT_REGION_LENGTH__+0x7f4472>
    PORTD.DIRCLR = CT0;
     b24:	20 e2       	ldi	r18, 0x20	; 32
     b26:	20 93 62 04 	sts	0x0462, r18	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN5CTRL &= ~PORT_ISC_gm;
     b2a:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f4475>
     b2e:	28 7f       	andi	r18, 0xF8	; 248
     b30:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f4475>
    PORTD.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     b34:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f4475>
     b38:	24 60       	ori	r18, 0x04	; 4
     b3a:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f4475>
    PORTD.PIN5CTRL &= ~PORT_PULLUPEN_bm;
     b3e:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f4475>
     b42:	27 7f       	andi	r18, 0xF7	; 247
     b44:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f4475>
    PORTD.DIRCLR = CT1;
     b48:	20 e4       	ldi	r18, 0x40	; 64
     b4a:	20 93 62 04 	sts	0x0462, r18	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     b4e:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <__TEXT_REGION_LENGTH__+0x7f4476>
     b52:	28 7f       	andi	r18, 0xF8	; 248
     b54:	20 93 76 04 	sts	0x0476, r18	; 0x800476 <__TEXT_REGION_LENGTH__+0x7f4476>
    PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     b58:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <__TEXT_REGION_LENGTH__+0x7f4476>
     b5c:	24 60       	ori	r18, 0x04	; 4
     b5e:	20 93 76 04 	sts	0x0476, r18	; 0x800476 <__TEXT_REGION_LENGTH__+0x7f4476>
    PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
     b62:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <__TEXT_REGION_LENGTH__+0x7f4476>
     b66:	27 7f       	andi	r18, 0xF7	; 247
     b68:	20 93 76 04 	sts	0x0476, r18	; 0x800476 <__TEXT_REGION_LENGTH__+0x7f4476>
    PORTD.DIRCLR = CT2;
     b6c:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN7CTRL &= ~PORT_ISC_gm;
     b70:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
     b74:	98 7f       	andi	r25, 0xF8	; 248
     b76:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
    PORTD.PIN7CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     b7a:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
     b7e:	94 60       	ori	r25, 0x04	; 4
     b80:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
    PORTD.PIN7CTRL &= ~PORT_PULLUPEN_bm;
     b84:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
     b88:	97 7f       	andi	r25, 0xF7	; 247
     b8a:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
    PORTD.DIRCLR = PP;
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN0CTRL &= ~PORT_ISC_gm;
     b94:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
     b98:	98 7f       	andi	r25, 0xF8	; 248
     b9a:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
    PORTD.PIN0CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     b9e:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
     ba2:	94 60       	ori	r25, 0x04	; 4
     ba4:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
    PORTD.PIN0CTRL &= ~PORT_PULLUPEN_bm;
     ba8:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
     bac:	97 7f       	andi	r25, 0xF7	; 247
     bae:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
    PORTD.DIRCLR = CP;
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <__TEXT_REGION_LENGTH__+0x7f4462>
    PORTD.PIN1CTRL &= ~PORT_ISC_gm;
     bb8:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
     bbc:	98 7f       	andi	r25, 0xF8	; 248
     bbe:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
    PORTD.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     bc2:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
     bc6:	94 60       	ori	r25, 0x04	; 4
     bc8:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
    PORTD.PIN1CTRL &= ~PORT_PULLUPEN_bm;
     bcc:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
     bd0:	97 7f       	andi	r25, 0xF7	; 247
     bd2:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
    PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTA_gc;
     bd6:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
    PORTA.DIRSET = PWM_OUT;
     bda:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
    PORTA.OUTSET = PWM_OUT;                                
     bde:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
    TCA0.SINGLE.CTRLA |= (TCA_PRESCALER_BM | TCA_SINGLE_ENABLE_bm);
     be2:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
     be6:	87 60       	ori	r24, 0x07	; 7
     be8:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
    TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_DSBOTTOM_gc;
     bec:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     bf0:	87 60       	ori	r24, 0x07	; 7
     bf2:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTEI_bm);
     bf6:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
     bfa:	8e 7f       	andi	r24, 0xFE	; 254
     bfc:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    TCA0.SINGLE.PERBUF = PWM_PERIOD(PWM_FREQ);
     c00:	81 e7       	ldi	r24, 0x71	; 113
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x7f4a36>
     c08:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x7f4a37>
    TCA0.SINGLE.CMP2BUF = (uint16_t)((1.0/100) * dutyCycle * PWM_PERIOD(PWM_FREQ));
     c0c:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <dutyCycle>
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	29 83       	std	Y+1, r18	; 0x01
     c1a:	3a 83       	std	Y+2, r19	; 0x02
     c1c:	4b 83       	std	Y+3, r20	; 0x03
     c1e:	5c 83       	std	Y+4, r21	; 0x04
     c20:	ca 01       	movw	r24, r20
     c22:	b9 01       	movw	r22, r18
     c24:	0e 94 bf 0c 	call	0x197e	; 0x197e <__floatsisf>
     c28:	2a e0       	ldi	r18, 0x0A	; 10
     c2a:	37 ed       	ldi	r19, 0xD7	; 215
     c2c:	43 e2       	ldi	r20, 0x23	; 35
     c2e:	5c e3       	ldi	r21, 0x3C	; 60
     c30:	69 83       	std	Y+1, r22	; 0x01
     c32:	7a 83       	std	Y+2, r23	; 0x02
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	69 81       	ldd	r22, Y+1	; 0x01
     c3a:	7a 81       	ldd	r23, Y+2	; 0x02
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e4       	ldi	r19, 0x40	; 64
     c48:	4c e1       	ldi	r20, 0x1C	; 28
     c4a:	54 e4       	ldi	r21, 0x44	; 68
     c4c:	69 83       	std	Y+1, r22	; 0x01
     c4e:	7a 83       	std	Y+2, r23	; 0x02
     c50:	8b 83       	std	Y+3, r24	; 0x03
     c52:	9c 83       	std	Y+4, r25	; 0x04
     c54:	69 81       	ldd	r22, Y+1	; 0x01
     c56:	7a 81       	ldd	r23, Y+2	; 0x02
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     c60:	69 83       	std	Y+1, r22	; 0x01
     c62:	7a 83       	std	Y+2, r23	; 0x02
     c64:	8b 83       	std	Y+3, r24	; 0x03
     c66:	9c 83       	std	Y+4, r25	; 0x04
     c68:	69 81       	ldd	r22, Y+1	; 0x01
     c6a:	7a 81       	ldd	r23, Y+2	; 0x02
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
     c74:	46 2f       	mov	r20, r22
     c76:	57 2f       	mov	r21, r23
     c78:	40 93 3c 0a 	sts	0x0A3C, r20	; 0x800a3c <__TEXT_REGION_LENGTH__+0x7f4a3c>
     c7c:	50 93 3d 0a 	sts	0x0A3D, r21	; 0x800a3d <__TEXT_REGION_LENGTH__+0x7f4a3d>
    TCA0.SINGLE.CTRLB &= ~TCA_SINGLE_CMP2EN_bm;
     c80:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     c84:	8f 7b       	andi	r24, 0xBF	; 191
     c86:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    RTC.CLKSEL |= RTC_CLKSEL_INT1K_gc;
     c8a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7f4147>
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__TEXT_REGION_LENGTH__+0x7f4147>
    RTC.PITINTCTRL |= RTC_PI_bm;
     c94:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__TEXT_REGION_LENGTH__+0x7f4152>
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x7f4152>
    RTC.PITCTRLA |= RTC_PERIOD_CYC1024_gc;
     c9e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f4150>
     ca2:	88 64       	ori	r24, 0x48	; 72
     ca4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f4150>
    RTC.PITCTRLA |= RTC_PITEN_bm;
     ca8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f4150>
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f4150>
    TCB0.CTRLA |= (TCB_CLKSEL_CLKTCA_gc);
     cb2:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
     cb6:	84 60       	ori	r24, 0x04	; 4
     cb8:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    TCB0.CTRLB |= (TCB_CNTMODE_INT_gc);
     cbc:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <__TEXT_REGION_LENGTH__+0x7f4a81>
     cc0:	80 93 81 0a 	sts	0x0A81, r24	; 0x800a81 <__TEXT_REGION_LENGTH__+0x7f4a81>
    TCB0.EVCTRL &= ~(TCB_CAPTEI_bm);
     cc4:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <__TEXT_REGION_LENGTH__+0x7f4a84>
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <__TEXT_REGION_LENGTH__+0x7f4a84>
    TCB0.INTCTRL |= TCB_CAPT_bm;
     cce:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <__TEXT_REGION_LENGTH__+0x7f4a85>
     cd2:	81 60       	ori	r24, 0x01	; 1
     cd4:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <__TEXT_REGION_LENGTH__+0x7f4a85>
    TCB0.CCMP = 0xFFFF;
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	9f ef       	ldi	r25, 0xFF	; 255
     cdc:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <__TEXT_REGION_LENGTH__+0x7f4a8c>
     ce0:	90 93 8d 0a 	sts	0x0A8D, r25	; 0x800a8d <__TEXT_REGION_LENGTH__+0x7f4a8d>
    TCB0.CTRLA |= TCB_ENABLE_bm;
     ce4:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    sigrow_offset = SIGROW.TEMPSENSE1;
     cee:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <__TEXT_REGION_LENGTH__+0x7f5121>
     cf2:	80 93 fc 29 	sts	0x29FC, r24	; 0x8029fc <sigrow_offset>
    sigrow_gain = SIGROW.TEMPSENSE0;
     cf6:	80 91 20 11 	lds	r24, 0x1120	; 0x801120 <__TEXT_REGION_LENGTH__+0x7f5120>
     cfa:	80 93 fb 29 	sts	0x29FB, r24	; 0x8029fb <sigrow_gain>
    VREF.CTRLA |= VREF_ADC0REFSEL_1V1_gc;
     cfe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f40a0>
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f40a0>
    VREF.CTRLB |= VREF_ADC0REFEN_bm;
     d08:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f40a1>
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f40a1>
    ADC0.CTRLC |= (ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc);
     d12:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     d16:	82 61       	ori	r24, 0x12	; 18
     d18:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    ADC0.CTRLD |= ADC_INITDLY_DLY0_gc;
     d1c:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
     d20:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
    ADC0.SAMPCTRL = 64;
     d24:	30 e4       	ldi	r19, 0x40	; 64
     d26:	30 93 05 06 	sts	0x0605, r19	; 0x800605 <__TEXT_REGION_LENGTH__+0x7f4605>
    ADC0.CTRLC |= ADC_SAMPCAP_bm;
     d2a:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
     d2e:	80 64       	ori	r24, 0x40	; 64
     d30:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    ADC0.CTRLA |= (ADC_RESSEL_10BIT_gc | ADC_ENABLE_bm);
     d34:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
        uart_init();
     d3e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <uart_init>
    rxbuffer.read = 0;
     d42:	10 92 82 29 	sts	0x2982, r1	; 0x802982 <rxbuffer+0x40>
    rxbuffer.write = 0;
     d46:	10 92 83 29 	sts	0x2983, r1	; 0x802983 <rxbuffer+0x41>
}
     d4a:	24 96       	adiw	r28, 0x04	; 4
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <pwm_set_duty_cycle>:
int8_t pwm_set_duty_cycle(uint8_t duty_cycle) {
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <pwm_set_duty_cycle+0x6>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <pwm_set_duty_cycle+0x8>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
    if (duty_cycle <= 100) {
     d62:	85 36       	cpi	r24, 0x65	; 101
     d64:	08 f0       	brcs	.+2      	; 0xd68 <pwm_set_duty_cycle+0x12>
     d66:	3f c0       	rjmp	.+126    	; 0xde6 <pwm_set_duty_cycle+0x90>
        TCA0.SINGLE.CMP2BUF = (uint16_t)((1.0/100) * duty_cycle * PWM_PERIOD(PWM_FREQ));
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	29 83       	std	Y+1, r18	; 0x01
     d72:	3a 83       	std	Y+2, r19	; 0x02
     d74:	4b 83       	std	Y+3, r20	; 0x03
     d76:	5c 83       	std	Y+4, r21	; 0x04
     d78:	ca 01       	movw	r24, r20
     d7a:	b9 01       	movw	r22, r18
     d7c:	0e 94 bf 0c 	call	0x197e	; 0x197e <__floatsisf>
     d80:	2a e0       	ldi	r18, 0x0A	; 10
     d82:	37 ed       	ldi	r19, 0xD7	; 215
     d84:	43 e2       	ldi	r20, 0x23	; 35
     d86:	5c e3       	ldi	r21, 0x3C	; 60
     d88:	69 83       	std	Y+1, r22	; 0x01
     d8a:	7a 83       	std	Y+2, r23	; 0x02
     d8c:	8b 83       	std	Y+3, r24	; 0x03
     d8e:	9c 83       	std	Y+4, r25	; 0x04
     d90:	69 81       	ldd	r22, Y+1	; 0x01
     d92:	7a 81       	ldd	r23, Y+2	; 0x02
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e4       	ldi	r19, 0x40	; 64
     da0:	4c e1       	ldi	r20, 0x1C	; 28
     da2:	54 e4       	ldi	r21, 0x44	; 68
     da4:	69 83       	std	Y+1, r22	; 0x01
     da6:	7a 83       	std	Y+2, r23	; 0x02
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	69 81       	ldd	r22, Y+1	; 0x01
     dae:	7a 81       	ldd	r23, Y+2	; 0x02
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__mulsf3>
     db8:	69 83       	std	Y+1, r22	; 0x01
     dba:	7a 83       	std	Y+2, r23	; 0x02
     dbc:	8b 83       	std	Y+3, r24	; 0x03
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	69 81       	ldd	r22, Y+1	; 0x01
     dc2:	7a 81       	ldd	r23, Y+2	; 0x02
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fixunssfsi>
     dcc:	46 2f       	mov	r20, r22
     dce:	57 2f       	mov	r21, r23
     dd0:	40 93 3c 0a 	sts	0x0A3C, r20	; 0x800a3c <__TEXT_REGION_LENGTH__+0x7f4a3c>
     dd4:	50 93 3d 0a 	sts	0x0A3D, r21	; 0x800a3d <__TEXT_REGION_LENGTH__+0x7f4a3d>
        return 0;        
     dd8:	80 e0       	ldi	r24, 0x00	; 0
}
     dda:	24 96       	adiw	r28, 0x04	; 4
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret
        return -1;
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	f8 cf       	rjmp	.-16     	; 0xdda <pwm_set_duty_cycle+0x84>

00000dea <set_current>:
    if ((current >= 60) && (current <= 510)) {
     dea:	9c 01       	movw	r18, r24
     dec:	2c 53       	subi	r18, 0x3C	; 60
     dee:	31 09       	sbc	r19, r1
     df0:	23 3c       	cpi	r18, 0xC3	; 195
     df2:	31 40       	sbci	r19, 0x01	; 1
     df4:	60 f4       	brcc	.+24     	; 0xe0e <set_current+0x24>
        dutyCycle = (uint8_t)(current / 6);
     df6:	66 e0       	ldi	r22, 0x06	; 6
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodhi4>
        dutyCycle = (uint8_t)(current / 25) + 64;
     dfe:	60 93 23 29 	sts	0x2923, r22	; 0x802923 <dutyCycle>
    pwm_set_duty_cycle(dutyCycle);
     e02:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <dutyCycle>
     e06:	0e 94 ab 06 	call	0xd56	; 0xd56 <pwm_set_duty_cycle>
}
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret
    else if ((current > 510) && (current <= 800)) {
     e0e:	9c 01       	movw	r18, r24
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	31 40       	sbci	r19, 0x01	; 1
     e14:	22 32       	cpi	r18, 0x22	; 34
     e16:	31 40       	sbci	r19, 0x01	; 1
     e18:	30 f4       	brcc	.+12     	; 0xe26 <set_current+0x3c>
        dutyCycle = (uint8_t)(current / 25) + 64;
     e1a:	69 e1       	ldi	r22, 0x19	; 25
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodhi4>
     e22:	60 5c       	subi	r22, 0xC0	; 192
     e24:	ec cf       	rjmp	.-40     	; 0xdfe <set_current+0x14>
        dutyCycle = 10;
     e26:	8a e0       	ldi	r24, 0x0A	; 10
     e28:	80 93 23 29 	sts	0x2923, r24	; 0x802923 <dutyCycle>
     e2c:	ea cf       	rjmp	.-44     	; 0xe02 <set_current+0x18>

00000e2e <toggle_access>:
    if (access_lock == 0) {
     e2e:	80 91 fa 29 	lds	r24, 0x29FA	; 0x8029fa <access_lock>
     e32:	81 11       	cpse	r24, r1
     e34:	07 c0       	rjmp	.+14     	; 0xe44 <toggle_access+0x16>
	    if (access == 0) {
     e36:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <access>
     e3a:	81 11       	cpse	r24, r1
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <toggle_access+0x1a>
	        access = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	80 93 fe 29 	sts	0x29FE, r24	; 0x8029fe <access>
}        
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	08 95       	ret
	    else if (access == 1) {
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <toggle_access+0x16>
	        access = 0;
     e4c:	10 92 fe 29 	sts	0x29FE, r1	; 0x8029fe <access>
     e50:	f9 cf       	rjmp	.-14     	; 0xe44 <toggle_access+0x16>

00000e52 <main>:

/*
    Application
    *************************************************/
int main(void) {
    init();
     e52:	0e 94 55 05 	call	0xaaa	; 0xaaa <init>
    sei();
     e56:	78 94       	sei
        line = uart0_readLine();
        cmd_parse(line);
    }
#endif
#ifdef PRODUCTION
    runlevel = 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 fd 29 	sts	0x29FD, r24	; 0x8029fd <runlevel>
    DEBUG_PRINT("PRODUCTION MODE...\r\n");
     e5e:	8c e0       	ldi	r24, 0x0C	; 12
     e60:	96 e6       	ldi	r25, 0x66	; 102
     e62:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
    DEBUG_PRINT("INITIALIZED...\r\n");
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	96 e6       	ldi	r25, 0x66	; 102
     e6a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
    DEBUG_PRINT("CURRENT STATE: A...\r\n");
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	96 e6       	ldi	r25, 0x66	; 102
     e72:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
    if (!SWITCH) {
        access = 1;
        DEBUG_PRINT("ACCESS BIT SET TO 1...\r\n");
    }
    else {
        access = 0;
     e76:	10 92 fe 29 	sts	0x29FE, r1	; 0x8029fe <access>
    uint8_t buttonstate_old = 0;
     e7a:	00 e0       	ldi	r16, 0x00	; 0
    uint8_t diodeCheck = 0;
     e7c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t count = 0;
     e7e:	10 e0       	ldi	r17, 0x00	; 0
        
        /* EVSE STATE A - No Vehicle connected */
        if (state == STATE_A) {
            /* Turn off PWM and set PWM output to static +12V*/
            pwm_off();
            PORTA.OUTSET = PWM_OUT;
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	b8 2e       	mov	r11, r24
                            chargeCurrent = maxCapacity;
                        }
                        else {
                            chargeCurrent = maxCurrent;
                        }
                        state = STATE_B;
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	f9 2e       	mov	r15, r25
        }
        
        /* EVSE STATE B - Vehicle connected, not ready for charging */
        if (state == STATE_B) {
            /* Set current and enable PWM */
            set_current(chargeCurrent * 10);
     e88:	2a e0       	ldi	r18, 0x0A	; 10
     e8a:	e2 2e       	mov	r14, r18
            /* Check at the end of PWM period for low level */
            if (TCA0.SINGLE.CNT > 550) {
                while (TCA0.SINGLE.CNT < 600);                              // Blocking, so low level is not missed at high duty cycles                  
	            if ((TCA0.SINGLE.CNT > 600) && (TCA0.SINGLE.CNT < 620)) {
	                readCP();
	                if (pilot == PILOT_DIODE) {
     e8c:	dd 24       	eor	r13, r13
     e8e:	d3 94       	inc	r13
                        nextState = STATE_C;
     e90:	33 e0       	ldi	r19, 0x03	; 3
     e92:	c3 2e       	mov	r12, r19
        uart0_readLoop();
     e94:	0e 94 93 0b 	call	0x1726	; 0x1726 <uart0_readLoop>
        if (rxflag == 1) {
     e98:	80 91 b7 29 	lds	r24, 0x29B7	; 0x8029b7 <rxflag>
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	41 f4       	brne	.+16     	; 0xeb0 <main+0x5e>
            cmd_parse(input);
     ea0:	88 eb       	ldi	r24, 0xB8	; 184
     ea2:	99 e2       	ldi	r25, 0x29	; 41
     ea4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <cmd_parse>
            rxflag = 0;
     ea8:	10 92 b7 29 	sts	0x29B7, r1	; 0x8029b7 <rxflag>
            input[0] = '\0';
     eac:	10 92 b8 29 	sts	0x29B8, r1	; 0x8029b8 <input>
        if (state == STATE_A) {
     eb0:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <state>
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	99 f4       	brne	.+38     	; 0xede <main+0x8c>
            pwm_off();
     eb8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pwm_off>
            PORTA.OUTSET = PWM_OUT;
     ebc:	b0 92 05 04 	sts	0x0405, r11	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f4405>
            all_ssr_off();
     ec0:	0e 94 af 01 	call	0x35e	; 0x35e <all_ssr_off>
            readCP();
     ec4:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
            if (pilot == PILOT_12V) {
     ec8:	80 91 1a 2a 	lds	r24, 0x2A1A	; 0x802a1a <pilot>
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	49 f4       	brne	.+18     	; 0xee2 <main+0x90>
                error &= ~(LESS_MIN_CURRENT);
     ed0:	80 91 06 2a 	lds	r24, 0x2A06	; 0x802a06 <error>
     ed4:	8e 7f       	andi	r24, 0xFE	; 254
     ed6:	80 93 06 2a 	sts	0x2A06, r24	; 0x802a06 <error>
                chargeDelay = 0;
     eda:	10 92 1a 29 	sts	0x291A, r1	; 0x80291a <chargeDelay>
            if (pilot == PILOT_9V) {
     ede:	c1 2f       	mov	r28, r17
     ee0:	26 c0       	rjmp	.+76     	; 0xf2e <main+0xdc>
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	e1 f7       	brne	.-8      	; 0xede <main+0x8c>
                if ((nextState == STATE_B)) {
     ee6:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <nextState>
     eea:	92 30       	cpi	r25, 0x02	; 2
     eec:	09 f0       	breq	.+2      	; 0xef0 <main+0x9e>
     eee:	63 c0       	rjmp	.+198    	; 0xfb6 <main+0x164>
                    if ((count++ > 25) && (error == NO_ERROR) && (chargeDelay == 0)) {
     ef0:	c1 e0       	ldi	r28, 0x01	; 1
     ef2:	c1 0f       	add	r28, r17
     ef4:	1a 31       	cpi	r17, 0x1A	; 26
     ef6:	d8 f0       	brcs	.+54     	; 0xf2e <main+0xdc>
     ef8:	80 91 06 2a 	lds	r24, 0x2A06	; 0x802a06 <error>
     efc:	90 91 1a 29 	lds	r25, 0x291A	; 0x80291a <chargeDelay>
     f00:	89 2b       	or	r24, r25
     f02:	a9 f4       	brne	.+42     	; 0xf2e <main+0xdc>
                        readPP();
     f04:	0e 94 02 02 	call	0x404	; 0x404 <readPP>
                        if (maxCurrent > maxCapacity) {
     f08:	80 91 1f 29 	lds	r24, 0x291F	; 0x80291f <maxCurrent>
     f0c:	90 91 05 2a 	lds	r25, 0x2A05	; 0x802a05 <maxCapacity>
     f10:	98 17       	cp	r25, r24
     f12:	08 f4       	brcc	.+2      	; 0xf16 <main+0xc4>
                            chargeCurrent = maxCapacity;
     f14:	89 2f       	mov	r24, r25
                            chargeCurrent = maxCurrent;
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	80 93 03 2a 	sts	0x2A03, r24	; 0x802a03 <chargeCurrent>
     f1c:	90 93 04 2a 	sts	0x2A04, r25	; 0x802a04 <chargeCurrent+0x1>
                        state = STATE_B;
     f20:	f0 92 1c 29 	sts	0x291C, r15	; 0x80291c <state>
                        DEBUG_PRINT("STATE A -> B\r\n");
     f24:	85 e4       	ldi	r24, 0x45	; 69
     f26:	96 e6       	ldi	r25, 0x66	; 102
     f28:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
                        diodeCheck = 0;
     f2c:	d0 e0       	ldi	r29, 0x00	; 0
        uart0_readLoop();
     f2e:	0e 94 93 0b 	call	0x1726	; 0x1726 <uart0_readLoop>
        if (rxflag == 1) {
     f32:	80 91 b7 29 	lds	r24, 0x29B7	; 0x8029b7 <rxflag>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	41 f4       	brne	.+16     	; 0xf4a <main+0xf8>
            cmd_parse(input);
     f3a:	88 eb       	ldi	r24, 0xB8	; 184
     f3c:	99 e2       	ldi	r25, 0x29	; 41
     f3e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <cmd_parse>
            rxflag = 0;
     f42:	10 92 b7 29 	sts	0x29B7, r1	; 0x8029b7 <rxflag>
            input[0] = '\0';
     f46:	10 92 b8 29 	sts	0x29B8, r1	; 0x8029b8 <input>
        if (state == STATE_B) {
     f4a:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <state>
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	09 f0       	breq	.+2      	; 0xf54 <main+0x102>
     f52:	5c c0       	rjmp	.+184    	; 0x100c <main+0x1ba>
            set_current(chargeCurrent * 10);
     f54:	80 91 03 2a 	lds	r24, 0x2A03	; 0x802a03 <chargeCurrent>
     f58:	90 91 04 2a 	lds	r25, 0x2A04	; 0x802a04 <chargeCurrent+0x1>
     f5c:	9c 01       	movw	r18, r24
     f5e:	e2 9e       	mul	r14, r18
     f60:	c0 01       	movw	r24, r0
     f62:	e3 9e       	mul	r14, r19
     f64:	90 0d       	add	r25, r0
     f66:	11 24       	eor	r1, r1
     f68:	0e 94 f5 06 	call	0xdea	; 0xdea <set_current>
            pwm_on();
     f6c:	0e 94 76 01 	call	0x2ec	; 0x2ec <pwm_on>
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
     f70:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     f74:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     f78:	02 97       	sbiw	r24, 0x02	; 2
     f7a:	20 f1       	brcs	.+72     	; 0xfc4 <main+0x172>
     f7c:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     f80:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     f84:	4e 97       	sbiw	r24, 0x1e	; 30
     f86:	f0 f4       	brcc	.+60     	; 0xfc4 <main+0x172>
                readCP();
     f88:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
                if (pilot == PILOT_12V) {
     f8c:	90 91 1a 2a 	lds	r25, 0x2A1A	; 0x802a1a <pilot>
     f90:	80 91 1b 29 	lds	r24, 0x291B	; 0x80291b <nextState>
     f94:	91 30       	cpi	r25, 0x01	; 1
     f96:	09 f0       	breq	.+2      	; 0xf9a <main+0x148>
     f98:	74 c0       	rjmp	.+232    	; 0x1082 <main+0x230>
                    if (nextState == STATE_A) {
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	81 f4       	brne	.+32     	; 0xfbe <main+0x16c>
                        if (count++ > 25) {
     f9e:	11 e0       	ldi	r17, 0x01	; 1
     fa0:	1c 0f       	add	r17, r28
     fa2:	ca 31       	cpi	r28, 0x1A	; 26
     fa4:	30 f0       	brcs	.+12     	; 0xfb2 <main+0x160>
                            state = STATE_A;
     fa6:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <state>
                            DEBUG_PRINT("STATE B -> A\r\n");
     faa:	83 e5       	ldi	r24, 0x53	; 83
     fac:	96 e6       	ldi	r25, 0x66	; 102
                                DEBUG_PRINT("STATE B -> C\r\n");
     fae:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
                        if (count++ > 25) {
     fb2:	c1 2f       	mov	r28, r17
     fb4:	07 c0       	rjmp	.+14     	; 0xfc4 <main+0x172>
                    nextState = STATE_B;
     fb6:	80 93 1b 29 	sts	0x291B, r24	; 0x80291b <nextState>
                    count = 0;
     fba:	c0 e0       	ldi	r28, 0x00	; 0
     fbc:	b8 cf       	rjmp	.-144    	; 0xf2e <main+0xdc>
                        nextState = STATE_A;
     fbe:	90 93 1b 29 	sts	0x291B, r25	; 0x80291b <nextState>
                        count = 0;
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
            if (TCA0.SINGLE.CNT > 550) {
     fc4:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     fc8:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     fcc:	87 32       	cpi	r24, 0x27	; 39
     fce:	92 40       	sbci	r25, 0x02	; 2
     fd0:	e8 f0       	brcs	.+58     	; 0x100c <main+0x1ba>
                while (TCA0.SINGLE.CNT < 600);                              // Blocking, so low level is not missed at high duty cycles                  
     fd2:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     fd6:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     fda:	88 35       	cpi	r24, 0x58	; 88
     fdc:	92 40       	sbci	r25, 0x02	; 2
     fde:	c8 f3       	brcs	.-14     	; 0xfd2 <main+0x180>
	            if ((TCA0.SINGLE.CNT > 600) && (TCA0.SINGLE.CNT < 620)) {
     fe0:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     fe4:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     fe8:	89 35       	cpi	r24, 0x59	; 89
     fea:	92 40       	sbci	r25, 0x02	; 2
     fec:	78 f0       	brcs	.+30     	; 0x100c <main+0x1ba>
     fee:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     ff2:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
     ff6:	8c 36       	cpi	r24, 0x6C	; 108
     ff8:	92 40       	sbci	r25, 0x02	; 2
     ffa:	40 f4       	brcc	.+16     	; 0x100c <main+0x1ba>
	                readCP();
     ffc:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
	                if (pilot == PILOT_DIODE) {
    1000:	d1 e0       	ldi	r29, 0x01	; 1
    1002:	80 91 1a 2a 	lds	r24, 0x2A1A	; 0x802a1a <pilot>
    1006:	84 30       	cpi	r24, 0x04	; 4
    1008:	09 f0       	breq	.+2      	; 0x100c <main+0x1ba>
    100a:	d0 e0       	ldi	r29, 0x00	; 0
	            }
            }
        }
        /* END OF STATE B */
        /* Check for new char in RX buffer */
        uart0_readLoop();
    100c:	0e 94 93 0b 	call	0x1726	; 0x1726 <uart0_readLoop>
        if (rxflag == 1) {
    1010:	80 91 b7 29 	lds	r24, 0x29B7	; 0x8029b7 <rxflag>
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	41 f4       	brne	.+16     	; 0x1028 <main+0x1d6>
            cmd_parse(input);
    1018:	88 eb       	ldi	r24, 0xB8	; 184
    101a:	99 e2       	ldi	r25, 0x29	; 41
    101c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <cmd_parse>
            rxflag = 0;
    1020:	10 92 b7 29 	sts	0x29B7, r1	; 0x8029b7 <rxflag>
            input[0] = '\0';
    1024:	10 92 b8 29 	sts	0x29B8, r1	; 0x8029b8 <input>
        }
             
        /* EVSE STATE C - Vehicle connected, ready for charging */
        if (state == STATE_C) {
    1028:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <state>
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	09 f0       	breq	.+2      	; 0x1032 <main+0x1e0>
    1030:	69 c0       	rjmp	.+210    	; 0x1104 <main+0x2b2>
            
            /* Measure CP at ~5% of PWM cycle */
            if ((TCA0.SINGLE.CNT > 1) && (TCA0.SINGLE.CNT < 30)) {
    1032:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
    1036:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
    103a:	02 97       	sbiw	r24, 0x02	; 2
    103c:	08 f4       	brcc	.+2      	; 0x1040 <main+0x1ee>
    103e:	62 c0       	rjmp	.+196    	; 0x1104 <main+0x2b2>
    1040:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
    1044:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
    1048:	4e 97       	sbiw	r24, 0x1e	; 30
    104a:	08 f0       	brcs	.+2      	; 0x104e <main+0x1fc>
    104c:	5b c0       	rjmp	.+182    	; 0x1104 <main+0x2b2>
                readCP();
    104e:	0e 94 cb 01 	call	0x396	; 0x396 <readCP>
                /* Disconnect or Error? */
                if ((pilot == PILOT_12V) || (pilot == PILOT_NOK)) {
    1052:	80 91 1a 2a 	lds	r24, 0x2A1A	; 0x802a1a <pilot>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	08 f0       	brcs	.+2      	; 0x105c <main+0x20a>
    105a:	3e c0       	rjmp	.+124    	; 0x10d8 <main+0x286>
                    if (nextState == STATE_A) {
    105c:	a0 90 1b 29 	lds	r10, 0x291B	; 0x80291b <nextState>
    1060:	31 e0       	ldi	r19, 0x01	; 1
    1062:	a3 12       	cpse	r10, r19
    1064:	35 c0       	rjmp	.+106    	; 0x10d0 <main+0x27e>
                        if (count++ > 25) {
    1066:	11 e0       	ldi	r17, 0x01	; 1
    1068:	1c 0f       	add	r17, r28
    106a:	ca 31       	cpi	r28, 0x1A	; 26
    106c:	40 f0       	brcs	.+16     	; 0x107e <main+0x22c>
                            all_ssr_off();
    106e:	0e 94 af 01 	call	0x35e	; 0x35e <all_ssr_off>
                            state = STATE_A;
    1072:	a0 92 1c 29 	sts	0x291C, r10	; 0x80291c <state>
                            DEBUG_PRINT("STATE C -> A\r\n");
    1076:	8f e6       	ldi	r24, 0x6F	; 111
    1078:	96 e6       	ldi	r25, 0x66	; 102
    107a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
                /* No state to switch to */
                else {
                    if (access != 1) {
                        /* Charge manually stopped */
                        if (nextState == STATE_B) {
                            if (count++ > 25) {
    107e:	c1 2f       	mov	r28, r17
    1080:	41 c0       	rjmp	.+130    	; 0x1104 <main+0x2b2>
                else if (pilot == PILOT_6V) {
    1082:	93 30       	cpi	r25, 0x03	; 3
    1084:	e9 f4       	brne	.+58     	; 0x10c0 <main+0x26e>
                    if ((nextState == STATE_C) && (diodeCheck == 1) && (access == 1)) {
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	c1 f4       	brne	.+48     	; 0x10ba <main+0x268>
    108a:	d1 30       	cpi	r29, 0x01	; 1
    108c:	b1 f4       	brne	.+44     	; 0x10ba <main+0x268>
    108e:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <access>
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 f4       	brne	.+36     	; 0x10ba <main+0x268>
                        if (count++ > 25) {
    1096:	11 e0       	ldi	r17, 0x01	; 1
    1098:	1c 0f       	add	r17, r28
    109a:	ca 31       	cpi	r28, 0x1A	; 26
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <main+0x24e>
    109e:	89 cf       	rjmp	.-238    	; 0xfb2 <main+0x160>
                            if ((error == NO_ERROR) && (chargeDelay == 0)) {
    10a0:	d0 91 06 2a 	lds	r29, 0x2A06	; 0x802a06 <error>
    10a4:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <chargeDelay>
    10a8:	d8 2b       	or	r29, r24
    10aa:	81 f4       	brne	.+32     	; 0x10cc <main+0x27a>
                                all_ssr_on();
    10ac:	0e 94 a5 01 	call	0x34a	; 0x34a <all_ssr_on>
                                state = STATE_C;
    10b0:	c0 92 1c 29 	sts	0x291C, r12	; 0x80291c <state>
                                DEBUG_PRINT("STATE B -> C\r\n");
    10b4:	81 e6       	ldi	r24, 0x61	; 97
    10b6:	96 e6       	ldi	r25, 0x66	; 102
    10b8:	7a cf       	rjmp	.-268    	; 0xfae <main+0x15c>
                        nextState = STATE_C;
    10ba:	c0 92 1b 29 	sts	0x291B, r12	; 0x80291b <nextState>
    10be:	81 cf       	rjmp	.-254    	; 0xfc2 <main+0x170>
                    if (nextState == STATE_B) {
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <main+0x274>
    10c4:	7f cf       	rjmp	.-258    	; 0xfc4 <main+0x172>
                        nextState = 0;
    10c6:	10 92 1b 29 	sts	0x291B, r1	; 0x80291b <nextState>
    10ca:	7c cf       	rjmp	.-264    	; 0xfc4 <main+0x172>
    10cc:	d1 e0       	ldi	r29, 0x01	; 1
    10ce:	71 cf       	rjmp	.-286    	; 0xfb2 <main+0x160>
                        nextState = STATE_A;
    10d0:	d0 92 1b 29 	sts	0x291B, r13	; 0x80291b <nextState>
                                diodeCheck = 0;
                            }
                        }
                        else {
                            nextState = STATE_B;
                            count = 0;
    10d4:	c0 e0       	ldi	r28, 0x00	; 0
    10d6:	16 c0       	rjmp	.+44     	; 0x1104 <main+0x2b2>
                else if (pilot == PILOT_9V) {
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	09 f0       	breq	.+2      	; 0x10de <main+0x28c>
    10dc:	d0 c0       	rjmp	.+416    	; 0x127e <main+0x42c>
                    if (nextState == STATE_B) {
    10de:	a0 90 1b 29 	lds	r10, 0x291B	; 0x80291b <nextState>
    10e2:	92 e0       	ldi	r25, 0x02	; 2
    10e4:	a9 12       	cpse	r10, r25
    10e6:	c8 c0       	rjmp	.+400    	; 0x1278 <main+0x426>
                            if (count++ > 25) {
    10e8:	11 e0       	ldi	r17, 0x01	; 1
    10ea:	1c 0f       	add	r17, r28
    10ec:	ca 31       	cpi	r28, 0x1A	; 26
    10ee:	38 f2       	brcs	.-114    	; 0x107e <main+0x22c>
                                all_ssr_off();
    10f0:	0e 94 af 01 	call	0x35e	; 0x35e <all_ssr_off>
                                state = STATE_B;
    10f4:	a0 92 1c 29 	sts	0x291C, r10	; 0x80291c <state>
                                DEBUG_PRINT("STATE C -> B\r\n");
    10f8:	8d e7       	ldi	r24, 0x7D	; 125
    10fa:	96 e6       	ldi	r25, 0x66	; 102
    10fc:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
                            if (count++ > 25) {
    1100:	c1 2f       	mov	r28, r17
                                diodeCheck = 0;
    1102:	d0 e0       	ldi	r29, 0x00	; 0
            }
        }
        /* END OF STATE C */
        
        /* UART reading and command parsing section */
        uart0_readLoop();
    1104:	0e 94 93 0b 	call	0x1726	; 0x1726 <uart0_readLoop>
        if (rxflag == 1) {
    1108:	80 91 b7 29 	lds	r24, 0x29B7	; 0x8029b7 <rxflag>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	41 f4       	brne	.+16     	; 0x1120 <main+0x2ce>
            cmd_parse(input);
    1110:	88 eb       	ldi	r24, 0xB8	; 184
    1112:	99 e2       	ldi	r25, 0x29	; 41
    1114:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <cmd_parse>
            rxflag = 0;
    1118:	10 92 b7 29 	sts	0x29B7, r1	; 0x8029b7 <rxflag>
            input[0] = '\0';
    111c:	10 92 b8 29 	sts	0x29B8, r1	; 0x8029b8 <input>
        }
        
        /* Millisecond timer */
        if (TCB0.CNT >= 1250) {
    1120:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <__TEXT_REGION_LENGTH__+0x7f4a8a>
    1124:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <__TEXT_REGION_LENGTH__+0x7f4a8b>
    1128:	82 3e       	cpi	r24, 0xE2	; 226
    112a:	94 40       	sbci	r25, 0x04	; 4
    112c:	08 f1       	brcs	.+66     	; 0x1170 <main+0x31e>
            systime++;
            mstime++;
    112e:	80 91 f8 29 	lds	r24, 0x29F8	; 0x8029f8 <mstime>
    1132:	90 91 f9 29 	lds	r25, 0x29F9	; 0x8029f9 <mstime+0x1>
            systime++;
    1136:	40 91 14 2a 	lds	r20, 0x2A14	; 0x802a14 <systime>
    113a:	50 91 15 2a 	lds	r21, 0x2A15	; 0x802a15 <systime+0x1>
    113e:	60 91 16 2a 	lds	r22, 0x2A16	; 0x802a16 <systime+0x2>
    1142:	70 91 17 2a 	lds	r23, 0x2A17	; 0x802a17 <systime+0x3>
    1146:	4f 5f       	subi	r20, 0xFF	; 255
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	6f 4f       	sbci	r22, 0xFF	; 255
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	40 93 14 2a 	sts	0x2A14, r20	; 0x802a14 <systime>
    1152:	50 93 15 2a 	sts	0x2A15, r21	; 0x802a15 <systime+0x1>
    1156:	60 93 16 2a 	sts	0x2A16, r22	; 0x802a16 <systime+0x2>
    115a:	70 93 17 2a 	sts	0x2A17, r23	; 0x802a17 <systime+0x3>
            mstime++;
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	80 93 f8 29 	sts	0x29F8, r24	; 0x8029f8 <mstime>
    1164:	90 93 f9 29 	sts	0x29F9, r25	; 0x8029f9 <mstime+0x1>
            TCB0.CNT = 0;
    1168:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <__TEXT_REGION_LENGTH__+0x7f4a8a>
    116c:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <__TEXT_REGION_LENGTH__+0x7f4a8b>
        }
        /* Seconds timer */
        /* Periodic actions */
        if (mstime >= 1000) {
    1170:	80 91 f8 29 	lds	r24, 0x29F8	; 0x8029f8 <mstime>
    1174:	90 91 f9 29 	lds	r25, 0x29F9	; 0x8029f9 <mstime+0x1>
    1178:	88 3e       	cpi	r24, 0xE8	; 232
    117a:	93 40       	sbci	r25, 0x03	; 3
    117c:	08 f4       	brcc	.+2      	; 0x1180 <main+0x32e>
    117e:	53 c0       	rjmp	.+166    	; 0x1226 <main+0x3d4>
            mstime = 0;
    1180:	10 92 f8 29 	sts	0x29F8, r1	; 0x8029f8 <mstime>
    1184:	10 92 f9 29 	sts	0x29F9, r1	; 0x8029f9 <mstime+0x1>
            sectime++;
    1188:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <sectime>
    118c:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <sectime+0x1>
    1190:	a0 91 12 2a 	lds	r26, 0x2A12	; 0x802a12 <sectime+0x2>
    1194:	b0 91 13 2a 	lds	r27, 0x2A13	; 0x802a13 <sectime+0x3>
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	a1 1d       	adc	r26, r1
    119c:	b1 1d       	adc	r27, r1
    119e:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <sectime>
    11a2:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <sectime+0x1>
    11a6:	a0 93 12 2a 	sts	0x2A12, r26	; 0x802a12 <sectime+0x2>
    11aa:	b0 93 13 2a 	sts	0x2A13, r27	; 0x802a13 <sectime+0x3>
            readTemp();
    11ae:	0e 94 b8 02 	call	0x570	; 0x570 <readTemp>
            
            if (temperature >= MAX_TEMP) {
    11b2:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <temperature>
    11b6:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <temperature+0x1>
    11ba:	84 35       	cpi	r24, 0x54	; 84
    11bc:	91 40       	sbci	r25, 0x01	; 1
    11be:	58 f0       	brcs	.+22     	; 0x11d6 <main+0x384>
                error |= TEMP_HIGH; 
    11c0:	80 91 06 2a 	lds	r24, 0x2A06	; 0x802a06 <error>
    11c4:	84 60       	ori	r24, 0x04	; 4
    11c6:	80 93 06 2a 	sts	0x2A06, r24	; 0x802a06 <error>
                state = STATE_A;            // Error, stop charging
    11ca:	d0 92 1c 29 	sts	0x291C, r13	; 0x80291c <state>
                DEBUG_PRINT("Overtemperature condition detected...stopping charge. \r\n");
    11ce:	8b e8       	ldi	r24, 0x8B	; 139
    11d0:	96 e6       	ldi	r25, 0x66	; 102
    11d2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
            }
            if ((temperature < (MAX_TEMP - 10)) && (error & TEMP_HIGH)) {
    11d6:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <temperature>
    11da:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <temperature+0x1>
    11de:	8a 34       	cpi	r24, 0x4A	; 74
    11e0:	91 40       	sbci	r25, 0x01	; 1
    11e2:	38 f4       	brcc	.+14     	; 0x11f2 <main+0x3a0>
    11e4:	80 91 06 2a 	lds	r24, 0x2A06	; 0x802a06 <error>
    11e8:	82 ff       	sbrs	r24, 2
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <main+0x3a0>
                error &= ~TEMP_HIGH;        // Clear error on cooling down
    11ec:	8b 7f       	andi	r24, 0xFB	; 251
    11ee:	80 93 06 2a 	sts	0x2A06, r24	; 0x802a06 <error>
            }
            
            /* Periodically check for changed chargeCurrent */
            if ((chargeCurrent != maxCurrent) && (chargeCurrent <= maxCapacity)) {
    11f2:	80 91 03 2a 	lds	r24, 0x2A03	; 0x802a03 <chargeCurrent>
    11f6:	90 91 04 2a 	lds	r25, 0x2A04	; 0x802a04 <chargeCurrent+0x1>
    11fa:	20 91 1f 29 	lds	r18, 0x291F	; 0x80291f <maxCurrent>
    11fe:	28 17       	cp	r18, r24
    1200:	19 06       	cpc	r1, r25
    1202:	69 f0       	breq	.+26     	; 0x121e <main+0x3cc>
    1204:	20 91 05 2a 	lds	r18, 0x2A05	; 0x802a05 <maxCapacity>
    1208:	28 17       	cp	r18, r24
    120a:	19 06       	cpc	r1, r25
    120c:	40 f0       	brcs	.+16     	; 0x121e <main+0x3cc>
                set_current(chargeCurrent * 10);
    120e:	9c 01       	movw	r18, r24
    1210:	e2 9e       	mul	r14, r18
    1212:	c0 01       	movw	r24, r0
    1214:	e3 9e       	mul	r14, r19
    1216:	90 0d       	add	r25, r0
    1218:	11 24       	eor	r1, r1
    121a:	0e 94 f5 06 	call	0xdea	; 0xdea <set_current>
            }
            /* Current measurement */
            measureCurrent();
    121e:	0e 94 1f 03 	call	0x63e	; 0x63e <measureCurrent>
                if ((lockstate == 0) && (error & UNLOCK_FAILED)) {
                    error &= ~UNLOCK_FAILED;
                    unlockAttempts = 0;
                }
            }
            access_lock = 0;            
    1222:	10 92 fa 29 	sts	0x29FA, r1	; 0x8029fa <access_lock>
        }
        
        /* Get buttonstate */
        buttonstate = (PORTD.IN & BUTTON) ? 1 : 0;
    1226:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
    122a:	82 95       	swap	r24
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <buttonstate>
        /* Detect state change with debouncing */
        if (buttonstate != buttonstate_old) {
    1232:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <buttonstate>
    1236:	08 17       	cp	r16, r24
    1238:	d9 f0       	breq	.+54     	; 0x1270 <main+0x41e>
	__builtin_avr_delay_cycles(__ticks_dc);
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	80 e7       	ldi	r24, 0x70	; 112
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	31 50       	subi	r19, 0x01	; 1
    1242:	80 40       	sbci	r24, 0x00	; 0
    1244:	90 40       	sbci	r25, 0x00	; 0
    1246:	e1 f7       	brne	.-8      	; 0x1240 <main+0x3ee>
    1248:	00 c0       	rjmp	.+0      	; 0x124a <main+0x3f8>
    124a:	00 00       	nop
            _delay_ms(80);
            buttonstate = (PORTD.IN & BUTTON) ? 1 : 0;
    124c:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <__TEXT_REGION_LENGTH__+0x7f4468>
    1250:	82 95       	swap	r24
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <buttonstate>
            if (buttonstate != buttonstate_old) {
    1258:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <buttonstate>
    125c:	08 17       	cp	r16, r24
    125e:	41 f0       	breq	.+16     	; 0x1270 <main+0x41e>
                /* detect rising edge, lock access toggling for 1sec. */
                if (buttonstate == 1) {
    1260:	10 91 0b 2a 	lds	r17, 0x2A0B	; 0x802a0b <buttonstate>
    1264:	11 30       	cpi	r17, 0x01	; 1
    1266:	21 f4       	brne	.+8      	; 0x1270 <main+0x41e>
                    toggle_access();
    1268:	0e 94 17 07 	call	0xe2e	; 0xe2e <toggle_access>
                    access_lock = 1;                    
    126c:	10 93 fa 29 	sts	0x29FA, r17	; 0x8029fa <access_lock>
                }

            }
        }
        buttonstate_old = buttonstate;
    1270:	00 91 0b 2a 	lds	r16, 0x2A0B	; 0x802a0b <buttonstate>
        uart0_readLoop();
    1274:	1c 2f       	mov	r17, r28
    1276:	0e ce       	rjmp	.-996    	; 0xe94 <main+0x42>
                        nextState = STATE_B;
    1278:	80 93 1b 29 	sts	0x291B, r24	; 0x80291b <nextState>
                        count = 0;
    127c:	2b cf       	rjmp	.-426    	; 0x10d4 <main+0x282>
                    if (access != 1) {
    127e:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <access>
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	49 f0       	breq	.+18     	; 0x1298 <main+0x446>
                        if (nextState == STATE_B) {
    1286:	a0 90 1b 29 	lds	r10, 0x291B	; 0x80291b <nextState>
    128a:	22 e0       	ldi	r18, 0x02	; 2
    128c:	a2 16       	cp	r10, r18
    128e:	09 f4       	brne	.+2      	; 0x1292 <main+0x440>
    1290:	2b cf       	rjmp	.-426    	; 0x10e8 <main+0x296>
                            nextState = STATE_B;
    1292:	f0 92 1b 29 	sts	0x291B, r15	; 0x80291b <nextState>
    1296:	1e cf       	rjmp	.-452    	; 0x10d4 <main+0x282>
                        nextState = 0;
    1298:	10 92 1b 29 	sts	0x291B, r1	; 0x80291b <nextState>
    129c:	33 cf       	rjmp	.-410    	; 0x1104 <main+0x2b2>

0000129e <cmd_exec>:
    *************************************************/

int8_t cmd_exec(uint8_t index) {
    int8_t retval = -2;                                 // set inital return value to -2 -> general failure
    /* Find and execute command from cmd table */
    if (cmd_table[index].cmd_func_ptr != NULL) {       
    129e:	94 e0       	ldi	r25, 0x04	; 4
    12a0:	89 9f       	mul	r24, r25
    12a2:	f0 01       	movw	r30, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	e6 55       	subi	r30, 0x56	; 86
    12a8:	f7 4d       	sbci	r31, 0xD7	; 215
    12aa:	02 80       	ldd	r0, Z+2	; 0x02
    12ac:	f3 81       	ldd	r31, Z+3	; 0x03
    12ae:	e0 2d       	mov	r30, r0
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <cmd_exec+0x18>
        retval = cmd_table[index].cmd_func_ptr();
    12b4:	09 94       	ijmp
    }
    return retval;
}
    12b6:	8e ef       	ldi	r24, 0xFE	; 254
    12b8:	08 95       	ret

000012ba <param_get>:
        return retval;
    }
    return retval;
}

int8_t param_get(char *param_string, uint32_t *param_value) {
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	08 2f       	mov	r16, r24
    12ce:	d9 2e       	mov	r13, r25
    12d0:	7b 01       	movw	r14, r22
    int8_t retval = -4;                                         // default return value -4 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
    12d2:	10 e0       	ldi	r17, 0x00	; 0
    int8_t retval = -4;                                         // default return value -4 -> parameter not found
    12d4:	8c ef       	ldi	r24, 0xFC	; 252
    12d6:	b8 2e       	mov	r11, r24
        if (strcmp((const char *)param_string, (const char *)param_table[i].param) == 0) {
    12d8:	95 e0       	ldi	r25, 0x05	; 5
    12da:	c9 2e       	mov	r12, r25
    12dc:	c1 9e       	mul	r12, r17
    12de:	e0 01       	movw	r28, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	c0 50       	subi	r28, 0x00	; 0
    12e4:	d8 4d       	sbci	r29, 0xD8	; 216
    12e6:	68 81       	ld	r22, Y
    12e8:	79 81       	ldd	r23, Y+1	; 0x01
    12ea:	80 2f       	mov	r24, r16
    12ec:	9d 2d       	mov	r25, r13
    12ee:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <strcmp>
    12f2:	89 2b       	or	r24, r25
    12f4:	b1 f4       	brne	.+44     	; 0x1322 <param_get+0x68>
            cli();
    12f6:	f8 94       	cli
            switch (param_table[i].size) {                      // cast pointer to the correct data type according to param table size info
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	80 31       	cpi	r24, 0x10	; 16
    12fc:	01 f1       	breq	.+64     	; 0x133e <param_get+0x84>
    12fe:	80 32       	cpi	r24, 0x20	; 32
    1300:	19 f1       	breq	.+70     	; 0x1348 <param_get+0x8e>
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	59 f4       	brne	.+22     	; 0x131c <param_get+0x62>
            case 8:
                *param_value = *(uint8_t *)param_table[i].value;
    1306:	ea 81       	ldd	r30, Y+2	; 0x02
    1308:	fb 81       	ldd	r31, Y+3	; 0x03
    130a:	80 81       	ld	r24, Z
    130c:	90 e0       	ldi	r25, 0x00	; 0
            	break;
            case 16:
                *param_value = *(uint16_t *)param_table[i].value;
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	a0 e0       	ldi	r26, 0x00	; 0
                break;
            case 32:
                *param_value = *(uint32_t *)param_table[i].value;
    1312:	f7 01       	movw	r30, r14
    1314:	80 83       	st	Z, r24
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	a2 83       	std	Z+2, r26	; 0x02
    131a:	b3 83       	std	Z+3, r27	; 0x03
                break;               
            }
            sei();
    131c:	78 94       	sei
            i = NO_PARAM;                                   // exit loop
    131e:	12 e2       	ldi	r17, 0x22	; 34
            retval = 0;
    1320:	b1 2c       	mov	r11, r1
    for (uint8_t i = 0; i < NO_PARAM; i++) {
    1322:	1f 5f       	subi	r17, 0xFF	; 255
    1324:	12 32       	cpi	r17, 0x22	; 34
    1326:	d0 f2       	brcs	.-76     	; 0x12dc <param_get+0x22>
        }
    }
    return retval;
}
    1328:	8b 2d       	mov	r24, r11
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	08 95       	ret
                *param_value = *(uint16_t *)param_table[i].value;
    133e:	ea 81       	ldd	r30, Y+2	; 0x02
    1340:	fb 81       	ldd	r31, Y+3	; 0x03
    1342:	80 81       	ld	r24, Z
    1344:	91 81       	ldd	r25, Z+1	; 0x01
    1346:	e3 cf       	rjmp	.-58     	; 0x130e <param_get+0x54>
                *param_value = *(uint32_t *)param_table[i].value;
    1348:	ea 81       	ldd	r30, Y+2	; 0x02
    134a:	fb 81       	ldd	r31, Y+3	; 0x03
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	a2 81       	ldd	r26, Z+2	; 0x02
    1352:	b3 81       	ldd	r27, Z+3	; 0x03
    1354:	de cf       	rjmp	.-68     	; 0x1312 <param_get+0x58>

00001356 <param_set>:

int8_t param_set(char *param_string, void *param_new_val_ptr) {
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	d8 2e       	mov	r13, r24
    136a:	c9 2e       	mov	r12, r25
    136c:	7b 01       	movw	r14, r22
    int8_t retval = -4;                                                     // default return value -2 -> parameter not found
    for (uint8_t i = 0; i < NO_PARAM; i++) {
    136e:	00 e0       	ldi	r16, 0x00	; 0
    int8_t retval = -4;                                                     // default return value -2 -> parameter not found
    1370:	1c ef       	ldi	r17, 0xFC	; 252
        if (strcmp(param_string, param_table[i].param) == 0) {
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	b8 2e       	mov	r11, r24
    1376:	b0 9e       	mul	r11, r16
    1378:	e0 01       	movw	r28, r0
    137a:	11 24       	eor	r1, r1
    137c:	c0 50       	subi	r28, 0x00	; 0
    137e:	d8 4d       	sbci	r29, 0xD8	; 216
    1380:	68 81       	ld	r22, Y
    1382:	79 81       	ldd	r23, Y+1	; 0x01
    1384:	8d 2d       	mov	r24, r13
    1386:	9c 2d       	mov	r25, r12
    1388:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <strcmp>
    138c:	89 2b       	or	r24, r25
    138e:	89 f4       	brne	.+34     	; 0x13b2 <param_set+0x5c>
            cli();
    1390:	f8 94       	cli
            switch (param_table[i].size) {                                           // cast pointer to the correct data type according to param table size info
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	80 31       	cpi	r24, 0x10	; 16
    1396:	d9 f0       	breq	.+54     	; 0x13ce <param_set+0x78>
    1398:	80 32       	cpi	r24, 0x20	; 32
    139a:	09 f1       	breq	.+66     	; 0x13de <param_set+0x88>
    139c:	1d ef       	ldi	r17, 0xFD	; 253
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	31 f4       	brne	.+12     	; 0x13ae <param_set+0x58>
            case 8:
                *(uint8_t *)param_table[i].value = *(uint8_t *)param_new_val_ptr;
    13a2:	ea 81       	ldd	r30, Y+2	; 0x02
    13a4:	fb 81       	ldd	r31, Y+3	; 0x03
    13a6:	d7 01       	movw	r26, r14
    13a8:	8c 91       	ld	r24, X
    13aa:	80 83       	st	Z, r24
                *(uint16_t *)param_table[i].value = *(uint16_t *)param_new_val_ptr;
                retval = 0;
                break;
            case 32:
                *(uint32_t *)param_table[i].value = *(uint32_t *)param_new_val_ptr;
                retval = 0;
    13ac:	10 e0       	ldi	r17, 0x00	; 0
                break; 
            default:
                retval = -3;                                                // default return value -3 -> invalid value size               
            }
            sei();
    13ae:	78 94       	sei
            i = NO_PARAM;                                               // exit loop
    13b0:	02 e2       	ldi	r16, 0x22	; 34
    for (uint8_t i = 0; i < NO_PARAM; i++) {
    13b2:	0f 5f       	subi	r16, 0xFF	; 255
    13b4:	02 32       	cpi	r16, 0x22	; 34
    13b6:	f8 f2       	brcs	.-66     	; 0x1376 <param_set+0x20>
        }
    }
    return retval;
}
    13b8:	81 2f       	mov	r24, r17
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	08 95       	ret
                *(uint16_t *)param_table[i].value = *(uint16_t *)param_new_val_ptr;
    13ce:	f7 01       	movw	r30, r14
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	ea 81       	ldd	r30, Y+2	; 0x02
    13d6:	fb 81       	ldd	r31, Y+3	; 0x03
    13d8:	80 83       	st	Z, r24
    13da:	91 83       	std	Z+1, r25	; 0x01
                break;
    13dc:	e7 cf       	rjmp	.-50     	; 0x13ac <param_set+0x56>
                *(uint32_t *)param_table[i].value = *(uint32_t *)param_new_val_ptr;
    13de:	f7 01       	movw	r30, r14
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	a2 81       	ldd	r26, Z+2	; 0x02
    13e6:	b3 81       	ldd	r27, Z+3	; 0x03
    13e8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ea:	fb 81       	ldd	r31, Y+3	; 0x03
    13ec:	80 83       	st	Z, r24
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	a2 83       	std	Z+2, r26	; 0x02
    13f2:	b3 83       	std	Z+3, r27	; 0x03
    13f4:	db cf       	rjmp	.-74     	; 0x13ac <param_set+0x56>

000013f6 <cmd_parse>:
int8_t cmd_parse(char *string) {
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	28 97       	sbiw	r28, 0x08	; 8
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	7c 01       	movw	r14, r24
    if (strcmp((const char *)string, "??") == 0) {
    1410:	62 ed       	ldi	r22, 0xD2	; 210
    1412:	78 e6       	ldi	r23, 0x68	; 104
    1414:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <strcmp>
    1418:	89 2b       	or	r24, r25
    141a:	09 f4       	brne	.+2      	; 0x141e <cmd_parse+0x28>
    141c:	b9 c0       	rjmp	.+370    	; 0x1590 <cmd_parse+0x19a>
    else if (strchr(string, CMD_GET) != NULL) {                                         
    141e:	6f e3       	ldi	r22, 0x3F	; 63
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	c7 01       	movw	r24, r14
    1424:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <strchr>
    1428:	89 2b       	or	r24, r25
    142a:	09 f4       	brne	.+2      	; 0x142e <cmd_parse+0x38>
    142c:	41 c0       	rjmp	.+130    	; 0x14b0 <cmd_parse+0xba>
        param = strtok(string, "?");
    142e:	63 ed       	ldi	r22, 0xD3	; 211
    1430:	78 e6       	ldi	r23, 0x68	; 104
    1432:	c7 01       	movw	r24, r14
    1434:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <strtok>
    1438:	08 2f       	mov	r16, r24
    143a:	d9 2e       	mov	r13, r25
        uint32_t param_val = 0;
    143c:	19 82       	std	Y+1, r1	; 0x01
    143e:	1a 82       	std	Y+2, r1	; 0x02
    1440:	1b 82       	std	Y+3, r1	; 0x03
    1442:	1c 82       	std	Y+4, r1	; 0x04
        retval = param_get(param, &param_val);
    1444:	be 01       	movw	r22, r28
    1446:	6f 5f       	subi	r22, 0xFF	; 255
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	0e 94 5d 09 	call	0x12ba	; 0x12ba <param_get>
    144e:	18 2f       	mov	r17, r24
        if (retval == 0) {
    1450:	81 11       	cpse	r24, r1
    1452:	12 c0       	rjmp	.+36     	; 0x1478 <cmd_parse+0x82>
            printf("%s = %"PRIu32"\r\n", param, param_val);               
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	8f 93       	push	r24
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	8f 93       	push	r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	8f 93       	push	r24
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	8f 93       	push	r24
    1464:	df 92       	push	r13
    1466:	0f 93       	push	r16
    1468:	82 ed       	ldi	r24, 0xD2	; 210
    146a:	99 e6       	ldi	r25, 0x69	; 105
    146c:	9f 93       	push	r25
    146e:	8f 93       	push	r24
    1470:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	de bf       	out	0x3e, r29	; 62
        command = "param_get";                      
    1478:	22 ee       	ldi	r18, 0xE2	; 226
    147a:	e2 2e       	mov	r14, r18
    147c:	27 e6       	ldi	r18, 0x67	; 103
    147e:	f2 2e       	mov	r15, r18
    switch (retval) {                                   // select appropriate feedback to return
    1480:	1e 3f       	cpi	r17, 0xFE	; 254
    1482:	09 f4       	brne	.+2      	; 0x1486 <cmd_parse+0x90>
    1484:	76 c0       	rjmp	.+236    	; 0x1572 <cmd_parse+0x17c>
    1486:	1f 3f       	cpi	r17, 0xFF	; 255
    1488:	0c f0       	brlt	.+2      	; 0x148c <cmd_parse+0x96>
    148a:	5d c0       	rjmp	.+186    	; 0x1546 <cmd_parse+0x150>
    148c:	1c 3f       	cpi	r17, 0xFC	; 252
    148e:	09 f4       	brne	.+2      	; 0x1492 <cmd_parse+0x9c>
    1490:	7a c0       	rjmp	.+244    	; 0x1586 <cmd_parse+0x190>
    1492:	1d 3f       	cpi	r17, 0xFD	; 253
    1494:	09 f4       	brne	.+2      	; 0x1498 <cmd_parse+0xa2>
    1496:	72 c0       	rjmp	.+228    	; 0x157c <cmd_parse+0x186>
}
    1498:	81 2f       	mov	r24, r17
    149a:	28 96       	adiw	r28, 0x08	; 8
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	08 95       	ret
    else if (strchr(string, CMD_SET) != NULL) {
    14b0:	6d e3       	ldi	r22, 0x3D	; 61
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	c7 01       	movw	r24, r14
    14b6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <strchr>
    14ba:	89 2b       	or	r24, r25
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <cmd_parse+0xca>
    14be:	6c c0       	rjmp	.+216    	; 0x1598 <cmd_parse+0x1a2>
        param = strtok(string, "=");
    14c0:	65 ed       	ldi	r22, 0xD5	; 213
    14c2:	78 e6       	ldi	r23, 0x68	; 104
    14c4:	c7 01       	movw	r24, r14
    14c6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <strtok>
    14ca:	08 2f       	mov	r16, r24
    14cc:	d9 2e       	mov	r13, r25
        char *str_value = strtok(NULL, "=");
    14ce:	65 ed       	ldi	r22, 0xD5	; 213
    14d0:	78 e6       	ldi	r23, 0x68	; 104
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <strtok>
        uint32_t value = (uint32_t)strtoul(str_value, NULL, 0);
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <strtoul>
    14e6:	6d 83       	std	Y+5, r22	; 0x05
    14e8:	7e 83       	std	Y+6, r23	; 0x06
    14ea:	8f 83       	std	Y+7, r24	; 0x07
    14ec:	98 87       	std	Y+8, r25	; 0x08
        retval = param_set(param, &value);
    14ee:	be 01       	movw	r22, r28
    14f0:	6b 5f       	subi	r22, 0xFB	; 251
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	80 2f       	mov	r24, r16
    14f6:	9d 2d       	mov	r25, r13
    14f8:	0e 94 ab 09 	call	0x1356	; 0x1356 <param_set>
    14fc:	18 2f       	mov	r17, r24
        if (retval == 0) {
    14fe:	81 11       	cpse	r24, r1
    1500:	1d c0       	rjmp	.+58     	; 0x153c <cmd_parse+0x146>
            uint32_t param_val = 0;
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	1a 82       	std	Y+2, r1	; 0x02
    1506:	1b 82       	std	Y+3, r1	; 0x03
    1508:	1c 82       	std	Y+4, r1	; 0x04
            param_get(param, &param_val);        
    150a:	be 01       	movw	r22, r28
    150c:	6f 5f       	subi	r22, 0xFF	; 255
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	80 2f       	mov	r24, r16
    1512:	9d 2d       	mov	r25, r13
    1514:	0e 94 5d 09 	call	0x12ba	; 0x12ba <param_get>
            printf("%s = %"PRIu32"\r\n", param, param_val);
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	8f 93       	push	r24
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	8f 93       	push	r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	8f 93       	push	r24
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	8f 93       	push	r24
    1528:	df 92       	push	r13
    152a:	0f 93       	push	r16
    152c:	82 ed       	ldi	r24, 0xD2	; 210
    152e:	99 e6       	ldi	r25, 0x69	; 105
    1530:	9f 93       	push	r25
    1532:	8f 93       	push	r24
    1534:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	de bf       	out	0x3e, r29	; 62
        command = "param_set";
    153c:	9c ee       	ldi	r25, 0xEC	; 236
    153e:	e9 2e       	mov	r14, r25
    1540:	97 e6       	ldi	r25, 0x67	; 103
    1542:	f9 2e       	mov	r15, r25
    1544:	9d cf       	rjmp	.-198    	; 0x1480 <cmd_parse+0x8a>
    switch (retval) {                                   // select appropriate feedback to return
    1546:	1f 3f       	cpi	r17, 0xFF	; 255
    1548:	39 f0       	breq	.+14     	; 0x1558 <cmd_parse+0x162>
    154a:	11 11       	cpse	r17, r1
    154c:	a5 cf       	rjmp	.-182    	; 0x1498 <cmd_parse+0xa2>
        printf("OK.\r\n");
    154e:	82 e9       	ldi	r24, 0x92	; 146
    1550:	99 e6       	ldi	r25, 0x69	; 105
    1552:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
        return retval;
    1556:	a0 cf       	rjmp	.-192    	; 0x1498 <cmd_parse+0xa2>
        printf("FAIL. Command %s not found in command table!\r\n", command);
    1558:	ff 92       	push	r15
    155a:	ef 92       	push	r14
    155c:	87 ed       	ldi	r24, 0xD7	; 215
    155e:	98 e6       	ldi	r25, 0x68	; 104
        printf("FAIL. Parameter %s not found in parameter table!\r\n", param);
    1560:	9f 93       	push	r25
    1562:	8f 93       	push	r24
    1564:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
        return retval;
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	93 cf       	rjmp	.-218    	; 0x1498 <cmd_parse+0xa2>
        printf("FAIL. Failed to execute command %s!\r\n", command);
    1572:	ff 92       	push	r15
    1574:	ef 92       	push	r14
    1576:	86 e0       	ldi	r24, 0x06	; 6
    1578:	99 e6       	ldi	r25, 0x69	; 105
    157a:	f2 cf       	rjmp	.-28     	; 0x1560 <cmd_parse+0x16a>
        printf("FAIL. Invalid options/parameters for command %s!\r\n", command);
    157c:	ff 92       	push	r15
    157e:	ef 92       	push	r14
    1580:	8c e2       	ldi	r24, 0x2C	; 44
    1582:	99 e6       	ldi	r25, 0x69	; 105
    1584:	ed cf       	rjmp	.-38     	; 0x1560 <cmd_parse+0x16a>
        printf("FAIL. Parameter %s not found in parameter table!\r\n", param);
    1586:	df 92       	push	r13
    1588:	0f 93       	push	r16
    158a:	8f e5       	ldi	r24, 0x5F	; 95
    158c:	99 e6       	ldi	r25, 0x69	; 105
    158e:	e8 cf       	rjmp	.-48     	; 0x1560 <cmd_parse+0x16a>
        command = "status";
    1590:	8b ed       	ldi	r24, 0xDB	; 219
    1592:	e8 2e       	mov	r14, r24
    1594:	87 e6       	ldi	r24, 0x67	; 103
    1596:	f8 2e       	mov	r15, r24
int8_t cmd_parse(char *string) {
    1598:	00 e0       	ldi	r16, 0x00	; 0
    159a:	1f ef       	ldi	r17, 0xFF	; 255
            if (strcmp(command, cmd_table[i].cmd) == 0) {
    159c:	b4 e0       	ldi	r27, 0x04	; 4
    159e:	0b 9f       	mul	r16, r27
    15a0:	f0 01       	movw	r30, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	e6 55       	subi	r30, 0x56	; 86
    15a6:	f7 4d       	sbci	r31, 0xD7	; 215
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	c7 01       	movw	r24, r14
    15ae:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <strcmp>
    15b2:	89 2b       	or	r24, r25
    15b4:	29 f4       	brne	.+10     	; 0x15c0 <cmd_parse+0x1ca>
                retval = cmd_exec(i);
    15b6:	80 2f       	mov	r24, r16
    15b8:	0e 94 4f 09 	call	0x129e	; 0x129e <cmd_exec>
    15bc:	18 2f       	mov	r17, r24
                i = NO_CMD;                             // exit loop
    15be:	0c e1       	ldi	r16, 0x1C	; 28
	    for (uint8_t i = 0; i < NO_CMD; i++) {
    15c0:	0f 5f       	subi	r16, 0xFF	; 255
    15c2:	0c 31       	cpi	r16, 0x1C	; 28
    15c4:	58 f3       	brcs	.-42     	; 0x159c <cmd_parse+0x1a6>
    15c6:	00 e0       	ldi	r16, 0x00	; 0
    15c8:	d1 2c       	mov	r13, r1
    15ca:	5a cf       	rjmp	.-332    	; 0x1480 <cmd_parse+0x8a>

000015cc <sys_status>:

int8_t sys_status() {
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	00 d0       	rcall	.+0      	; 0x15de <sys_status+0x12>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <sys_status+0x14>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    printf("$ Available commands:\r\n");                      // print all defined commands in cmd table
    15e4:	87 e9       	ldi	r24, 0x97	; 151
    15e6:	99 e6       	ldi	r25, 0x69	; 105
    15e8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
    for (uint8_t i = 0; i < NO_CMD; i++) {
    15ec:	0a ea       	ldi	r16, 0xAA	; 170
    15ee:	18 e2       	ldi	r17, 0x28	; 40
        const char* cmd = (const char*)cmd_table[i].cmd;
        if (strcmp(cmd, "\0") != 0) {
            printf("$ %s\r\n", cmd);
    15f0:	2e ea       	ldi	r18, 0xAE	; 174
    15f2:	e2 2e       	mov	r14, r18
    15f4:	29 e6       	ldi	r18, 0x69	; 105
    15f6:	f2 2e       	mov	r15, r18
        const char* cmd = (const char*)cmd_table[i].cmd;
    15f8:	d8 01       	movw	r26, r16
    15fa:	ed 91       	ld	r30, X+
    15fc:	fc 91       	ld	r31, X
        if (strcmp(cmd, "\0") != 0) {
    15fe:	80 81       	ld	r24, Z
    1600:	88 23       	and	r24, r24
    1602:	51 f0       	breq	.+20     	; 0x1618 <sys_status+0x4c>
            printf("$ %s\r\n", cmd);
    1604:	ff 93       	push	r31
    1606:	ef 93       	push	r30
    1608:	ff 92       	push	r15
    160a:	ef 92       	push	r14
    160c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    for (uint8_t i = 0; i < NO_CMD; i++) {
    1618:	0c 5f       	subi	r16, 0xFC	; 252
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	b9 e2       	ldi	r27, 0x29	; 41
    161e:	0a 31       	cpi	r16, 0x1A	; 26
    1620:	1b 07       	cpc	r17, r27
    1622:	51 f7       	brne	.-44     	; 0x15f8 <sys_status+0x2c>
        }
    }
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
    1624:	85 eb       	ldi	r24, 0xB5	; 181
    1626:	99 e6       	ldi	r25, 0x69	; 105
    1628:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
    for (uint8_t i = 0; i < NO_PARAM; i++) {
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	e8 2e       	mov	r14, r24
    1630:	88 e2       	ldi	r24, 0x28	; 40
    1632:	f8 2e       	mov	r15, r24
    printf("$ Defined parameters:\r\n");                      // print all defined parameters in param table
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	00 e0       	ldi	r16, 0x00	; 0
        uint32_t param_value = 0;
        if (strcmp((const char *)param_table[i].param, "\0") != 0) {
            param_get(param_table[i].param, &param_value);
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
    1638:	9c ec       	ldi	r25, 0xCC	; 204
    163a:	c9 2e       	mov	r12, r25
    163c:	99 e6       	ldi	r25, 0x69	; 105
    163e:	d9 2e       	mov	r13, r25
        uint32_t param_value = 0;
    1640:	19 82       	std	Y+1, r1	; 0x01
    1642:	1a 82       	std	Y+2, r1	; 0x02
    1644:	1b 82       	std	Y+3, r1	; 0x03
    1646:	1c 82       	std	Y+4, r1	; 0x04
        if (strcmp((const char *)param_table[i].param, "\0") != 0) {
    1648:	f7 01       	movw	r30, r14
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	dc 01       	movw	r26, r24
    1650:	2c 91       	ld	r18, X
    1652:	22 23       	and	r18, r18
    1654:	d1 f0       	breq	.+52     	; 0x168a <sys_status+0xbe>
            param_get(param_table[i].param, &param_value);
    1656:	be 01       	movw	r22, r28
    1658:	6f 5f       	subi	r22, 0xFF	; 255
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <param_get>
            printf("$ %d: %s = %"PRIu32"\r\n", i, param_table[i].param, param_value);
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	8f 93       	push	r24
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	8f 93       	push	r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	8f 93       	push	r24
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	8f 93       	push	r24
    1670:	f7 01       	movw	r30, r14
    1672:	81 81       	ldd	r24, Z+1	; 0x01
    1674:	8f 93       	push	r24
    1676:	80 81       	ld	r24, Z
    1678:	8f 93       	push	r24
    167a:	1f 93       	push	r17
    167c:	0f 93       	push	r16
    167e:	df 92       	push	r13
    1680:	cf 92       	push	r12
    1682:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <printf>
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	de bf       	out	0x3e, r29	; 62
    for (uint8_t i = 0; i < NO_PARAM; i++) {
    168a:	0f 5f       	subi	r16, 0xFF	; 255
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	95 e0       	ldi	r25, 0x05	; 5
    1690:	e9 0e       	add	r14, r25
    1692:	f1 1c       	adc	r15, r1
    1694:	02 32       	cpi	r16, 0x22	; 34
    1696:	11 05       	cpc	r17, r1
    1698:	99 f6       	brne	.-90     	; 0x1640 <sys_status+0x74>
        }

    }
    printf("$ Status message end #\r\n");
    169a:	8d ed       	ldi	r24, 0xDD	; 221
    169c:	99 e6       	ldi	r25, 0x69	; 105
    169e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <puts>
    return 0;
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	24 96       	adiw	r28, 0x04	; 4
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	08 95       	ret

000016bc <uart0_printChar>:
    #endif
}

static void uart0_sendChar(char c) {
    /* Send char c to TX0 pin */
    while (!(USART0.STATUS & USART_DREIF_bm)) {     // Check for completed transmission
    16bc:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
    16c0:	95 ff       	sbrs	r25, 5
    16c2:	fc cf       	rjmp	.-8      	; 0x16bc <uart0_printChar>
        ;
    }
    USART0.TXDATAL = c;
    16c4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
}

int uart0_printChar(char c, FILE *stream) {         // Wrapper for uart0_sendChar() using printf()
    uart0_sendChar(c);
    return 0;
}
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	08 95       	ret

000016ce <uart_init>:
        stdout = &uart0_stream;
    16ce:	8a e2       	ldi	r24, 0x2A	; 42
    16d0:	99 e2       	ldi	r25, 0x29	; 41
    16d2:	80 93 3c 29 	sts	0x293C, r24	; 0x80293c <__iob+0x2>
    16d6:	90 93 3d 29 	sts	0x293D, r25	; 0x80293d <__iob+0x3>
    USART0.BAUD = (uint16_t)USART_BAUD_RATE(BAUD0);
    16da:	e0 e0       	ldi	r30, 0x00	; 0
    16dc:	f8 e0       	ldi	r31, 0x08	; 8
    16de:	8b e5       	ldi	r24, 0x5B	; 91
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	80 87       	std	Z+8, r24	; 0x08
    16e4:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm);
    16e6:	85 81       	ldd	r24, Z+5	; 0x05
    16e8:	80 6e       	ori	r24, 0xE0	; 224
    16ea:	85 83       	std	Z+5, r24	; 0x05
    USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);
    16ec:	86 81       	ldd	r24, Z+6	; 0x06
    16ee:	80 6c       	ori	r24, 0xC0	; 192
    16f0:	86 83       	std	Z+6, r24	; 0x06
    PORTA.DIRSET = PIN0_bm;
    16f2:	e0 e0       	ldi	r30, 0x00	; 0
    16f4:	f4 e0       	ldi	r31, 0x04	; 4
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	21 83       	std	Z+1, r18	; 0x01
    PORTA.DIRCLR = PIN1_bm;
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	92 83       	std	Z+2, r25	; 0x02
    USART1.BAUD = (uint16_t)USART_BAUD_RATE(BAUD1);
    16fe:	e0 e2       	ldi	r30, 0x20	; 32
    1700:	f8 e0       	ldi	r31, 0x08	; 8
    1702:	47 e4       	ldi	r20, 0x47	; 71
    1704:	50 e1       	ldi	r21, 0x10	; 16
    1706:	40 87       	std	Z+8, r20	; 0x08
    1708:	51 87       	std	Z+9, r21	; 0x09
    USART1.CTRLA |= (USART_RXCIE_bm | USART_TXCIE_bm | USART_DREIE_bm | USART_RS485_EXT_gc); 
    170a:	85 81       	ldd	r24, Z+5	; 0x05
    170c:	81 6e       	ori	r24, 0xE1	; 225
    170e:	85 83       	std	Z+5, r24	; 0x05
    USART1.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);   
    1710:	86 81       	ldd	r24, Z+6	; 0x06
    1712:	80 6c       	ori	r24, 0xC0	; 192
    1714:	86 83       	std	Z+6, r24	; 0x06
    PORTC.DIRSET = PIN0_bm;                                              
    1716:	e0 e4       	ldi	r30, 0x40	; 64
    1718:	f4 e0       	ldi	r31, 0x04	; 4
    171a:	21 83       	std	Z+1, r18	; 0x01
    PORTC.DIRCLR = PIN1_bm;                                                
    171c:	92 83       	std	Z+2, r25	; 0x02
    PORTC.DIRSET = PIN3_bm;                                                
    171e:	88 e0       	ldi	r24, 0x08	; 8
    1720:	81 83       	std	Z+1, r24	; 0x01
    PORTC.OUTCLR = PIN3_bm;
    1722:	86 83       	std	Z+6, r24	; 0x06
}
    1724:	08 95       	ret

00001726 <uart0_readLoop>:
    }
    return USART0.RXDATAL;
}

void uart0_readLoop(){
    if (USART0.STATUS & USART_RXCIF_bm) {
    1726:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
    172a:	87 ff       	sbrs	r24, 7
    172c:	17 c0       	rjmp	.+46     	; 0x175c <uart0_readLoop+0x36>
        char c = USART0.RXDATAL;
    172e:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
        if ((c != '\r') && (c != '\n')) {
    1732:	9d 30       	cpi	r25, 0x0D	; 13
    1734:	99 f0       	breq	.+38     	; 0x175c <uart0_readLoop+0x36>
            input[idx++] = c;    
    1736:	80 91 b6 29 	lds	r24, 0x29B6	; 0x8029b6 <idx>
    173a:	e8 2f       	mov	r30, r24
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	e8 54       	subi	r30, 0x48	; 72
    1740:	f6 4d       	sbci	r31, 0xD6	; 214
        if ((c != '\r') && (c != '\n')) {
    1742:	9a 30       	cpi	r25, 0x0A	; 10
    1744:	29 f0       	breq	.+10     	; 0x1750 <uart0_readLoop+0x2a>
            input[idx++] = c;    
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	80 93 b6 29 	sts	0x29B6, r24	; 0x8029b6 <idx>
    174c:	90 83       	st	Z, r25
            input[idx] = '\0';
            idx = 0;
            rxflag = 1;
        }        
    }
}
    174e:	08 95       	ret
            input[idx] = '\0';
    1750:	10 82       	st	Z, r1
            idx = 0;
    1752:	10 92 b6 29 	sts	0x29B6, r1	; 0x8029b6 <idx>
            rxflag = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 b7 29 	sts	0x29B7, r24	; 0x8029b7 <rxflag>
}
    175c:	08 95       	ret

0000175e <__subsf3>:
    175e:	50 58       	subi	r21, 0x80	; 128

00001760 <__addsf3>:
    1760:	bb 27       	eor	r27, r27
    1762:	aa 27       	eor	r26, r26
    1764:	0e 94 c7 0b 	call	0x178e	; 0x178e <__addsf3x>
    1768:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__fp_round>
    176c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_pscA>
    1770:	38 f0       	brcs	.+14     	; 0x1780 <__addsf3+0x20>
    1772:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__fp_pscB>
    1776:	20 f0       	brcs	.+8      	; 0x1780 <__addsf3+0x20>
    1778:	39 f4       	brne	.+14     	; 0x1788 <__addsf3+0x28>
    177a:	9f 3f       	cpi	r25, 0xFF	; 255
    177c:	19 f4       	brne	.+6      	; 0x1784 <__addsf3+0x24>
    177e:	26 f4       	brtc	.+8      	; 0x1788 <__addsf3+0x28>
    1780:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__fp_nan>
    1784:	0e f4       	brtc	.+2      	; 0x1788 <__addsf3+0x28>
    1786:	e0 95       	com	r30
    1788:	e7 fb       	bst	r30, 7
    178a:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_inf>

0000178e <__addsf3x>:
    178e:	e9 2f       	mov	r30, r25
    1790:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_split3>
    1794:	58 f3       	brcs	.-42     	; 0x176c <__addsf3+0xc>
    1796:	ba 17       	cp	r27, r26
    1798:	62 07       	cpc	r22, r18
    179a:	73 07       	cpc	r23, r19
    179c:	84 07       	cpc	r24, r20
    179e:	95 07       	cpc	r25, r21
    17a0:	20 f0       	brcs	.+8      	; 0x17aa <__addsf3x+0x1c>
    17a2:	79 f4       	brne	.+30     	; 0x17c2 <__addsf3x+0x34>
    17a4:	a6 f5       	brtc	.+104    	; 0x180e <__DATA_REGION_LENGTH__+0xe>
    17a6:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__fp_zero>
    17aa:	0e f4       	brtc	.+2      	; 0x17ae <__addsf3x+0x20>
    17ac:	e0 95       	com	r30
    17ae:	0b 2e       	mov	r0, r27
    17b0:	ba 2f       	mov	r27, r26
    17b2:	a0 2d       	mov	r26, r0
    17b4:	0b 01       	movw	r0, r22
    17b6:	b9 01       	movw	r22, r18
    17b8:	90 01       	movw	r18, r0
    17ba:	0c 01       	movw	r0, r24
    17bc:	ca 01       	movw	r24, r20
    17be:	a0 01       	movw	r20, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	ff 27       	eor	r31, r31
    17c4:	59 1b       	sub	r21, r25
    17c6:	99 f0       	breq	.+38     	; 0x17ee <__addsf3x+0x60>
    17c8:	59 3f       	cpi	r21, 0xF9	; 249
    17ca:	50 f4       	brcc	.+20     	; 0x17e0 <__addsf3x+0x52>
    17cc:	50 3e       	cpi	r21, 0xE0	; 224
    17ce:	68 f1       	brcs	.+90     	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
    17d0:	1a 16       	cp	r1, r26
    17d2:	f0 40       	sbci	r31, 0x00	; 0
    17d4:	a2 2f       	mov	r26, r18
    17d6:	23 2f       	mov	r18, r19
    17d8:	34 2f       	mov	r19, r20
    17da:	44 27       	eor	r20, r20
    17dc:	58 5f       	subi	r21, 0xF8	; 248
    17de:	f3 cf       	rjmp	.-26     	; 0x17c6 <__addsf3x+0x38>
    17e0:	46 95       	lsr	r20
    17e2:	37 95       	ror	r19
    17e4:	27 95       	ror	r18
    17e6:	a7 95       	ror	r26
    17e8:	f0 40       	sbci	r31, 0x00	; 0
    17ea:	53 95       	inc	r21
    17ec:	c9 f7       	brne	.-14     	; 0x17e0 <__addsf3x+0x52>
    17ee:	7e f4       	brtc	.+30     	; 0x180e <__DATA_REGION_LENGTH__+0xe>
    17f0:	1f 16       	cp	r1, r31
    17f2:	ba 0b       	sbc	r27, r26
    17f4:	62 0b       	sbc	r22, r18
    17f6:	73 0b       	sbc	r23, r19
    17f8:	84 0b       	sbc	r24, r20
    17fa:	ba f0       	brmi	.+46     	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
    17fc:	91 50       	subi	r25, 0x01	; 1
    17fe:	a1 f0       	breq	.+40     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
    1800:	ff 0f       	add	r31, r31
    1802:	bb 1f       	adc	r27, r27
    1804:	66 1f       	adc	r22, r22
    1806:	77 1f       	adc	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	c2 f7       	brpl	.-16     	; 0x17fc <__addsf3x+0x6e>
    180c:	0e c0       	rjmp	.+28     	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
    180e:	ba 0f       	add	r27, r26
    1810:	62 1f       	adc	r22, r18
    1812:	73 1f       	adc	r23, r19
    1814:	84 1f       	adc	r24, r20
    1816:	48 f4       	brcc	.+18     	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
    1818:	87 95       	ror	r24
    181a:	77 95       	ror	r23
    181c:	67 95       	ror	r22
    181e:	b7 95       	ror	r27
    1820:	f7 95       	ror	r31
    1822:	9e 3f       	cpi	r25, 0xFE	; 254
    1824:	08 f0       	brcs	.+2      	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
    1826:	b0 cf       	rjmp	.-160    	; 0x1788 <__addsf3+0x28>
    1828:	93 95       	inc	r25
    182a:	88 0f       	add	r24, r24
    182c:	08 f0       	brcs	.+2      	; 0x1830 <__DATA_REGION_LENGTH__+0x30>
    182e:	99 27       	eor	r25, r25
    1830:	ee 0f       	add	r30, r30
    1832:	97 95       	ror	r25
    1834:	87 95       	ror	r24
    1836:	08 95       	ret

00001838 <__divsf3>:
    1838:	0e 94 30 0c 	call	0x1860	; 0x1860 <__divsf3x>
    183c:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__fp_round>
    1840:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__fp_pscB>
    1844:	58 f0       	brcs	.+22     	; 0x185c <__divsf3+0x24>
    1846:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_pscA>
    184a:	40 f0       	brcs	.+16     	; 0x185c <__divsf3+0x24>
    184c:	29 f4       	brne	.+10     	; 0x1858 <__divsf3+0x20>
    184e:	5f 3f       	cpi	r21, 0xFF	; 255
    1850:	29 f0       	breq	.+10     	; 0x185c <__divsf3+0x24>
    1852:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_inf>
    1856:	51 11       	cpse	r21, r1
    1858:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__fp_szero>
    185c:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__fp_nan>

00001860 <__divsf3x>:
    1860:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_split3>
    1864:	68 f3       	brcs	.-38     	; 0x1840 <__divsf3+0x8>

00001866 <__divsf3_pse>:
    1866:	99 23       	and	r25, r25
    1868:	b1 f3       	breq	.-20     	; 0x1856 <__divsf3+0x1e>
    186a:	55 23       	and	r21, r21
    186c:	91 f3       	breq	.-28     	; 0x1852 <__divsf3+0x1a>
    186e:	95 1b       	sub	r25, r21
    1870:	55 0b       	sbc	r21, r21
    1872:	bb 27       	eor	r27, r27
    1874:	aa 27       	eor	r26, r26
    1876:	62 17       	cp	r22, r18
    1878:	73 07       	cpc	r23, r19
    187a:	84 07       	cpc	r24, r20
    187c:	38 f0       	brcs	.+14     	; 0x188c <__divsf3_pse+0x26>
    187e:	9f 5f       	subi	r25, 0xFF	; 255
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	22 0f       	add	r18, r18
    1884:	33 1f       	adc	r19, r19
    1886:	44 1f       	adc	r20, r20
    1888:	aa 1f       	adc	r26, r26
    188a:	a9 f3       	breq	.-22     	; 0x1876 <__divsf3_pse+0x10>
    188c:	35 d0       	rcall	.+106    	; 0x18f8 <__divsf3_pse+0x92>
    188e:	0e 2e       	mov	r0, r30
    1890:	3a f0       	brmi	.+14     	; 0x18a0 <__divsf3_pse+0x3a>
    1892:	e0 e8       	ldi	r30, 0x80	; 128
    1894:	32 d0       	rcall	.+100    	; 0x18fa <__divsf3_pse+0x94>
    1896:	91 50       	subi	r25, 0x01	; 1
    1898:	50 40       	sbci	r21, 0x00	; 0
    189a:	e6 95       	lsr	r30
    189c:	00 1c       	adc	r0, r0
    189e:	ca f7       	brpl	.-14     	; 0x1892 <__divsf3_pse+0x2c>
    18a0:	2b d0       	rcall	.+86     	; 0x18f8 <__divsf3_pse+0x92>
    18a2:	fe 2f       	mov	r31, r30
    18a4:	29 d0       	rcall	.+82     	; 0x18f8 <__divsf3_pse+0x92>
    18a6:	66 0f       	add	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	bb 1f       	adc	r27, r27
    18ae:	26 17       	cp	r18, r22
    18b0:	37 07       	cpc	r19, r23
    18b2:	48 07       	cpc	r20, r24
    18b4:	ab 07       	cpc	r26, r27
    18b6:	b0 e8       	ldi	r27, 0x80	; 128
    18b8:	09 f0       	breq	.+2      	; 0x18bc <__divsf3_pse+0x56>
    18ba:	bb 0b       	sbc	r27, r27
    18bc:	80 2d       	mov	r24, r0
    18be:	bf 01       	movw	r22, r30
    18c0:	ff 27       	eor	r31, r31
    18c2:	93 58       	subi	r25, 0x83	; 131
    18c4:	5f 4f       	sbci	r21, 0xFF	; 255
    18c6:	3a f0       	brmi	.+14     	; 0x18d6 <__divsf3_pse+0x70>
    18c8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ca:	51 05       	cpc	r21, r1
    18cc:	78 f0       	brcs	.+30     	; 0x18ec <__divsf3_pse+0x86>
    18ce:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_inf>
    18d2:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__fp_szero>
    18d6:	5f 3f       	cpi	r21, 0xFF	; 255
    18d8:	e4 f3       	brlt	.-8      	; 0x18d2 <__divsf3_pse+0x6c>
    18da:	98 3e       	cpi	r25, 0xE8	; 232
    18dc:	d4 f3       	brlt	.-12     	; 0x18d2 <__divsf3_pse+0x6c>
    18de:	86 95       	lsr	r24
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	b7 95       	ror	r27
    18e6:	f7 95       	ror	r31
    18e8:	9f 5f       	subi	r25, 0xFF	; 255
    18ea:	c9 f7       	brne	.-14     	; 0x18de <__divsf3_pse+0x78>
    18ec:	88 0f       	add	r24, r24
    18ee:	91 1d       	adc	r25, r1
    18f0:	96 95       	lsr	r25
    18f2:	87 95       	ror	r24
    18f4:	97 f9       	bld	r25, 7
    18f6:	08 95       	ret
    18f8:	e1 e0       	ldi	r30, 0x01	; 1
    18fa:	66 0f       	add	r22, r22
    18fc:	77 1f       	adc	r23, r23
    18fe:	88 1f       	adc	r24, r24
    1900:	bb 1f       	adc	r27, r27
    1902:	62 17       	cp	r22, r18
    1904:	73 07       	cpc	r23, r19
    1906:	84 07       	cpc	r24, r20
    1908:	ba 07       	cpc	r27, r26
    190a:	20 f0       	brcs	.+8      	; 0x1914 <__divsf3_pse+0xae>
    190c:	62 1b       	sub	r22, r18
    190e:	73 0b       	sbc	r23, r19
    1910:	84 0b       	sbc	r24, r20
    1912:	ba 0b       	sbc	r27, r26
    1914:	ee 1f       	adc	r30, r30
    1916:	88 f7       	brcc	.-30     	; 0x18fa <__divsf3_pse+0x94>
    1918:	e0 95       	com	r30
    191a:	08 95       	ret

0000191c <__fixunssfsi>:
    191c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_splitA>
    1920:	88 f0       	brcs	.+34     	; 0x1944 <__fixunssfsi+0x28>
    1922:	9f 57       	subi	r25, 0x7F	; 127
    1924:	98 f0       	brcs	.+38     	; 0x194c <__fixunssfsi+0x30>
    1926:	b9 2f       	mov	r27, r25
    1928:	99 27       	eor	r25, r25
    192a:	b7 51       	subi	r27, 0x17	; 23
    192c:	b0 f0       	brcs	.+44     	; 0x195a <__fixunssfsi+0x3e>
    192e:	e1 f0       	breq	.+56     	; 0x1968 <__fixunssfsi+0x4c>
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	1a f0       	brmi	.+6      	; 0x1940 <__fixunssfsi+0x24>
    193a:	ba 95       	dec	r27
    193c:	c9 f7       	brne	.-14     	; 0x1930 <__fixunssfsi+0x14>
    193e:	14 c0       	rjmp	.+40     	; 0x1968 <__fixunssfsi+0x4c>
    1940:	b1 30       	cpi	r27, 0x01	; 1
    1942:	91 f0       	breq	.+36     	; 0x1968 <__fixunssfsi+0x4c>
    1944:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__fp_zero>
    1948:	b1 e0       	ldi	r27, 0x01	; 1
    194a:	08 95       	ret
    194c:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__fp_zero>
    1950:	67 2f       	mov	r22, r23
    1952:	78 2f       	mov	r23, r24
    1954:	88 27       	eor	r24, r24
    1956:	b8 5f       	subi	r27, 0xF8	; 248
    1958:	39 f0       	breq	.+14     	; 0x1968 <__fixunssfsi+0x4c>
    195a:	b9 3f       	cpi	r27, 0xF9	; 249
    195c:	cc f3       	brlt	.-14     	; 0x1950 <__fixunssfsi+0x34>
    195e:	86 95       	lsr	r24
    1960:	77 95       	ror	r23
    1962:	67 95       	ror	r22
    1964:	b3 95       	inc	r27
    1966:	d9 f7       	brne	.-10     	; 0x195e <__fixunssfsi+0x42>
    1968:	3e f4       	brtc	.+14     	; 0x1978 <__fixunssfsi+0x5c>
    196a:	90 95       	com	r25
    196c:	80 95       	com	r24
    196e:	70 95       	com	r23
    1970:	61 95       	neg	r22
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	8f 4f       	sbci	r24, 0xFF	; 255
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	08 95       	ret

0000197a <__floatunsisf>:
    197a:	e8 94       	clt
    197c:	09 c0       	rjmp	.+18     	; 0x1990 <__floatsisf+0x12>

0000197e <__floatsisf>:
    197e:	97 fb       	bst	r25, 7
    1980:	3e f4       	brtc	.+14     	; 0x1990 <__floatsisf+0x12>
    1982:	90 95       	com	r25
    1984:	80 95       	com	r24
    1986:	70 95       	com	r23
    1988:	61 95       	neg	r22
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	8f 4f       	sbci	r24, 0xFF	; 255
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	99 23       	and	r25, r25
    1992:	a9 f0       	breq	.+42     	; 0x19be <__floatsisf+0x40>
    1994:	f9 2f       	mov	r31, r25
    1996:	96 e9       	ldi	r25, 0x96	; 150
    1998:	bb 27       	eor	r27, r27
    199a:	93 95       	inc	r25
    199c:	f6 95       	lsr	r31
    199e:	87 95       	ror	r24
    19a0:	77 95       	ror	r23
    19a2:	67 95       	ror	r22
    19a4:	b7 95       	ror	r27
    19a6:	f1 11       	cpse	r31, r1
    19a8:	f8 cf       	rjmp	.-16     	; 0x199a <__floatsisf+0x1c>
    19aa:	fa f4       	brpl	.+62     	; 0x19ea <__floatsisf+0x6c>
    19ac:	bb 0f       	add	r27, r27
    19ae:	11 f4       	brne	.+4      	; 0x19b4 <__floatsisf+0x36>
    19b0:	60 ff       	sbrs	r22, 0
    19b2:	1b c0       	rjmp	.+54     	; 0x19ea <__floatsisf+0x6c>
    19b4:	6f 5f       	subi	r22, 0xFF	; 255
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	16 c0       	rjmp	.+44     	; 0x19ea <__floatsisf+0x6c>
    19be:	88 23       	and	r24, r24
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <__floatsisf+0x48>
    19c2:	96 e9       	ldi	r25, 0x96	; 150
    19c4:	11 c0       	rjmp	.+34     	; 0x19e8 <__floatsisf+0x6a>
    19c6:	77 23       	and	r23, r23
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <__floatsisf+0x54>
    19ca:	9e e8       	ldi	r25, 0x8E	; 142
    19cc:	87 2f       	mov	r24, r23
    19ce:	76 2f       	mov	r23, r22
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <__floatsisf+0x5e>
    19d2:	66 23       	and	r22, r22
    19d4:	71 f0       	breq	.+28     	; 0x19f2 <__floatsisf+0x74>
    19d6:	96 e8       	ldi	r25, 0x86	; 134
    19d8:	86 2f       	mov	r24, r22
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	2a f0       	brmi	.+10     	; 0x19ea <__floatsisf+0x6c>
    19e0:	9a 95       	dec	r25
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	88 1f       	adc	r24, r24
    19e8:	da f7       	brpl	.-10     	; 0x19e0 <__floatsisf+0x62>
    19ea:	88 0f       	add	r24, r24
    19ec:	96 95       	lsr	r25
    19ee:	87 95       	ror	r24
    19f0:	97 f9       	bld	r25, 7
    19f2:	08 95       	ret

000019f4 <__fp_inf>:
    19f4:	97 f9       	bld	r25, 7
    19f6:	9f 67       	ori	r25, 0x7F	; 127
    19f8:	80 e8       	ldi	r24, 0x80	; 128
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	08 95       	ret

00001a00 <__fp_nan>:
    1a00:	9f ef       	ldi	r25, 0xFF	; 255
    1a02:	80 ec       	ldi	r24, 0xC0	; 192
    1a04:	08 95       	ret

00001a06 <__fp_pscA>:
    1a06:	00 24       	eor	r0, r0
    1a08:	0a 94       	dec	r0
    1a0a:	16 16       	cp	r1, r22
    1a0c:	17 06       	cpc	r1, r23
    1a0e:	18 06       	cpc	r1, r24
    1a10:	09 06       	cpc	r0, r25
    1a12:	08 95       	ret

00001a14 <__fp_pscB>:
    1a14:	00 24       	eor	r0, r0
    1a16:	0a 94       	dec	r0
    1a18:	12 16       	cp	r1, r18
    1a1a:	13 06       	cpc	r1, r19
    1a1c:	14 06       	cpc	r1, r20
    1a1e:	05 06       	cpc	r0, r21
    1a20:	08 95       	ret

00001a22 <__fp_round>:
    1a22:	09 2e       	mov	r0, r25
    1a24:	03 94       	inc	r0
    1a26:	00 0c       	add	r0, r0
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <__fp_round+0xc>
    1a2a:	88 23       	and	r24, r24
    1a2c:	52 f0       	brmi	.+20     	; 0x1a42 <__fp_round+0x20>
    1a2e:	bb 0f       	add	r27, r27
    1a30:	40 f4       	brcc	.+16     	; 0x1a42 <__fp_round+0x20>
    1a32:	bf 2b       	or	r27, r31
    1a34:	11 f4       	brne	.+4      	; 0x1a3a <__fp_round+0x18>
    1a36:	60 ff       	sbrs	r22, 0
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__fp_round+0x20>
    1a3a:	6f 5f       	subi	r22, 0xFF	; 255
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	08 95       	ret

00001a44 <__fp_split3>:
    1a44:	57 fd       	sbrc	r21, 7
    1a46:	90 58       	subi	r25, 0x80	; 128
    1a48:	44 0f       	add	r20, r20
    1a4a:	55 1f       	adc	r21, r21
    1a4c:	59 f0       	breq	.+22     	; 0x1a64 <__fp_splitA+0x10>
    1a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a50:	71 f0       	breq	.+28     	; 0x1a6e <__fp_splitA+0x1a>
    1a52:	47 95       	ror	r20

00001a54 <__fp_splitA>:
    1a54:	88 0f       	add	r24, r24
    1a56:	97 fb       	bst	r25, 7
    1a58:	99 1f       	adc	r25, r25
    1a5a:	61 f0       	breq	.+24     	; 0x1a74 <__fp_splitA+0x20>
    1a5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5e:	79 f0       	breq	.+30     	; 0x1a7e <__fp_splitA+0x2a>
    1a60:	87 95       	ror	r24
    1a62:	08 95       	ret
    1a64:	12 16       	cp	r1, r18
    1a66:	13 06       	cpc	r1, r19
    1a68:	14 06       	cpc	r1, r20
    1a6a:	55 1f       	adc	r21, r21
    1a6c:	f2 cf       	rjmp	.-28     	; 0x1a52 <__fp_split3+0xe>
    1a6e:	46 95       	lsr	r20
    1a70:	f1 df       	rcall	.-30     	; 0x1a54 <__fp_splitA>
    1a72:	08 c0       	rjmp	.+16     	; 0x1a84 <__fp_splitA+0x30>
    1a74:	16 16       	cp	r1, r22
    1a76:	17 06       	cpc	r1, r23
    1a78:	18 06       	cpc	r1, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	f1 cf       	rjmp	.-30     	; 0x1a60 <__fp_splitA+0xc>
    1a7e:	86 95       	lsr	r24
    1a80:	71 05       	cpc	r23, r1
    1a82:	61 05       	cpc	r22, r1
    1a84:	08 94       	sec
    1a86:	08 95       	ret

00001a88 <__fp_zero>:
    1a88:	e8 94       	clt

00001a8a <__fp_szero>:
    1a8a:	bb 27       	eor	r27, r27
    1a8c:	66 27       	eor	r22, r22
    1a8e:	77 27       	eor	r23, r23
    1a90:	cb 01       	movw	r24, r22
    1a92:	97 f9       	bld	r25, 7
    1a94:	08 95       	ret

00001a96 <__mulsf3>:
    1a96:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3x>
    1a9a:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__fp_round>
    1a9e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_pscA>
    1aa2:	38 f0       	brcs	.+14     	; 0x1ab2 <__mulsf3+0x1c>
    1aa4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__fp_pscB>
    1aa8:	20 f0       	brcs	.+8      	; 0x1ab2 <__mulsf3+0x1c>
    1aaa:	95 23       	and	r25, r21
    1aac:	11 f0       	breq	.+4      	; 0x1ab2 <__mulsf3+0x1c>
    1aae:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_inf>
    1ab2:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__fp_nan>
    1ab6:	11 24       	eor	r1, r1
    1ab8:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__fp_szero>

00001abc <__mulsf3x>:
    1abc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_split3>
    1ac0:	70 f3       	brcs	.-36     	; 0x1a9e <__mulsf3+0x8>

00001ac2 <__mulsf3_pse>:
    1ac2:	95 9f       	mul	r25, r21
    1ac4:	c1 f3       	breq	.-16     	; 0x1ab6 <__mulsf3+0x20>
    1ac6:	95 0f       	add	r25, r21
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	55 1f       	adc	r21, r21
    1acc:	62 9f       	mul	r22, r18
    1ace:	f0 01       	movw	r30, r0
    1ad0:	72 9f       	mul	r23, r18
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	f0 0d       	add	r31, r0
    1ad6:	b1 1d       	adc	r27, r1
    1ad8:	63 9f       	mul	r22, r19
    1ada:	aa 27       	eor	r26, r26
    1adc:	f0 0d       	add	r31, r0
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	aa 1f       	adc	r26, r26
    1ae2:	64 9f       	mul	r22, r20
    1ae4:	66 27       	eor	r22, r22
    1ae6:	b0 0d       	add	r27, r0
    1ae8:	a1 1d       	adc	r26, r1
    1aea:	66 1f       	adc	r22, r22
    1aec:	82 9f       	mul	r24, r18
    1aee:	22 27       	eor	r18, r18
    1af0:	b0 0d       	add	r27, r0
    1af2:	a1 1d       	adc	r26, r1
    1af4:	62 1f       	adc	r22, r18
    1af6:	73 9f       	mul	r23, r19
    1af8:	b0 0d       	add	r27, r0
    1afa:	a1 1d       	adc	r26, r1
    1afc:	62 1f       	adc	r22, r18
    1afe:	83 9f       	mul	r24, r19
    1b00:	a0 0d       	add	r26, r0
    1b02:	61 1d       	adc	r22, r1
    1b04:	22 1f       	adc	r18, r18
    1b06:	74 9f       	mul	r23, r20
    1b08:	33 27       	eor	r19, r19
    1b0a:	a0 0d       	add	r26, r0
    1b0c:	61 1d       	adc	r22, r1
    1b0e:	23 1f       	adc	r18, r19
    1b10:	84 9f       	mul	r24, r20
    1b12:	60 0d       	add	r22, r0
    1b14:	21 1d       	adc	r18, r1
    1b16:	82 2f       	mov	r24, r18
    1b18:	76 2f       	mov	r23, r22
    1b1a:	6a 2f       	mov	r22, r26
    1b1c:	11 24       	eor	r1, r1
    1b1e:	9f 57       	subi	r25, 0x7F	; 127
    1b20:	50 40       	sbci	r21, 0x00	; 0
    1b22:	9a f0       	brmi	.+38     	; 0x1b4a <__mulsf3_pse+0x88>
    1b24:	f1 f0       	breq	.+60     	; 0x1b62 <__mulsf3_pse+0xa0>
    1b26:	88 23       	and	r24, r24
    1b28:	4a f0       	brmi	.+18     	; 0x1b3c <__mulsf3_pse+0x7a>
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	bb 1f       	adc	r27, r27
    1b30:	66 1f       	adc	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	91 50       	subi	r25, 0x01	; 1
    1b38:	50 40       	sbci	r21, 0x00	; 0
    1b3a:	a9 f7       	brne	.-22     	; 0x1b26 <__mulsf3_pse+0x64>
    1b3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3e:	51 05       	cpc	r21, r1
    1b40:	80 f0       	brcs	.+32     	; 0x1b62 <__mulsf3_pse+0xa0>
    1b42:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_inf>
    1b46:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__fp_szero>
    1b4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b4c:	e4 f3       	brlt	.-8      	; 0x1b46 <__mulsf3_pse+0x84>
    1b4e:	98 3e       	cpi	r25, 0xE8	; 232
    1b50:	d4 f3       	brlt	.-12     	; 0x1b46 <__mulsf3_pse+0x84>
    1b52:	86 95       	lsr	r24
    1b54:	77 95       	ror	r23
    1b56:	67 95       	ror	r22
    1b58:	b7 95       	ror	r27
    1b5a:	f7 95       	ror	r31
    1b5c:	e7 95       	ror	r30
    1b5e:	9f 5f       	subi	r25, 0xFF	; 255
    1b60:	c1 f7       	brne	.-16     	; 0x1b52 <__mulsf3_pse+0x90>
    1b62:	fe 2b       	or	r31, r30
    1b64:	88 0f       	add	r24, r24
    1b66:	91 1d       	adc	r25, r1
    1b68:	96 95       	lsr	r25
    1b6a:	87 95       	ror	r24
    1b6c:	97 f9       	bld	r25, 7
    1b6e:	08 95       	ret
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <__mulsf3_pse+0xb6>
    1b72:	16 f4       	brtc	.+4      	; 0x1b78 <__mulsf3_pse+0xb6>
    1b74:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__fp_nan>
    1b78:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_mpack>

00001b7c <sqrt>:
    1b7c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__fp_splitA>
    1b80:	b8 f3       	brcs	.-18     	; 0x1b70 <__mulsf3_pse+0xae>
    1b82:	99 23       	and	r25, r25
    1b84:	c9 f3       	breq	.-14     	; 0x1b78 <__mulsf3_pse+0xb6>
    1b86:	b6 f3       	brts	.-20     	; 0x1b74 <__mulsf3_pse+0xb2>
    1b88:	9f 57       	subi	r25, 0x7F	; 127
    1b8a:	55 0b       	sbc	r21, r21
    1b8c:	87 ff       	sbrs	r24, 7
    1b8e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__fp_norm2>
    1b92:	00 24       	eor	r0, r0
    1b94:	a0 e6       	ldi	r26, 0x60	; 96
    1b96:	40 ea       	ldi	r20, 0xA0	; 160
    1b98:	90 01       	movw	r18, r0
    1b9a:	80 58       	subi	r24, 0x80	; 128
    1b9c:	56 95       	lsr	r21
    1b9e:	97 95       	ror	r25
    1ba0:	28 f4       	brcc	.+10     	; 0x1bac <sqrt+0x30>
    1ba2:	80 5c       	subi	r24, 0xC0	; 192
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	20 f0       	brcs	.+8      	; 0x1bb4 <sqrt+0x38>
    1bac:	26 17       	cp	r18, r22
    1bae:	37 07       	cpc	r19, r23
    1bb0:	48 07       	cpc	r20, r24
    1bb2:	30 f4       	brcc	.+12     	; 0x1bc0 <sqrt+0x44>
    1bb4:	62 1b       	sub	r22, r18
    1bb6:	73 0b       	sbc	r23, r19
    1bb8:	84 0b       	sbc	r24, r20
    1bba:	20 29       	or	r18, r0
    1bbc:	31 29       	or	r19, r1
    1bbe:	4a 2b       	or	r20, r26
    1bc0:	a6 95       	lsr	r26
    1bc2:	17 94       	ror	r1
    1bc4:	07 94       	ror	r0
    1bc6:	20 25       	eor	r18, r0
    1bc8:	31 25       	eor	r19, r1
    1bca:	4a 27       	eor	r20, r26
    1bcc:	58 f7       	brcc	.-42     	; 0x1ba4 <sqrt+0x28>
    1bce:	66 0f       	add	r22, r22
    1bd0:	77 1f       	adc	r23, r23
    1bd2:	88 1f       	adc	r24, r24
    1bd4:	20 f0       	brcs	.+8      	; 0x1bde <sqrt+0x62>
    1bd6:	26 17       	cp	r18, r22
    1bd8:	37 07       	cpc	r19, r23
    1bda:	48 07       	cpc	r20, r24
    1bdc:	30 f4       	brcc	.+12     	; 0x1bea <sqrt+0x6e>
    1bde:	62 0b       	sbc	r22, r18
    1be0:	73 0b       	sbc	r23, r19
    1be2:	84 0b       	sbc	r24, r20
    1be4:	20 0d       	add	r18, r0
    1be6:	31 1d       	adc	r19, r1
    1be8:	41 1d       	adc	r20, r1
    1bea:	a0 95       	com	r26
    1bec:	81 f7       	brne	.-32     	; 0x1bce <sqrt+0x52>
    1bee:	b9 01       	movw	r22, r18
    1bf0:	84 2f       	mov	r24, r20
    1bf2:	91 58       	subi	r25, 0x81	; 129
    1bf4:	88 0f       	add	r24, r24
    1bf6:	96 95       	lsr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	08 95       	ret

00001bfc <__fp_mpack>:
    1bfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1bfe:	31 f0       	breq	.+12     	; 0x1c0c <__fp_mpack_finite+0xc>

00001c00 <__fp_mpack_finite>:
    1c00:	91 50       	subi	r25, 0x01	; 1
    1c02:	20 f4       	brcc	.+8      	; 0x1c0c <__fp_mpack_finite+0xc>
    1c04:	87 95       	ror	r24
    1c06:	77 95       	ror	r23
    1c08:	67 95       	ror	r22
    1c0a:	b7 95       	ror	r27
    1c0c:	88 0f       	add	r24, r24
    1c0e:	91 1d       	adc	r25, r1
    1c10:	96 95       	lsr	r25
    1c12:	87 95       	ror	r24
    1c14:	97 f9       	bld	r25, 7
    1c16:	08 95       	ret

00001c18 <__fp_norm2>:
    1c18:	91 50       	subi	r25, 0x01	; 1
    1c1a:	50 40       	sbci	r21, 0x00	; 0
    1c1c:	66 0f       	add	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	88 1f       	adc	r24, r24
    1c22:	d2 f7       	brpl	.-12     	; 0x1c18 <__fp_norm2>
    1c24:	08 95       	ret

00001c26 <__mulsi3>:
    1c26:	db 01       	movw	r26, r22
    1c28:	8f 93       	push	r24
    1c2a:	9f 93       	push	r25
    1c2c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__muluhisi3>
    1c30:	bf 91       	pop	r27
    1c32:	af 91       	pop	r26
    1c34:	a2 9f       	mul	r26, r18
    1c36:	80 0d       	add	r24, r0
    1c38:	91 1d       	adc	r25, r1
    1c3a:	a3 9f       	mul	r26, r19
    1c3c:	90 0d       	add	r25, r0
    1c3e:	b2 9f       	mul	r27, r18
    1c40:	90 0d       	add	r25, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	08 95       	ret

00001c46 <__udivmodhi4>:
    1c46:	aa 1b       	sub	r26, r26
    1c48:	bb 1b       	sub	r27, r27
    1c4a:	51 e1       	ldi	r21, 0x11	; 17
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <__udivmodhi4_ep>

00001c4e <__udivmodhi4_loop>:
    1c4e:	aa 1f       	adc	r26, r26
    1c50:	bb 1f       	adc	r27, r27
    1c52:	a6 17       	cp	r26, r22
    1c54:	b7 07       	cpc	r27, r23
    1c56:	10 f0       	brcs	.+4      	; 0x1c5c <__udivmodhi4_ep>
    1c58:	a6 1b       	sub	r26, r22
    1c5a:	b7 0b       	sbc	r27, r23

00001c5c <__udivmodhi4_ep>:
    1c5c:	88 1f       	adc	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	5a 95       	dec	r21
    1c62:	a9 f7       	brne	.-22     	; 0x1c4e <__udivmodhi4_loop>
    1c64:	80 95       	com	r24
    1c66:	90 95       	com	r25
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	08 95       	ret

00001c6e <__umulhisi3>:
    1c6e:	a2 9f       	mul	r26, r18
    1c70:	b0 01       	movw	r22, r0
    1c72:	b3 9f       	mul	r27, r19
    1c74:	c0 01       	movw	r24, r0
    1c76:	a3 9f       	mul	r26, r19
    1c78:	70 0d       	add	r23, r0
    1c7a:	81 1d       	adc	r24, r1
    1c7c:	11 24       	eor	r1, r1
    1c7e:	91 1d       	adc	r25, r1
    1c80:	b2 9f       	mul	r27, r18
    1c82:	70 0d       	add	r23, r0
    1c84:	81 1d       	adc	r24, r1
    1c86:	11 24       	eor	r1, r1
    1c88:	91 1d       	adc	r25, r1
    1c8a:	08 95       	ret

00001c8c <__muluhisi3>:
    1c8c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__umulhisi3>
    1c90:	a5 9f       	mul	r26, r21
    1c92:	90 0d       	add	r25, r0
    1c94:	b4 9f       	mul	r27, r20
    1c96:	90 0d       	add	r25, r0
    1c98:	a4 9f       	mul	r26, r20
    1c9a:	80 0d       	add	r24, r0
    1c9c:	91 1d       	adc	r25, r1
    1c9e:	11 24       	eor	r1, r1
    1ca0:	08 95       	ret

00001ca2 <__ashrdi3>:
    1ca2:	97 fd       	sbrc	r25, 7
    1ca4:	10 94       	com	r1

00001ca6 <__lshrdi3>:
    1ca6:	00 2e       	mov	r0, r16
    1ca8:	08 30       	cpi	r16, 0x08	; 8
    1caa:	98 f0       	brcs	.+38     	; 0x1cd2 <__lshrdi3+0x2c>
    1cac:	08 50       	subi	r16, 0x08	; 8
    1cae:	23 2f       	mov	r18, r19
    1cb0:	34 2f       	mov	r19, r20
    1cb2:	45 2f       	mov	r20, r21
    1cb4:	56 2f       	mov	r21, r22
    1cb6:	67 2f       	mov	r22, r23
    1cb8:	78 2f       	mov	r23, r24
    1cba:	89 2f       	mov	r24, r25
    1cbc:	91 2d       	mov	r25, r1
    1cbe:	f4 cf       	rjmp	.-24     	; 0x1ca8 <__lshrdi3+0x2>
    1cc0:	15 94       	asr	r1
    1cc2:	97 95       	ror	r25
    1cc4:	87 95       	ror	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	57 95       	ror	r21
    1ccc:	47 95       	ror	r20
    1cce:	37 95       	ror	r19
    1cd0:	27 95       	ror	r18
    1cd2:	0a 95       	dec	r16
    1cd4:	aa f7       	brpl	.-22     	; 0x1cc0 <__lshrdi3+0x1a>
    1cd6:	11 24       	eor	r1, r1
    1cd8:	00 2d       	mov	r16, r0
    1cda:	08 95       	ret

00001cdc <strtoul>:
    1cdc:	a6 e0       	ldi	r26, 0x06	; 6
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e4 e7       	ldi	r30, 0x74	; 116
    1ce2:	fe e0       	ldi	r31, 0x0E	; 14
    1ce4:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__prologue_saves__+0x4>
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	6b 01       	movw	r12, r22
    1cee:	7a 01       	movw	r14, r20
    1cf0:	61 15       	cp	r22, r1
    1cf2:	71 05       	cpc	r23, r1
    1cf4:	29 f0       	breq	.+10     	; 0x1d00 <strtoul+0x24>
    1cf6:	ed 81       	ldd	r30, Y+5	; 0x05
    1cf8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cfa:	db 01       	movw	r26, r22
    1cfc:	ed 93       	st	X+, r30
    1cfe:	fc 93       	st	X, r31
    1d00:	e1 14       	cp	r14, r1
    1d02:	f1 04       	cpc	r15, r1
    1d04:	29 f0       	breq	.+10     	; 0x1d10 <strtoul+0x34>
    1d06:	c7 01       	movw	r24, r14
    1d08:	02 97       	sbiw	r24, 0x02	; 2
    1d0a:	83 97       	sbiw	r24, 0x23	; 35
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <strtoul+0x34>
    1d0e:	e3 c0       	rjmp	.+454    	; 0x1ed6 <strtoul+0x1fa>
    1d10:	ad 80       	ldd	r10, Y+5	; 0x05
    1d12:	be 80       	ldd	r11, Y+6	; 0x06
    1d14:	95 01       	movw	r18, r10
    1d16:	2f 5f       	subi	r18, 0xFF	; 255
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	2d 83       	std	Y+5, r18	; 0x05
    1d1c:	3e 83       	std	Y+6, r19	; 0x06
    1d1e:	d5 01       	movw	r26, r10
    1d20:	1c 91       	ld	r17, X
    1d22:	81 2f       	mov	r24, r17
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <isspace>
    1d2a:	89 2b       	or	r24, r25
    1d2c:	89 f7       	brne	.-30     	; 0x1d10 <strtoul+0x34>
    1d2e:	1d 32       	cpi	r17, 0x2D	; 45
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <strtoul+0x58>
    1d32:	7c c0       	rjmp	.+248    	; 0x1e2c <strtoul+0x150>
    1d34:	ed 81       	ldd	r30, Y+5	; 0x05
    1d36:	fe 81       	ldd	r31, Y+6	; 0x06
    1d38:	10 81       	ld	r17, Z
    1d3a:	95 01       	movw	r18, r10
    1d3c:	2e 5f       	subi	r18, 0xFE	; 254
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	2d 83       	std	Y+5, r18	; 0x05
    1d42:	3e 83       	std	Y+6, r19	; 0x06
    1d44:	01 e0       	ldi	r16, 0x01	; 1
    1d46:	e1 14       	cp	r14, r1
    1d48:	f1 04       	cpc	r15, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <strtoul+0x72>
    1d4c:	e9 c0       	rjmp	.+466    	; 0x1f20 <strtoul+0x244>
    1d4e:	f0 e1       	ldi	r31, 0x10	; 16
    1d50:	ef 16       	cp	r14, r31
    1d52:	f1 04       	cpc	r15, r1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <strtoul+0x7c>
    1d56:	f1 c0       	rjmp	.+482    	; 0x1f3a <strtoul+0x25e>
    1d58:	10 33       	cpi	r17, 0x30	; 48
    1d5a:	71 f4       	brne	.+28     	; 0x1d78 <strtoul+0x9c>
    1d5c:	ad 81       	ldd	r26, Y+5	; 0x05
    1d5e:	be 81       	ldd	r27, Y+6	; 0x06
    1d60:	8c 91       	ld	r24, X
    1d62:	8f 7d       	andi	r24, 0xDF	; 223
    1d64:	88 35       	cpi	r24, 0x58	; 88
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <strtoul+0x8e>
    1d68:	bb c0       	rjmp	.+374    	; 0x1ee0 <strtoul+0x204>
    1d6a:	11 96       	adiw	r26, 0x01	; 1
    1d6c:	1c 91       	ld	r17, X
    1d6e:	11 97       	sbiw	r26, 0x01	; 1
    1d70:	12 96       	adiw	r26, 0x02	; 2
    1d72:	ad 83       	std	Y+5, r26	; 0x05
    1d74:	be 83       	std	Y+6, r27	; 0x06
    1d76:	02 60       	ori	r16, 0x02	; 2
    1d78:	40 e1       	ldi	r20, 0x10	; 16
    1d7a:	e4 2e       	mov	r14, r20
    1d7c:	f1 2c       	mov	r15, r1
    1d7e:	88 24       	eor	r8, r8
    1d80:	8a 94       	dec	r8
    1d82:	98 2c       	mov	r9, r8
    1d84:	a8 2c       	mov	r10, r8
    1d86:	5f e0       	ldi	r21, 0x0F	; 15
    1d88:	b5 2e       	mov	r11, r21
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	19 82       	std	Y+1, r1	; 0x01
    1d8e:	1a 82       	std	Y+2, r1	; 0x02
    1d90:	1b 82       	std	Y+3, r1	; 0x03
    1d92:	1c 82       	std	Y+4, r1	; 0x04
    1d94:	27 01       	movw	r4, r14
    1d96:	0f 2c       	mov	r0, r15
    1d98:	00 0c       	add	r0, r0
    1d9a:	66 08       	sbc	r6, r6
    1d9c:	77 08       	sbc	r7, r7
    1d9e:	e0 ed       	ldi	r30, 0xD0	; 208
    1da0:	e1 0f       	add	r30, r17
    1da2:	ea 30       	cpi	r30, 0x0A	; 10
    1da4:	60 f0       	brcs	.+24     	; 0x1dbe <strtoul+0xe2>
    1da6:	9f eb       	ldi	r25, 0xBF	; 191
    1da8:	91 0f       	add	r25, r17
    1daa:	e9 ec       	ldi	r30, 0xC9	; 201
    1dac:	9a 31       	cpi	r25, 0x1A	; 26
    1dae:	30 f0       	brcs	.+12     	; 0x1dbc <strtoul+0xe0>
    1db0:	9f e9       	ldi	r25, 0x9F	; 159
    1db2:	91 0f       	add	r25, r17
    1db4:	9a 31       	cpi	r25, 0x1A	; 26
    1db6:	08 f0       	brcs	.+2      	; 0x1dba <strtoul+0xde>
    1db8:	51 c0       	rjmp	.+162    	; 0x1e5c <strtoul+0x180>
    1dba:	e9 ea       	ldi	r30, 0xA9	; 169
    1dbc:	e1 0f       	add	r30, r17
    1dbe:	ee 15       	cp	r30, r14
    1dc0:	1f 04       	cpc	r1, r15
    1dc2:	0c f0       	brlt	.+2      	; 0x1dc6 <strtoul+0xea>
    1dc4:	4b c0       	rjmp	.+150    	; 0x1e5c <strtoul+0x180>
    1dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc8:	59 f1       	breq	.+86     	; 0x1e20 <strtoul+0x144>
    1dca:	29 81       	ldd	r18, Y+1	; 0x01
    1dcc:	3a 81       	ldd	r19, Y+2	; 0x02
    1dce:	4b 81       	ldd	r20, Y+3	; 0x03
    1dd0:	5c 81       	ldd	r21, Y+4	; 0x04
    1dd2:	82 16       	cp	r8, r18
    1dd4:	93 06       	cpc	r9, r19
    1dd6:	a4 06       	cpc	r10, r20
    1dd8:	b5 06       	cpc	r11, r21
    1dda:	f0 f1       	brcs	.+124    	; 0x1e58 <strtoul+0x17c>
    1ddc:	a3 01       	movw	r20, r6
    1dde:	92 01       	movw	r18, r4
    1de0:	69 81       	ldd	r22, Y+1	; 0x01
    1de2:	7a 81       	ldd	r23, Y+2	; 0x02
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsi3>
    1dec:	69 83       	std	Y+1, r22	; 0x01
    1dee:	7a 83       	std	Y+2, r23	; 0x02
    1df0:	8b 83       	std	Y+3, r24	; 0x03
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8e 2f       	mov	r24, r30
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	a0 e0       	ldi	r26, 0x00	; 0
    1dfc:	29 81       	ldd	r18, Y+1	; 0x01
    1dfe:	3a 81       	ldd	r19, Y+2	; 0x02
    1e00:	4b 81       	ldd	r20, Y+3	; 0x03
    1e02:	5c 81       	ldd	r21, Y+4	; 0x04
    1e04:	28 0f       	add	r18, r24
    1e06:	39 1f       	adc	r19, r25
    1e08:	4a 1f       	adc	r20, r26
    1e0a:	5b 1f       	adc	r21, r27
    1e0c:	29 83       	std	Y+1, r18	; 0x01
    1e0e:	3a 83       	std	Y+2, r19	; 0x02
    1e10:	4b 83       	std	Y+3, r20	; 0x03
    1e12:	5c 83       	std	Y+4, r21	; 0x04
    1e14:	28 17       	cp	r18, r24
    1e16:	39 07       	cpc	r19, r25
    1e18:	4a 07       	cpc	r20, r26
    1e1a:	5b 07       	cpc	r21, r27
    1e1c:	e8 f0       	brcs	.+58     	; 0x1e58 <strtoul+0x17c>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	ad 81       	ldd	r26, Y+5	; 0x05
    1e22:	be 81       	ldd	r27, Y+6	; 0x06
    1e24:	1d 91       	ld	r17, X+
    1e26:	ad 83       	std	Y+5, r26	; 0x05
    1e28:	be 83       	std	Y+6, r27	; 0x06
    1e2a:	b9 cf       	rjmp	.-142    	; 0x1d9e <strtoul+0xc2>
    1e2c:	1b 32       	cpi	r17, 0x2B	; 43
    1e2e:	39 f4       	brne	.+14     	; 0x1e3e <strtoul+0x162>
    1e30:	ad 81       	ldd	r26, Y+5	; 0x05
    1e32:	be 81       	ldd	r27, Y+6	; 0x06
    1e34:	1c 91       	ld	r17, X
    1e36:	f5 01       	movw	r30, r10
    1e38:	32 96       	adiw	r30, 0x02	; 2
    1e3a:	ed 83       	std	Y+5, r30	; 0x05
    1e3c:	fe 83       	std	Y+6, r31	; 0x06
    1e3e:	00 e0       	ldi	r16, 0x00	; 0
    1e40:	82 cf       	rjmp	.-252    	; 0x1d46 <strtoul+0x6a>
    1e42:	10 e3       	ldi	r17, 0x30	; 48
    1e44:	38 e0       	ldi	r19, 0x08	; 8
    1e46:	e3 2e       	mov	r14, r19
    1e48:	f1 2c       	mov	r15, r1
    1e4a:	88 24       	eor	r8, r8
    1e4c:	8a 94       	dec	r8
    1e4e:	98 2c       	mov	r9, r8
    1e50:	a8 2c       	mov	r10, r8
    1e52:	2f e1       	ldi	r18, 0x1F	; 31
    1e54:	b2 2e       	mov	r11, r18
    1e56:	99 cf       	rjmp	.-206    	; 0x1d8a <strtoul+0xae>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	e2 cf       	rjmp	.-60     	; 0x1e20 <strtoul+0x144>
    1e5c:	c1 14       	cp	r12, r1
    1e5e:	d1 04       	cpc	r13, r1
    1e60:	49 f0       	breq	.+18     	; 0x1e74 <strtoul+0x198>
    1e62:	88 23       	and	r24, r24
    1e64:	79 f1       	breq	.+94     	; 0x1ec4 <strtoul+0x1e8>
    1e66:	2d 81       	ldd	r18, Y+5	; 0x05
    1e68:	3e 81       	ldd	r19, Y+6	; 0x06
    1e6a:	21 50       	subi	r18, 0x01	; 1
    1e6c:	31 09       	sbc	r19, r1
    1e6e:	f6 01       	movw	r30, r12
    1e70:	20 83       	st	Z, r18
    1e72:	31 83       	std	Z+1, r19	; 0x01
    1e74:	00 ff       	sbrs	r16, 0
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <strtoul+0x1ba>
    1e78:	29 81       	ldd	r18, Y+1	; 0x01
    1e7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e7c:	4b 81       	ldd	r20, Y+3	; 0x03
    1e7e:	5c 81       	ldd	r21, Y+4	; 0x04
    1e80:	50 95       	com	r21
    1e82:	40 95       	com	r20
    1e84:	30 95       	com	r19
    1e86:	21 95       	neg	r18
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8e:	29 83       	std	Y+1, r18	; 0x01
    1e90:	3a 83       	std	Y+2, r19	; 0x02
    1e92:	4b 83       	std	Y+3, r20	; 0x03
    1e94:	5c 83       	std	Y+4, r21	; 0x04
    1e96:	8f 3f       	cpi	r24, 0xFF	; 255
    1e98:	69 f4       	brne	.+26     	; 0x1eb4 <strtoul+0x1d8>
    1e9a:	82 e2       	ldi	r24, 0x22	; 34
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <errno>
    1ea2:	90 93 41 29 	sts	0x2941, r25	; 0x802941 <errno+0x1>
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	9f ef       	ldi	r25, 0xFF	; 255
    1eaa:	dc 01       	movw	r26, r24
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	ab 83       	std	Y+3, r26	; 0x03
    1eb2:	bc 83       	std	Y+4, r27	; 0x04
    1eb4:	69 81       	ldd	r22, Y+1	; 0x01
    1eb6:	7a 81       	ldd	r23, Y+2	; 0x02
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	26 96       	adiw	r28, 0x06	; 6
    1ebe:	e0 e1       	ldi	r30, 0x10	; 16
    1ec0:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__epilogue_restores__+0x4>
    1ec4:	01 ff       	sbrs	r16, 1
    1ec6:	d6 cf       	rjmp	.-84     	; 0x1e74 <strtoul+0x198>
    1ec8:	ed 81       	ldd	r30, Y+5	; 0x05
    1eca:	fe 81       	ldd	r31, Y+6	; 0x06
    1ecc:	32 97       	sbiw	r30, 0x02	; 2
    1ece:	d6 01       	movw	r26, r12
    1ed0:	ed 93       	st	X+, r30
    1ed2:	fc 93       	st	X, r31
    1ed4:	cf cf       	rjmp	.-98     	; 0x1e74 <strtoul+0x198>
    1ed6:	19 82       	std	Y+1, r1	; 0x01
    1ed8:	1a 82       	std	Y+2, r1	; 0x02
    1eda:	1b 82       	std	Y+3, r1	; 0x03
    1edc:	1c 82       	std	Y+4, r1	; 0x04
    1ede:	ea cf       	rjmp	.-44     	; 0x1eb4 <strtoul+0x1d8>
    1ee0:	e1 14       	cp	r14, r1
    1ee2:	f1 04       	cpc	r15, r1
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <strtoul+0x20c>
    1ee6:	ad cf       	rjmp	.-166    	; 0x1e42 <strtoul+0x166>
    1ee8:	10 e3       	ldi	r17, 0x30	; 48
    1eea:	ba e0       	ldi	r27, 0x0A	; 10
    1eec:	eb 16       	cp	r14, r27
    1eee:	f1 04       	cpc	r15, r1
    1ef0:	e9 f0       	breq	.+58     	; 0x1f2c <strtoul+0x250>
    1ef2:	e0 e1       	ldi	r30, 0x10	; 16
    1ef4:	ee 16       	cp	r14, r30
    1ef6:	f1 04       	cpc	r15, r1
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <strtoul+0x220>
    1efa:	3e cf       	rjmp	.-388    	; 0x1d78 <strtoul+0x9c>
    1efc:	f8 e0       	ldi	r31, 0x08	; 8
    1efe:	ef 16       	cp	r14, r31
    1f00:	f1 04       	cpc	r15, r1
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <strtoul+0x22a>
    1f04:	a2 cf       	rjmp	.-188    	; 0x1e4a <strtoul+0x16e>
    1f06:	6f ef       	ldi	r22, 0xFF	; 255
    1f08:	7f ef       	ldi	r23, 0xFF	; 255
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	97 01       	movw	r18, r14
    1f0e:	0f 2c       	mov	r0, r15
    1f10:	00 0c       	add	r0, r0
    1f12:	44 0b       	sbc	r20, r20
    1f14:	55 0b       	sbc	r21, r21
    1f16:	0e 94 a5 12 	call	0x254a	; 0x254a <__udivmodsi4>
    1f1a:	49 01       	movw	r8, r18
    1f1c:	5a 01       	movw	r10, r20
    1f1e:	35 cf       	rjmp	.-406    	; 0x1d8a <strtoul+0xae>
    1f20:	10 33       	cpi	r17, 0x30	; 48
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <strtoul+0x24a>
    1f24:	1b cf       	rjmp	.-458    	; 0x1d5c <strtoul+0x80>
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
    1f28:	e8 2e       	mov	r14, r24
    1f2a:	f1 2c       	mov	r15, r1
    1f2c:	99 e9       	ldi	r25, 0x99	; 153
    1f2e:	89 2e       	mov	r8, r25
    1f30:	98 2c       	mov	r9, r8
    1f32:	a8 2c       	mov	r10, r8
    1f34:	99 e1       	ldi	r25, 0x19	; 25
    1f36:	b9 2e       	mov	r11, r25
    1f38:	28 cf       	rjmp	.-432    	; 0x1d8a <strtoul+0xae>
    1f3a:	9a e0       	ldi	r25, 0x0A	; 10
    1f3c:	e9 16       	cp	r14, r25
    1f3e:	f1 04       	cpc	r15, r1
    1f40:	e9 f6       	brne	.-70     	; 0x1efc <strtoul+0x220>
    1f42:	f4 cf       	rjmp	.-24     	; 0x1f2c <strtoul+0x250>

00001f44 <isspace>:
    1f44:	91 11       	cpse	r25, r1
    1f46:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__ctype_isfalse>
    1f4a:	80 32       	cpi	r24, 0x20	; 32
    1f4c:	19 f0       	breq	.+6      	; 0x1f54 <isspace+0x10>
    1f4e:	89 50       	subi	r24, 0x09	; 9
    1f50:	85 50       	subi	r24, 0x05	; 5
    1f52:	c8 f7       	brcc	.-14     	; 0x1f46 <isspace+0x2>
    1f54:	08 95       	ret

00001f56 <strtok>:
    1f56:	48 e3       	ldi	r20, 0x38	; 56
    1f58:	59 e2       	ldi	r21, 0x29	; 41
    1f5a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <strtok_r>
    1f5e:	08 95       	ret

00001f60 <strchr>:
    1f60:	fc 01       	movw	r30, r24
    1f62:	81 91       	ld	r24, Z+
    1f64:	86 17       	cp	r24, r22
    1f66:	21 f0       	breq	.+8      	; 0x1f70 <strchr+0x10>
    1f68:	88 23       	and	r24, r24
    1f6a:	d9 f7       	brne	.-10     	; 0x1f62 <strchr+0x2>
    1f6c:	99 27       	eor	r25, r25
    1f6e:	08 95       	ret
    1f70:	31 97       	sbiw	r30, 0x01	; 1
    1f72:	cf 01       	movw	r24, r30
    1f74:	08 95       	ret

00001f76 <strcmp>:
    1f76:	fb 01       	movw	r30, r22
    1f78:	dc 01       	movw	r26, r24
    1f7a:	8d 91       	ld	r24, X+
    1f7c:	01 90       	ld	r0, Z+
    1f7e:	80 19       	sub	r24, r0
    1f80:	01 10       	cpse	r0, r1
    1f82:	d9 f3       	breq	.-10     	; 0x1f7a <strcmp+0x4>
    1f84:	99 0b       	sbc	r25, r25
    1f86:	08 95       	ret

00001f88 <strtok_r>:
    1f88:	fa 01       	movw	r30, r20
    1f8a:	a1 91       	ld	r26, Z+
    1f8c:	b0 81       	ld	r27, Z
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <strtok_r+0x10>
    1f92:	10 97       	sbiw	r26, 0x00	; 0
    1f94:	e1 f0       	breq	.+56     	; 0x1fce <strtok_r+0x46>
    1f96:	cd 01       	movw	r24, r26
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0d 90       	ld	r0, X+
    1f9e:	00 20       	and	r0, r0
    1fa0:	11 f4       	brne	.+4      	; 0x1fa6 <strtok_r+0x1e>
    1fa2:	c0 01       	movw	r24, r0
    1fa4:	13 c0       	rjmp	.+38     	; 0x1fcc <strtok_r+0x44>
    1fa6:	fb 01       	movw	r30, r22
    1fa8:	21 91       	ld	r18, Z+
    1faa:	22 23       	and	r18, r18
    1fac:	19 f0       	breq	.+6      	; 0x1fb4 <strtok_r+0x2c>
    1fae:	20 15       	cp	r18, r0
    1fb0:	d9 f7       	brne	.-10     	; 0x1fa8 <strtok_r+0x20>
    1fb2:	f3 cf       	rjmp	.-26     	; 0x1f9a <strtok_r+0x12>
    1fb4:	fb 01       	movw	r30, r22
    1fb6:	21 91       	ld	r18, Z+
    1fb8:	20 15       	cp	r18, r0
    1fba:	19 f4       	brne	.+6      	; 0x1fc2 <strtok_r+0x3a>
    1fbc:	1e 92       	st	-X, r1
    1fbe:	11 96       	adiw	r26, 0x01	; 1
    1fc0:	06 c0       	rjmp	.+12     	; 0x1fce <strtok_r+0x46>
    1fc2:	22 23       	and	r18, r18
    1fc4:	c1 f7       	brne	.-16     	; 0x1fb6 <strtok_r+0x2e>
    1fc6:	0d 90       	ld	r0, X+
    1fc8:	00 20       	and	r0, r0
    1fca:	a1 f7       	brne	.-24     	; 0x1fb4 <strtok_r+0x2c>
    1fcc:	d0 01       	movw	r26, r0
    1fce:	fa 01       	movw	r30, r20
    1fd0:	a1 93       	st	Z+, r26
    1fd2:	b0 83       	st	Z, r27
    1fd4:	08 95       	ret

00001fd6 <printf>:
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	e1 ef       	ldi	r30, 0xF1	; 241
    1fdc:	ff e0       	ldi	r31, 0x0F	; 15
    1fde:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__+0x20>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	35 96       	adiw	r30, 0x05	; 5
    1fe6:	61 91       	ld	r22, Z+
    1fe8:	71 91       	ld	r23, Z+
    1fea:	af 01       	movw	r20, r30
    1fec:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <__iob+0x2>
    1ff0:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <__iob+0x3>
    1ff4:	0e 94 2b 10 	call	0x2056	; 0x2056 <vfprintf>
    1ff8:	e2 e0       	ldi	r30, 0x02	; 2
    1ffa:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__+0x20>

00001ffe <puts>:
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	e0 91 3c 29 	lds	r30, 0x293C	; 0x80293c <__iob+0x2>
    200a:	f0 91 3d 29 	lds	r31, 0x293D	; 0x80293d <__iob+0x3>
    200e:	23 81       	ldd	r18, Z+3	; 0x03
    2010:	00 e0       	ldi	r16, 0x00	; 0
    2012:	10 e0       	ldi	r17, 0x00	; 0
    2014:	21 fd       	sbrc	r18, 1
    2016:	0e c0       	rjmp	.+28     	; 0x2034 <puts+0x36>
    2018:	0f ef       	ldi	r16, 0xFF	; 255
    201a:	1f ef       	ldi	r17, 0xFF	; 255
    201c:	c8 01       	movw	r24, r16
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	08 95       	ret
    2028:	09 95       	icall
    202a:	89 2b       	or	r24, r25
    202c:	11 f0       	breq	.+4      	; 0x2032 <puts+0x34>
    202e:	0f ef       	ldi	r16, 0xFF	; 255
    2030:	1f ef       	ldi	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	ec 01       	movw	r28, r24
    2036:	89 91       	ld	r24, Y+
    2038:	60 91 3c 29 	lds	r22, 0x293C	; 0x80293c <__iob+0x2>
    203c:	70 91 3d 29 	lds	r23, 0x293D	; 0x80293d <__iob+0x3>
    2040:	db 01       	movw	r26, r22
    2042:	18 96       	adiw	r26, 0x08	; 8
    2044:	ed 91       	ld	r30, X+
    2046:	fc 91       	ld	r31, X
    2048:	81 11       	cpse	r24, r1
    204a:	ee cf       	rjmp	.-36     	; 0x2028 <puts+0x2a>
    204c:	8a e0       	ldi	r24, 0x0A	; 10
    204e:	09 95       	icall
    2050:	89 2b       	or	r24, r25
    2052:	21 f3       	breq	.-56     	; 0x201c <puts+0x1e>
    2054:	e1 cf       	rjmp	.-62     	; 0x2018 <puts+0x1a>

00002056 <vfprintf>:
    2056:	af e0       	ldi	r26, 0x0F	; 15
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e1 e3       	ldi	r30, 0x31	; 49
    205c:	f0 e1       	ldi	r31, 0x10	; 16
    205e:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__>
    2062:	7c 01       	movw	r14, r24
    2064:	3b 01       	movw	r6, r22
    2066:	8a 01       	movw	r16, r20
    2068:	dc 01       	movw	r26, r24
    206a:	16 96       	adiw	r26, 0x06	; 6
    206c:	1d 92       	st	X+, r1
    206e:	1c 92       	st	X, r1
    2070:	17 97       	sbiw	r26, 0x07	; 7
    2072:	13 96       	adiw	r26, 0x03	; 3
    2074:	8c 91       	ld	r24, X
    2076:	81 ff       	sbrs	r24, 1
    2078:	be c1       	rjmp	.+892    	; 0x23f6 <vfprintf+0x3a0>
    207a:	9a e0       	ldi	r25, 0x0A	; 10
    207c:	29 2e       	mov	r2, r25
    207e:	fe 01       	movw	r30, r28
    2080:	31 96       	adiw	r30, 0x01	; 1
    2082:	4f 01       	movw	r8, r30
    2084:	d7 01       	movw	r26, r14
    2086:	13 96       	adiw	r26, 0x03	; 3
    2088:	9c 91       	ld	r25, X
    208a:	f3 01       	movw	r30, r6
    208c:	93 fd       	sbrc	r25, 3
    208e:	85 91       	lpm	r24, Z+
    2090:	93 ff       	sbrs	r25, 3
    2092:	81 91       	ld	r24, Z+
    2094:	3f 01       	movw	r6, r30
    2096:	88 23       	and	r24, r24
    2098:	09 f4       	brne	.+2      	; 0x209c <vfprintf+0x46>
    209a:	44 c1       	rjmp	.+648    	; 0x2324 <vfprintf+0x2ce>
    209c:	85 32       	cpi	r24, 0x25	; 37
    209e:	39 f4       	brne	.+14     	; 0x20ae <vfprintf+0x58>
    20a0:	93 fd       	sbrc	r25, 3
    20a2:	85 91       	lpm	r24, Z+
    20a4:	93 ff       	sbrs	r25, 3
    20a6:	81 91       	ld	r24, Z+
    20a8:	3f 01       	movw	r6, r30
    20aa:	85 32       	cpi	r24, 0x25	; 37
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <vfprintf+0x62>
    20ae:	b7 01       	movw	r22, r14
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    20b6:	e6 cf       	rjmp	.-52     	; 0x2084 <vfprintf+0x2e>
    20b8:	b1 2c       	mov	r11, r1
    20ba:	41 2c       	mov	r4, r1
    20bc:	51 2c       	mov	r5, r1
    20be:	bf e1       	ldi	r27, 0x1F	; 31
    20c0:	b5 15       	cp	r27, r5
    20c2:	38 f0       	brcs	.+14     	; 0x20d2 <vfprintf+0x7c>
    20c4:	8b 32       	cpi	r24, 0x2B	; 43
    20c6:	09 f1       	breq	.+66     	; 0x210a <vfprintf+0xb4>
    20c8:	88 f4       	brcc	.+34     	; 0x20ec <vfprintf+0x96>
    20ca:	80 32       	cpi	r24, 0x20	; 32
    20cc:	01 f1       	breq	.+64     	; 0x210e <vfprintf+0xb8>
    20ce:	83 32       	cpi	r24, 0x23	; 35
    20d0:	21 f1       	breq	.+72     	; 0x211a <vfprintf+0xc4>
    20d2:	57 fc       	sbrc	r5, 7
    20d4:	3a c0       	rjmp	.+116    	; 0x214a <vfprintf+0xf4>
    20d6:	20 ed       	ldi	r18, 0xD0	; 208
    20d8:	28 0f       	add	r18, r24
    20da:	2a 30       	cpi	r18, 0x0A	; 10
    20dc:	40 f5       	brcc	.+80     	; 0x212e <vfprintf+0xd8>
    20de:	56 fe       	sbrs	r5, 6
    20e0:	1f c0       	rjmp	.+62     	; 0x2120 <vfprintf+0xca>
    20e2:	b2 9c       	mul	r11, r2
    20e4:	20 0d       	add	r18, r0
    20e6:	11 24       	eor	r1, r1
    20e8:	b2 2e       	mov	r11, r18
    20ea:	06 c0       	rjmp	.+12     	; 0x20f8 <vfprintf+0xa2>
    20ec:	8d 32       	cpi	r24, 0x2D	; 45
    20ee:	91 f0       	breq	.+36     	; 0x2114 <vfprintf+0xbe>
    20f0:	80 33       	cpi	r24, 0x30	; 48
    20f2:	79 f7       	brne	.-34     	; 0x20d2 <vfprintf+0x7c>
    20f4:	68 94       	set
    20f6:	50 f8       	bld	r5, 0
    20f8:	f3 01       	movw	r30, r6
    20fa:	93 fd       	sbrc	r25, 3
    20fc:	85 91       	lpm	r24, Z+
    20fe:	93 ff       	sbrs	r25, 3
    2100:	81 91       	ld	r24, Z+
    2102:	3f 01       	movw	r6, r30
    2104:	81 11       	cpse	r24, r1
    2106:	db cf       	rjmp	.-74     	; 0x20be <vfprintf+0x68>
    2108:	20 c0       	rjmp	.+64     	; 0x214a <vfprintf+0xf4>
    210a:	68 94       	set
    210c:	51 f8       	bld	r5, 1
    210e:	68 94       	set
    2110:	52 f8       	bld	r5, 2
    2112:	f2 cf       	rjmp	.-28     	; 0x20f8 <vfprintf+0xa2>
    2114:	68 94       	set
    2116:	53 f8       	bld	r5, 3
    2118:	ef cf       	rjmp	.-34     	; 0x20f8 <vfprintf+0xa2>
    211a:	68 94       	set
    211c:	54 f8       	bld	r5, 4
    211e:	ec cf       	rjmp	.-40     	; 0x20f8 <vfprintf+0xa2>
    2120:	42 9c       	mul	r4, r2
    2122:	20 0d       	add	r18, r0
    2124:	11 24       	eor	r1, r1
    2126:	42 2e       	mov	r4, r18
    2128:	68 94       	set
    212a:	55 f8       	bld	r5, 5
    212c:	e5 cf       	rjmp	.-54     	; 0x20f8 <vfprintf+0xa2>
    212e:	8e 32       	cpi	r24, 0x2E	; 46
    2130:	29 f4       	brne	.+10     	; 0x213c <vfprintf+0xe6>
    2132:	56 fc       	sbrc	r5, 6
    2134:	f7 c0       	rjmp	.+494    	; 0x2324 <vfprintf+0x2ce>
    2136:	68 94       	set
    2138:	56 f8       	bld	r5, 6
    213a:	de cf       	rjmp	.-68     	; 0x20f8 <vfprintf+0xa2>
    213c:	8c 36       	cpi	r24, 0x6C	; 108
    213e:	19 f4       	brne	.+6      	; 0x2146 <vfprintf+0xf0>
    2140:	68 94       	set
    2142:	57 f8       	bld	r5, 7
    2144:	d9 cf       	rjmp	.-78     	; 0x20f8 <vfprintf+0xa2>
    2146:	88 36       	cpi	r24, 0x68	; 104
    2148:	b9 f2       	breq	.-82     	; 0x20f8 <vfprintf+0xa2>
    214a:	98 2f       	mov	r25, r24
    214c:	9f 7d       	andi	r25, 0xDF	; 223
    214e:	95 54       	subi	r25, 0x45	; 69
    2150:	93 30       	cpi	r25, 0x03	; 3
    2152:	c0 f0       	brcs	.+48     	; 0x2184 <vfprintf+0x12e>
    2154:	83 36       	cpi	r24, 0x63	; 99
    2156:	a1 f1       	breq	.+104    	; 0x21c0 <vfprintf+0x16a>
    2158:	83 37       	cpi	r24, 0x73	; 115
    215a:	c1 f1       	breq	.+112    	; 0x21cc <vfprintf+0x176>
    215c:	83 35       	cpi	r24, 0x53	; 83
    215e:	09 f0       	breq	.+2      	; 0x2162 <vfprintf+0x10c>
    2160:	5b c0       	rjmp	.+182    	; 0x2218 <vfprintf+0x1c2>
    2162:	d8 01       	movw	r26, r16
    2164:	cd 90       	ld	r12, X+
    2166:	dd 90       	ld	r13, X+
    2168:	8d 01       	movw	r16, r26
    216a:	6b 2d       	mov	r22, r11
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	56 fc       	sbrc	r5, 6
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <vfprintf+0x120>
    2172:	6f ef       	ldi	r22, 0xFF	; 255
    2174:	7f ef       	ldi	r23, 0xFF	; 255
    2176:	c6 01       	movw	r24, r12
    2178:	0e 94 01 12 	call	0x2402	; 0x2402 <strnlen_P>
    217c:	5c 01       	movw	r10, r24
    217e:	68 94       	set
    2180:	57 f8       	bld	r5, 7
    2182:	0a c0       	rjmp	.+20     	; 0x2198 <vfprintf+0x142>
    2184:	0c 5f       	subi	r16, 0xFC	; 252
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	ef e3       	ldi	r30, 0x3F	; 63
    218a:	e9 83       	std	Y+1, r30	; 0x01
    218c:	aa 24       	eor	r10, r10
    218e:	a3 94       	inc	r10
    2190:	b1 2c       	mov	r11, r1
    2192:	64 01       	movw	r12, r8
    2194:	e8 94       	clt
    2196:	57 f8       	bld	r5, 7
    2198:	53 fc       	sbrc	r5, 3
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <vfprintf+0x14e>
    219c:	4a 14       	cp	r4, r10
    219e:	1b 04       	cpc	r1, r11
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <vfprintf+0x14e>
    21a2:	18 f5       	brcc	.+70     	; 0x21ea <vfprintf+0x194>
    21a4:	34 2c       	mov	r3, r4
    21a6:	a1 14       	cp	r10, r1
    21a8:	b1 04       	cpc	r11, r1
    21aa:	31 f5       	brne	.+76     	; 0x21f8 <vfprintf+0x1a2>
    21ac:	33 20       	and	r3, r3
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <vfprintf+0x15c>
    21b0:	69 cf       	rjmp	.-302    	; 0x2084 <vfprintf+0x2e>
    21b2:	b7 01       	movw	r22, r14
    21b4:	80 e2       	ldi	r24, 0x20	; 32
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    21bc:	3a 94       	dec	r3
    21be:	f6 cf       	rjmp	.-20     	; 0x21ac <vfprintf+0x156>
    21c0:	d8 01       	movw	r26, r16
    21c2:	8c 91       	ld	r24, X
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	0e 5f       	subi	r16, 0xFE	; 254
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ca:	e0 cf       	rjmp	.-64     	; 0x218c <vfprintf+0x136>
    21cc:	f8 01       	movw	r30, r16
    21ce:	c1 90       	ld	r12, Z+
    21d0:	d1 90       	ld	r13, Z+
    21d2:	8f 01       	movw	r16, r30
    21d4:	6b 2d       	mov	r22, r11
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	56 fc       	sbrc	r5, 6
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <vfprintf+0x18a>
    21dc:	6f ef       	ldi	r22, 0xFF	; 255
    21de:	7f ef       	ldi	r23, 0xFF	; 255
    21e0:	c6 01       	movw	r24, r12
    21e2:	0e 94 0c 12 	call	0x2418	; 0x2418 <strnlen>
    21e6:	5c 01       	movw	r10, r24
    21e8:	d5 cf       	rjmp	.-86     	; 0x2194 <vfprintf+0x13e>
    21ea:	b7 01       	movw	r22, r14
    21ec:	80 e2       	ldi	r24, 0x20	; 32
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    21f4:	4a 94       	dec	r4
    21f6:	d2 cf       	rjmp	.-92     	; 0x219c <vfprintf+0x146>
    21f8:	f6 01       	movw	r30, r12
    21fa:	57 fc       	sbrc	r5, 7
    21fc:	85 91       	lpm	r24, Z+
    21fe:	57 fe       	sbrs	r5, 7
    2200:	81 91       	ld	r24, Z+
    2202:	6f 01       	movw	r12, r30
    2204:	b7 01       	movw	r22, r14
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    220c:	31 10       	cpse	r3, r1
    220e:	3a 94       	dec	r3
    2210:	b1 e0       	ldi	r27, 0x01	; 1
    2212:	ab 1a       	sub	r10, r27
    2214:	b1 08       	sbc	r11, r1
    2216:	c7 cf       	rjmp	.-114    	; 0x21a6 <vfprintf+0x150>
    2218:	84 36       	cpi	r24, 0x64	; 100
    221a:	19 f0       	breq	.+6      	; 0x2222 <vfprintf+0x1cc>
    221c:	89 36       	cpi	r24, 0x69	; 105
    221e:	09 f0       	breq	.+2      	; 0x2222 <vfprintf+0x1cc>
    2220:	71 c0       	rjmp	.+226    	; 0x2304 <vfprintf+0x2ae>
    2222:	f8 01       	movw	r30, r16
    2224:	57 fe       	sbrs	r5, 7
    2226:	67 c0       	rjmp	.+206    	; 0x22f6 <vfprintf+0x2a0>
    2228:	61 91       	ld	r22, Z+
    222a:	71 91       	ld	r23, Z+
    222c:	81 91       	ld	r24, Z+
    222e:	91 91       	ld	r25, Z+
    2230:	8f 01       	movw	r16, r30
    2232:	e5 2d       	mov	r30, r5
    2234:	ef 76       	andi	r30, 0x6F	; 111
    2236:	de 2e       	mov	r13, r30
    2238:	97 ff       	sbrs	r25, 7
    223a:	09 c0       	rjmp	.+18     	; 0x224e <vfprintf+0x1f8>
    223c:	90 95       	com	r25
    223e:	80 95       	com	r24
    2240:	70 95       	com	r23
    2242:	61 95       	neg	r22
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	8f 4f       	sbci	r24, 0xFF	; 255
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	68 94       	set
    224c:	d7 f8       	bld	r13, 7
    224e:	2a e0       	ldi	r18, 0x0A	; 10
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	a4 01       	movw	r20, r8
    2254:	0e 94 47 12 	call	0x248e	; 0x248e <__ultoa_invert>
    2258:	c8 2e       	mov	r12, r24
    225a:	c8 18       	sub	r12, r8
    225c:	ac 2c       	mov	r10, r12
    225e:	5d 2c       	mov	r5, r13
    2260:	d6 fe       	sbrs	r13, 6
    2262:	0c c0       	rjmp	.+24     	; 0x227c <vfprintf+0x226>
    2264:	e8 94       	clt
    2266:	50 f8       	bld	r5, 0
    2268:	cb 14       	cp	r12, r11
    226a:	40 f4       	brcc	.+16     	; 0x227c <vfprintf+0x226>
    226c:	d4 fe       	sbrs	r13, 4
    226e:	05 c0       	rjmp	.+10     	; 0x227a <vfprintf+0x224>
    2270:	d2 fc       	sbrc	r13, 2
    2272:	03 c0       	rjmp	.+6      	; 0x227a <vfprintf+0x224>
    2274:	5d 2d       	mov	r21, r13
    2276:	5e 7e       	andi	r21, 0xEE	; 238
    2278:	55 2e       	mov	r5, r21
    227a:	ab 2c       	mov	r10, r11
    227c:	54 fe       	sbrs	r5, 4
    227e:	93 c0       	rjmp	.+294    	; 0x23a6 <vfprintf+0x350>
    2280:	fe 01       	movw	r30, r28
    2282:	ec 0d       	add	r30, r12
    2284:	f1 1d       	adc	r31, r1
    2286:	80 81       	ld	r24, Z
    2288:	80 33       	cpi	r24, 0x30	; 48
    228a:	09 f0       	breq	.+2      	; 0x228e <vfprintf+0x238>
    228c:	85 c0       	rjmp	.+266    	; 0x2398 <vfprintf+0x342>
    228e:	65 2d       	mov	r22, r5
    2290:	69 7e       	andi	r22, 0xE9	; 233
    2292:	56 2e       	mov	r5, r22
    2294:	75 2d       	mov	r23, r5
    2296:	78 70       	andi	r23, 0x08	; 8
    2298:	37 2e       	mov	r3, r23
    229a:	53 fc       	sbrc	r5, 3
    229c:	93 c0       	rjmp	.+294    	; 0x23c4 <vfprintf+0x36e>
    229e:	50 fe       	sbrs	r5, 0
    22a0:	8d c0       	rjmp	.+282    	; 0x23bc <vfprintf+0x366>
    22a2:	bc 2c       	mov	r11, r12
    22a4:	a4 14       	cp	r10, r4
    22a6:	10 f4       	brcc	.+4      	; 0x22ac <vfprintf+0x256>
    22a8:	b4 0c       	add	r11, r4
    22aa:	ba 18       	sub	r11, r10
    22ac:	54 fe       	sbrs	r5, 4
    22ae:	90 c0       	rjmp	.+288    	; 0x23d0 <vfprintf+0x37a>
    22b0:	b7 01       	movw	r22, r14
    22b2:	80 e3       	ldi	r24, 0x30	; 48
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    22ba:	52 fe       	sbrs	r5, 2
    22bc:	07 c0       	rjmp	.+14     	; 0x22cc <vfprintf+0x276>
    22be:	88 e7       	ldi	r24, 0x78	; 120
    22c0:	51 fc       	sbrc	r5, 1
    22c2:	88 e5       	ldi	r24, 0x58	; 88
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	b7 01       	movw	r22, r14
    22c8:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    22cc:	cb 14       	cp	r12, r11
    22ce:	08 f4       	brcc	.+2      	; 0x22d2 <vfprintf+0x27c>
    22d0:	8b c0       	rjmp	.+278    	; 0x23e8 <vfprintf+0x392>
    22d2:	ca 94       	dec	r12
    22d4:	d1 2c       	mov	r13, r1
    22d6:	8f ef       	ldi	r24, 0xFF	; 255
    22d8:	c8 1a       	sub	r12, r24
    22da:	d8 0a       	sbc	r13, r24
    22dc:	c8 0c       	add	r12, r8
    22de:	d9 1c       	adc	r13, r9
    22e0:	d6 01       	movw	r26, r12
    22e2:	8e 91       	ld	r24, -X
    22e4:	6d 01       	movw	r12, r26
    22e6:	b7 01       	movw	r22, r14
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    22ee:	8c 14       	cp	r8, r12
    22f0:	9d 04       	cpc	r9, r13
    22f2:	b1 f7       	brne	.-20     	; 0x22e0 <vfprintf+0x28a>
    22f4:	5b cf       	rjmp	.-330    	; 0x21ac <vfprintf+0x156>
    22f6:	61 91       	ld	r22, Z+
    22f8:	71 91       	ld	r23, Z+
    22fa:	07 2e       	mov	r0, r23
    22fc:	00 0c       	add	r0, r0
    22fe:	88 0b       	sbc	r24, r24
    2300:	99 0b       	sbc	r25, r25
    2302:	96 cf       	rjmp	.-212    	; 0x2230 <vfprintf+0x1da>
    2304:	d5 2c       	mov	r13, r5
    2306:	e8 94       	clt
    2308:	d4 f8       	bld	r13, 4
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	85 37       	cpi	r24, 0x75	; 117
    230e:	29 f1       	breq	.+74     	; 0x235a <vfprintf+0x304>
    2310:	f5 2d       	mov	r31, r5
    2312:	f9 7f       	andi	r31, 0xF9	; 249
    2314:	df 2e       	mov	r13, r31
    2316:	80 37       	cpi	r24, 0x70	; 112
    2318:	a1 f0       	breq	.+40     	; 0x2342 <vfprintf+0x2ec>
    231a:	58 f4       	brcc	.+22     	; 0x2332 <vfprintf+0x2dc>
    231c:	88 35       	cpi	r24, 0x58	; 88
    231e:	a1 f0       	breq	.+40     	; 0x2348 <vfprintf+0x2f2>
    2320:	8f 36       	cpi	r24, 0x6F	; 111
    2322:	d1 f0       	breq	.+52     	; 0x2358 <vfprintf+0x302>
    2324:	f7 01       	movw	r30, r14
    2326:	86 81       	ldd	r24, Z+6	; 0x06
    2328:	97 81       	ldd	r25, Z+7	; 0x07
    232a:	2f 96       	adiw	r28, 0x0f	; 15
    232c:	e2 e1       	ldi	r30, 0x12	; 18
    232e:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__>
    2332:	88 37       	cpi	r24, 0x78	; 120
    2334:	b9 f7       	brne	.-18     	; 0x2324 <vfprintf+0x2ce>
    2336:	d4 fe       	sbrs	r13, 4
    2338:	02 c0       	rjmp	.+4      	; 0x233e <vfprintf+0x2e8>
    233a:	68 94       	set
    233c:	d2 f8       	bld	r13, 2
    233e:	20 e1       	ldi	r18, 0x10	; 16
    2340:	0c c0       	rjmp	.+24     	; 0x235a <vfprintf+0x304>
    2342:	68 94       	set
    2344:	d4 f8       	bld	r13, 4
    2346:	f7 cf       	rjmp	.-18     	; 0x2336 <vfprintf+0x2e0>
    2348:	54 fe       	sbrs	r5, 4
    234a:	03 c0       	rjmp	.+6      	; 0x2352 <vfprintf+0x2fc>
    234c:	2f 2f       	mov	r18, r31
    234e:	26 60       	ori	r18, 0x06	; 6
    2350:	d2 2e       	mov	r13, r18
    2352:	20 e1       	ldi	r18, 0x10	; 16
    2354:	32 e0       	ldi	r19, 0x02	; 2
    2356:	02 c0       	rjmp	.+4      	; 0x235c <vfprintf+0x306>
    2358:	28 e0       	ldi	r18, 0x08	; 8
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	f8 01       	movw	r30, r16
    235e:	d7 fe       	sbrs	r13, 7
    2360:	15 c0       	rjmp	.+42     	; 0x238c <vfprintf+0x336>
    2362:	41 91       	ld	r20, Z+
    2364:	51 91       	ld	r21, Z+
    2366:	61 91       	ld	r22, Z+
    2368:	71 91       	ld	r23, Z+
    236a:	4c 87       	std	Y+12, r20	; 0x0c
    236c:	5d 87       	std	Y+13, r21	; 0x0d
    236e:	6e 87       	std	Y+14, r22	; 0x0e
    2370:	7f 87       	std	Y+15, r23	; 0x0f
    2372:	8f 01       	movw	r16, r30
    2374:	a4 01       	movw	r20, r8
    2376:	6c 85       	ldd	r22, Y+12	; 0x0c
    2378:	7d 85       	ldd	r23, Y+13	; 0x0d
    237a:	8e 85       	ldd	r24, Y+14	; 0x0e
    237c:	9f 85       	ldd	r25, Y+15	; 0x0f
    237e:	0e 94 47 12 	call	0x248e	; 0x248e <__ultoa_invert>
    2382:	c8 2e       	mov	r12, r24
    2384:	c8 18       	sub	r12, r8
    2386:	e8 94       	clt
    2388:	d7 f8       	bld	r13, 7
    238a:	68 cf       	rjmp	.-304    	; 0x225c <vfprintf+0x206>
    238c:	81 91       	ld	r24, Z+
    238e:	91 91       	ld	r25, Z+
    2390:	ac 01       	movw	r20, r24
    2392:	70 e0       	ldi	r23, 0x00	; 0
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	e9 cf       	rjmp	.-46     	; 0x236a <vfprintf+0x314>
    2398:	52 fc       	sbrc	r5, 2
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <vfprintf+0x34a>
    239c:	a3 94       	inc	r10
    239e:	7a cf       	rjmp	.-268    	; 0x2294 <vfprintf+0x23e>
    23a0:	a3 94       	inc	r10
    23a2:	a3 94       	inc	r10
    23a4:	77 cf       	rjmp	.-274    	; 0x2294 <vfprintf+0x23e>
    23a6:	85 2d       	mov	r24, r5
    23a8:	86 78       	andi	r24, 0x86	; 134
    23aa:	09 f4       	brne	.+2      	; 0x23ae <vfprintf+0x358>
    23ac:	73 cf       	rjmp	.-282    	; 0x2294 <vfprintf+0x23e>
    23ae:	f6 cf       	rjmp	.-20     	; 0x239c <vfprintf+0x346>
    23b0:	b7 01       	movw	r22, r14
    23b2:	80 e2       	ldi	r24, 0x20	; 32
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    23ba:	a3 94       	inc	r10
    23bc:	a4 14       	cp	r10, r4
    23be:	c0 f3       	brcs	.-16     	; 0x23b0 <vfprintf+0x35a>
    23c0:	31 2c       	mov	r3, r1
    23c2:	74 cf       	rjmp	.-280    	; 0x22ac <vfprintf+0x256>
    23c4:	34 2c       	mov	r3, r4
    23c6:	3a 18       	sub	r3, r10
    23c8:	a4 14       	cp	r10, r4
    23ca:	08 f4       	brcc	.+2      	; 0x23ce <vfprintf+0x378>
    23cc:	6f cf       	rjmp	.-290    	; 0x22ac <vfprintf+0x256>
    23ce:	f8 cf       	rjmp	.-16     	; 0x23c0 <vfprintf+0x36a>
    23d0:	85 2d       	mov	r24, r5
    23d2:	86 78       	andi	r24, 0x86	; 134
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <vfprintf+0x382>
    23d6:	7a cf       	rjmp	.-268    	; 0x22cc <vfprintf+0x276>
    23d8:	8b e2       	ldi	r24, 0x2B	; 43
    23da:	51 fe       	sbrs	r5, 1
    23dc:	80 e2       	ldi	r24, 0x20	; 32
    23de:	57 fc       	sbrc	r5, 7
    23e0:	8d e2       	ldi	r24, 0x2D	; 45
    23e2:	b7 01       	movw	r22, r14
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	70 cf       	rjmp	.-288    	; 0x22c8 <vfprintf+0x272>
    23e8:	b7 01       	movw	r22, r14
    23ea:	80 e3       	ldi	r24, 0x30	; 48
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    23f2:	ba 94       	dec	r11
    23f4:	6b cf       	rjmp	.-298    	; 0x22cc <vfprintf+0x276>
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	9f ef       	ldi	r25, 0xFF	; 255
    23fa:	97 cf       	rjmp	.-210    	; 0x232a <vfprintf+0x2d4>

000023fc <__ctype_isfalse>:
    23fc:	99 27       	eor	r25, r25
    23fe:	88 27       	eor	r24, r24

00002400 <__ctype_istrue>:
    2400:	08 95       	ret

00002402 <strnlen_P>:
    2402:	fc 01       	movw	r30, r24
    2404:	05 90       	lpm	r0, Z+
    2406:	61 50       	subi	r22, 0x01	; 1
    2408:	70 40       	sbci	r23, 0x00	; 0
    240a:	01 10       	cpse	r0, r1
    240c:	d8 f7       	brcc	.-10     	; 0x2404 <strnlen_P+0x2>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	8e 0f       	add	r24, r30
    2414:	9f 1f       	adc	r25, r31
    2416:	08 95       	ret

00002418 <strnlen>:
    2418:	fc 01       	movw	r30, r24
    241a:	61 50       	subi	r22, 0x01	; 1
    241c:	70 40       	sbci	r23, 0x00	; 0
    241e:	01 90       	ld	r0, Z+
    2420:	01 10       	cpse	r0, r1
    2422:	d8 f7       	brcc	.-10     	; 0x241a <strnlen+0x2>
    2424:	80 95       	com	r24
    2426:	90 95       	com	r25
    2428:	8e 0f       	add	r24, r30
    242a:	9f 1f       	adc	r25, r31
    242c:	08 95       	ret

0000242e <fputc>:
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	18 2f       	mov	r17, r24
    2438:	09 2f       	mov	r16, r25
    243a:	eb 01       	movw	r28, r22
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	81 fd       	sbrc	r24, 1
    2440:	09 c0       	rjmp	.+18     	; 0x2454 <fputc+0x26>
    2442:	1f ef       	ldi	r17, 0xFF	; 255
    2444:	0f ef       	ldi	r16, 0xFF	; 255
    2446:	81 2f       	mov	r24, r17
    2448:	90 2f       	mov	r25, r16
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	08 95       	ret
    2454:	82 ff       	sbrs	r24, 2
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <fputc+0x52>
    2458:	2e 81       	ldd	r18, Y+6	; 0x06
    245a:	3f 81       	ldd	r19, Y+7	; 0x07
    245c:	8c 81       	ldd	r24, Y+4	; 0x04
    245e:	9d 81       	ldd	r25, Y+5	; 0x05
    2460:	28 17       	cp	r18, r24
    2462:	39 07       	cpc	r19, r25
    2464:	3c f4       	brge	.+14     	; 0x2474 <fputc+0x46>
    2466:	e8 81       	ld	r30, Y
    2468:	f9 81       	ldd	r31, Y+1	; 0x01
    246a:	cf 01       	movw	r24, r30
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	88 83       	st	Y, r24
    2470:	99 83       	std	Y+1, r25	; 0x01
    2472:	10 83       	st	Z, r17
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	9f 81       	ldd	r25, Y+7	; 0x07
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	8e 83       	std	Y+6, r24	; 0x06
    247c:	9f 83       	std	Y+7, r25	; 0x07
    247e:	e3 cf       	rjmp	.-58     	; 0x2446 <fputc+0x18>
    2480:	e8 85       	ldd	r30, Y+8	; 0x08
    2482:	f9 85       	ldd	r31, Y+9	; 0x09
    2484:	81 2f       	mov	r24, r17
    2486:	09 95       	icall
    2488:	89 2b       	or	r24, r25
    248a:	a1 f3       	breq	.-24     	; 0x2474 <fputc+0x46>
    248c:	da cf       	rjmp	.-76     	; 0x2442 <fputc+0x14>

0000248e <__ultoa_invert>:
    248e:	fa 01       	movw	r30, r20
    2490:	aa 27       	eor	r26, r26
    2492:	28 30       	cpi	r18, 0x08	; 8
    2494:	51 f1       	breq	.+84     	; 0x24ea <__ultoa_invert+0x5c>
    2496:	20 31       	cpi	r18, 0x10	; 16
    2498:	81 f1       	breq	.+96     	; 0x24fa <__ultoa_invert+0x6c>
    249a:	e8 94       	clt
    249c:	6f 93       	push	r22
    249e:	6e 7f       	andi	r22, 0xFE	; 254
    24a0:	6e 5f       	subi	r22, 0xFE	; 254
    24a2:	7f 4f       	sbci	r23, 0xFF	; 255
    24a4:	8f 4f       	sbci	r24, 0xFF	; 255
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	af 4f       	sbci	r26, 0xFF	; 255
    24aa:	b1 e0       	ldi	r27, 0x01	; 1
    24ac:	3e d0       	rcall	.+124    	; 0x252a <__ultoa_invert+0x9c>
    24ae:	b4 e0       	ldi	r27, 0x04	; 4
    24b0:	3c d0       	rcall	.+120    	; 0x252a <__ultoa_invert+0x9c>
    24b2:	67 0f       	add	r22, r23
    24b4:	78 1f       	adc	r23, r24
    24b6:	89 1f       	adc	r24, r25
    24b8:	9a 1f       	adc	r25, r26
    24ba:	a1 1d       	adc	r26, r1
    24bc:	68 0f       	add	r22, r24
    24be:	79 1f       	adc	r23, r25
    24c0:	8a 1f       	adc	r24, r26
    24c2:	91 1d       	adc	r25, r1
    24c4:	a1 1d       	adc	r26, r1
    24c6:	6a 0f       	add	r22, r26
    24c8:	71 1d       	adc	r23, r1
    24ca:	81 1d       	adc	r24, r1
    24cc:	91 1d       	adc	r25, r1
    24ce:	a1 1d       	adc	r26, r1
    24d0:	20 d0       	rcall	.+64     	; 0x2512 <__ultoa_invert+0x84>
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <__ultoa_invert+0x48>
    24d4:	68 94       	set
    24d6:	3f 91       	pop	r19
    24d8:	2a e0       	ldi	r18, 0x0A	; 10
    24da:	26 9f       	mul	r18, r22
    24dc:	11 24       	eor	r1, r1
    24de:	30 19       	sub	r19, r0
    24e0:	30 5d       	subi	r19, 0xD0	; 208
    24e2:	31 93       	st	Z+, r19
    24e4:	de f6       	brtc	.-74     	; 0x249c <__ultoa_invert+0xe>
    24e6:	cf 01       	movw	r24, r30
    24e8:	08 95       	ret
    24ea:	46 2f       	mov	r20, r22
    24ec:	47 70       	andi	r20, 0x07	; 7
    24ee:	40 5d       	subi	r20, 0xD0	; 208
    24f0:	41 93       	st	Z+, r20
    24f2:	b3 e0       	ldi	r27, 0x03	; 3
    24f4:	0f d0       	rcall	.+30     	; 0x2514 <__ultoa_invert+0x86>
    24f6:	c9 f7       	brne	.-14     	; 0x24ea <__ultoa_invert+0x5c>
    24f8:	f6 cf       	rjmp	.-20     	; 0x24e6 <__ultoa_invert+0x58>
    24fa:	46 2f       	mov	r20, r22
    24fc:	4f 70       	andi	r20, 0x0F	; 15
    24fe:	40 5d       	subi	r20, 0xD0	; 208
    2500:	4a 33       	cpi	r20, 0x3A	; 58
    2502:	18 f0       	brcs	.+6      	; 0x250a <__ultoa_invert+0x7c>
    2504:	49 5d       	subi	r20, 0xD9	; 217
    2506:	31 fd       	sbrc	r19, 1
    2508:	40 52       	subi	r20, 0x20	; 32
    250a:	41 93       	st	Z+, r20
    250c:	02 d0       	rcall	.+4      	; 0x2512 <__ultoa_invert+0x84>
    250e:	a9 f7       	brne	.-22     	; 0x24fa <__ultoa_invert+0x6c>
    2510:	ea cf       	rjmp	.-44     	; 0x24e6 <__ultoa_invert+0x58>
    2512:	b4 e0       	ldi	r27, 0x04	; 4
    2514:	a6 95       	lsr	r26
    2516:	97 95       	ror	r25
    2518:	87 95       	ror	r24
    251a:	77 95       	ror	r23
    251c:	67 95       	ror	r22
    251e:	ba 95       	dec	r27
    2520:	c9 f7       	brne	.-14     	; 0x2514 <__ultoa_invert+0x86>
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	61 05       	cpc	r22, r1
    2526:	71 05       	cpc	r23, r1
    2528:	08 95       	ret
    252a:	9b 01       	movw	r18, r22
    252c:	ac 01       	movw	r20, r24
    252e:	0a 2e       	mov	r0, r26
    2530:	06 94       	lsr	r0
    2532:	57 95       	ror	r21
    2534:	47 95       	ror	r20
    2536:	37 95       	ror	r19
    2538:	27 95       	ror	r18
    253a:	ba 95       	dec	r27
    253c:	c9 f7       	brne	.-14     	; 0x2530 <__ultoa_invert+0xa2>
    253e:	62 0f       	add	r22, r18
    2540:	73 1f       	adc	r23, r19
    2542:	84 1f       	adc	r24, r20
    2544:	95 1f       	adc	r25, r21
    2546:	a0 1d       	adc	r26, r0
    2548:	08 95       	ret

0000254a <__udivmodsi4>:
    254a:	a1 e2       	ldi	r26, 0x21	; 33
    254c:	1a 2e       	mov	r1, r26
    254e:	aa 1b       	sub	r26, r26
    2550:	bb 1b       	sub	r27, r27
    2552:	fd 01       	movw	r30, r26
    2554:	0d c0       	rjmp	.+26     	; 0x2570 <__udivmodsi4_ep>

00002556 <__udivmodsi4_loop>:
    2556:	aa 1f       	adc	r26, r26
    2558:	bb 1f       	adc	r27, r27
    255a:	ee 1f       	adc	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	a2 17       	cp	r26, r18
    2560:	b3 07       	cpc	r27, r19
    2562:	e4 07       	cpc	r30, r20
    2564:	f5 07       	cpc	r31, r21
    2566:	20 f0       	brcs	.+8      	; 0x2570 <__udivmodsi4_ep>
    2568:	a2 1b       	sub	r26, r18
    256a:	b3 0b       	sbc	r27, r19
    256c:	e4 0b       	sbc	r30, r20
    256e:	f5 0b       	sbc	r31, r21

00002570 <__udivmodsi4_ep>:
    2570:	66 1f       	adc	r22, r22
    2572:	77 1f       	adc	r23, r23
    2574:	88 1f       	adc	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	1a 94       	dec	r1
    257a:	69 f7       	brne	.-38     	; 0x2556 <__udivmodsi4_loop>
    257c:	60 95       	com	r22
    257e:	70 95       	com	r23
    2580:	80 95       	com	r24
    2582:	90 95       	com	r25
    2584:	9b 01       	movw	r18, r22
    2586:	ac 01       	movw	r20, r24
    2588:	bd 01       	movw	r22, r26
    258a:	cf 01       	movw	r24, r30
    258c:	08 95       	ret

0000258e <__prologue_saves__>:
    258e:	2f 92       	push	r2
    2590:	3f 92       	push	r3
    2592:	4f 92       	push	r4
    2594:	5f 92       	push	r5
    2596:	6f 92       	push	r6
    2598:	7f 92       	push	r7
    259a:	8f 92       	push	r8
    259c:	9f 92       	push	r9
    259e:	af 92       	push	r10
    25a0:	bf 92       	push	r11
    25a2:	cf 92       	push	r12
    25a4:	df 92       	push	r13
    25a6:	ef 92       	push	r14
    25a8:	ff 92       	push	r15
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	ca 1b       	sub	r28, r26
    25b8:	db 0b       	sbc	r29, r27
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	09 94       	ijmp

000025c0 <__epilogue_restores__>:
    25c0:	2a 88       	ldd	r2, Y+18	; 0x12
    25c2:	39 88       	ldd	r3, Y+17	; 0x11
    25c4:	48 88       	ldd	r4, Y+16	; 0x10
    25c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    25ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    25cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    25ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    25d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25d2:	b9 84       	ldd	r11, Y+9	; 0x09
    25d4:	c8 84       	ldd	r12, Y+8	; 0x08
    25d6:	df 80       	ldd	r13, Y+7	; 0x07
    25d8:	ee 80       	ldd	r14, Y+6	; 0x06
    25da:	fd 80       	ldd	r15, Y+5	; 0x05
    25dc:	0c 81       	ldd	r16, Y+4	; 0x04
    25de:	1b 81       	ldd	r17, Y+3	; 0x03
    25e0:	aa 81       	ldd	r26, Y+2	; 0x02
    25e2:	b9 81       	ldd	r27, Y+1	; 0x01
    25e4:	ce 0f       	add	r28, r30
    25e6:	d1 1d       	adc	r29, r1
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	ed 01       	movw	r28, r26
    25ee:	08 95       	ret

000025f0 <_exit>:
    25f0:	f8 94       	cli

000025f2 <__stop_program>:
    25f2:	ff cf       	rjmp	.-2      	; 0x25f2 <__stop_program>
